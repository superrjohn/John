<!DOCTYPE html><html lang="zh-TW"><head><meta charset="UTF-8"/><meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=2"/><meta name="theme-color" content="#222"/><meta http-equiv="X-UA-COMPATIBLE" content="IE=edge,chrome=1"/><meta name="renderer" content="webkit"/><link rel="icon" type="image/ico" sizes="32x32" href="/John/assets/favicon.ico"/><link rel="apple-touch-icon" sizes="180x180" href="/John/assets/apple-touch-icon.png"/><link rel="alternate" href="/John/rss.xml" title="一切都是過程" type="application/rss+xml"><link rel="alternate" href="/John/atom.xml" title="一切都是過程" type="application/atom+xml"><link rel="alternate" type="application/json" title="一切都是過程" href="https://superrjohn.github.io/John/feed.json"/><link rel="preconnect" href="https://lf9-cdn-tos.bytecdntp.com"/><link rel="dns-prefetch" href="https://cdn.jsdelivr.net"/><link rel="dns-prefetch" href="https://unpkg.com"/><link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Mulish:300,300italic,400,400italic,700,700italic%7CFredericka%20the%20Great:300,300italic,400,400italic,700,700italic%7CNoto%20Serif%20JP:300,300italic,400,400italic,700,700italic%7CNoto%20Serif%20SC:300,300italic,400,400italic,700,700italic%7CInconsolata:300,300italic,400,400italic,700,700italic&display=swap&subset=latin,latin-ext"><link rel="stylesheet" href="/John/css/app.css?v=0.3.6"><script src="https://cdn.staticfile.org/vue/3.2.45/vue.global.prod.js"></script><link rel="stylesheet" href="https://unpkg.com/@waline/client@v2/dist/waline.css"/><meta name="keywords" content="Radis"/><link rel="canonical" href="https://superrjohn.github.io/John/2023/10/26/java/radis/radis"><title>Redis 緩存優化</title><meta name="generator" content="Hexo 6.3.0"></head><body itemscope itemtype="http://schema.org/WebPage"><div id="loading"><div class="cat"><div class="body"></div><div class="head"><div class="face"></div></div><div class="foot"><div class="tummy-end"></div><div class="bottom"></div><div class="legs left"></div><div class="legs right"></div></div><div class="paw"><div class="hands left"></div><div class="hands right"></div></div></div></div><div id="container"><header id="header" itemscope itemtype="http://schema.org/WPHeader"><div class="inner"><div id="brand"><div class="pjax"><h1 itemprop="name headline">Redis 緩存優化</h1><div class="meta"><span class="item" title="創建時間：2023-10-26 22:15:36"><span class="icon"><i class="ic i-calendar"></i></span><span class="text">發表於</span><time itemprop="dateCreated datePublished" datetime="2023-10-26T22:15:36+08:00">2023-10-26</time></span><span class="item" title="文章字數"><span class="icon"><i class="ic i-pen"></i></span><span class="text">文章字數</span><span>14k</span><span class="text">字</span></span><span class="item" title="所需閱讀時間"><span class="icon"><i class="ic i-clock"></i></span><span class="text">所需閱讀時間</span><span>12 分鐘</span></span></div></div></div><nav id="nav"><div class="inner"><div class="toggle"><div class="lines" aria-label="切換導航欄"><span class="line"></span><span class="line"></span><span class="line"></span></div></div><ul class="menu"><li class="item title"><a href="/John/" rel="start">john's blog</a></li></ul><ul class="right" id="rightNav"><li class="item theme" @click="changeThemeByBtn"><i class="ic" :class="{'i-sun': !themeStatus,'i-moon': themeStatus}"></i></li><li class="item search"><i class="ic i-search"></i></li></ul></div></nav></div><div class="pjax" id="imgs"><img src="https://pic1.zhimg.com/50/v2-139627556961d50c4f9b27badce0b99e_720w.jpg?source=1940ef5c"></div></header><div id="waves"><svg class="waves" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 24 150 28" preserveAspectRatio="none" shape-rendering="auto"><defs><path id="gentle-wave" d="M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z"></path></defs><g class="parallax"><use xlink:href="#gentle-wave" x="48" y="0"></use><use xlink:href="#gentle-wave" x="48" y="3"></use><use xlink:href="#gentle-wave" x="48" y="5"></use><use xlink:href="#gentle-wave" x="48" y="7"></use></g></svg></div><main><div class="inner"><div class="pjax" id="main"><div class="article wrap"><div class="breadcrumb" itemListElement itemscope itemtype="https://schema.org/BreadcrumbList"><i class="ic i-home"></i><span><a href="/John/">首頁</a></span><i class="ic i-angle-right"></i><span itemprop="itemListElement" itemscope="itemscope" itemtype="https://schema.org/ListItem"><a href="/John/categories/java/" itemprop="item" rel="index" title="分類於java"><span itemprop="name">java<meta itemprop="position" content="0"/></span></a></span><i class="ic i-angle-right"></i><span class="current" itemprop="itemListElement" itemscope="itemscope" itemtype="https://schema.org/ListItem"><a href="/John/categories/java/radis-rabbitmq/" itemprop="item" rel="index" title="分類於中間件"><span itemprop="name">中間件<meta itemprop="position" content="1"/></span></a></span></div><article class="post block" itemscope="itemscope" itemtype="http://schema.org/Article" lang="zh-TW"><link itemprop="mainEntityOfPage" href="https://superrjohn.github.io/John/2023/10/26/java/radis/radis"/><span hidden="hidden" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="image" content="/John/assets/404.png"/><meta itemprop="name" content="John"/><meta itemprop="description" content=", "/></span><span hidden="hidden" itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="一切都是過程"/></span><div class="body md" itemprop="articleBody"><p>在此特别感謝黑馬程序員提供的課程: <span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWo4NDExTjdCbS8=">學成在線</span></p>
<p>前言<br>
於由實習項目快做完才做記錄，而且項目模塊較多，故挑部份來記錄<br>
<span class="rainbow">完整项目地址</span>：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N1cGVycmpvaG4vamF2YV93ZWI=">https://github.com/superrjohn/java_web</span></p>
<h1 id="緩存優化"><a class="markdownIt-Anchor" href="#緩存優化">#</a> 緩存優化</h1>
<h2 id="redis緩存"><a class="markdownIt-Anchor" href="#redis緩存">#</a> redis 緩存</h2>
<p>測試案例是根據 id 查詢課程信息，這裡不存在複雜的 SQL，也不存在資料庫連線不釋放的問題，暫時不考慮資料庫方面的最佳化。<br>
課程發布資訊的特點的是查詢較多，修改很少，這裡考慮將課程發布資訊進行緩存，白名單數據的內容也可以考慮進行緩存。<br>
課程資訊緩存的流程如下：</p>
<img data-src="/John/img/java/redis/1.png" class="abc">
<p>1️⃣在 nacos 配置 redis-dev.yaml（group=xuecheng-plus-common）</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">spring:  </span><br><span class="line">  redis: </span><br><span class="line">    host: <span class="number">192.168</span><span class="number">.101</span><span class="number">.65</span> </span><br><span class="line">    port: <span class="number">6379</span> </span><br><span class="line">    password: redis </span><br><span class="line">    database: <span class="number">0</span> </span><br><span class="line">    lettuce: </span><br><span class="line">      pool: </span><br><span class="line">        max-active: <span class="number">20</span> </span><br><span class="line">        max-idle: <span class="number">10</span> </span><br><span class="line">        min-idle: <span class="number">0</span> </span><br><span class="line">    timeout: <span class="number">10000</span> </span><br></pre></td></tr></table></figure>
<p>2️⃣在 content-api 微服務加載 redis-dev.yaml</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">shared-configs: </span><br><span class="line">    - data-id: redis-$&#123;spring.profiles.active&#125;.yaml </span><br><span class="line">      group: xuecheng-plus-common </span><br><span class="line">      refresh: <span class="literal">true</span> </span><br></pre></td></tr></table></figure>
<p>3️⃣在 content-service 微服務中添加依賴</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt; </span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; </span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt; </span><br><span class="line">&lt;/dependency&gt; </span><br><span class="line">&lt;dependency&gt; </span><br><span class="line">    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt; </span><br><span class="line">    &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt; </span><br><span class="line">    &lt;version&gt;<span class="number">2.6</span><span class="number">.2</span>&lt;/version&gt; </span><br><span class="line">&lt;/dependency&gt; </span><br></pre></td></tr></table></figure>
<p>4️⃣定義查詢緩存介面：</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 查询缓存中的课程信息 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> courseId  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> com.xuecheng.content.model.po.CoursePublish </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.M </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/10/22 16:15 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">public</span> CoursePublish <span class="title function_">getCoursePublishCache</span><span class="params">(Long courseId)</span>; </span><br></pre></td></tr></table></figure>
<p>5️⃣介面實作如下，key 的命名以 course 為前綴加上 courseId</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> CoursePublish <span class="title function_">getCoursePublishCache</span><span class="params">(Long courseId)</span>&#123; </span><br><span class="line">    <span class="comment">//查询缓存 </span></span><br><span class="line">   <span class="type">Object</span>  <span class="variable">jsonObj</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;course:&quot;</span> + courseId); </span><br><span class="line">    <span class="keyword">if</span>(jsonObj!=<span class="literal">null</span>)&#123; </span><br><span class="line">    <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> jsonObj.toString(); </span><br><span class="line">        System.out.println(<span class="string">&quot;=================从缓存查=================&quot;</span>); </span><br><span class="line">        <span class="type">CoursePublish</span> <span class="variable">coursePublish</span> <span class="operator">=</span> JSON.parseObject(jsonString, CoursePublish.class); </span><br><span class="line">        <span class="keyword">return</span> coursePublish; </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        System.out.println(<span class="string">&quot;从数据库查询...&quot;</span>); </span><br><span class="line">        <span class="comment">//从数据库查询 </span></span><br><span class="line">        <span class="type">CoursePublish</span> <span class="variable">coursePublish</span> <span class="operator">=</span> getCoursePublish(courseId); </span><br><span class="line">        <span class="keyword">if</span>(coursePublish!=<span class="literal">null</span>)&#123; </span><br><span class="line">            redisTemplate.opsForValue().set(<span class="string">&quot;course:&quot;</span> + courseId, JSON.toJSONString(coursePublish)); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> coursePublish; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>6️⃣修改 controller 接口調用代碼</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;获取课程发布信息&quot;)</span> </span><br><span class="line">    <span class="meta">@ResponseBody</span> </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/course/whole/&#123;courseId&#125;&quot;)</span> </span><br><span class="line">    <span class="keyword">public</span> CoursePreviewDto <span class="title function_">getCoursePublish</span><span class="params">(<span class="meta">@PathVariable(&quot;courseId&quot;)</span> Long courseId)</span> &#123; </span><br><span class="line">        <span class="comment">//查询课程发布信息 </span></span><br><span class="line">        <span class="type">CoursePublish</span> <span class="variable">coursePublish</span> <span class="operator">=</span> coursePublishService.getCoursePublishCache(courseId); </span><br><span class="line"><span class="comment">//        CoursePublish coursePublish = coursePublishService.getCoursePublish(courseId); </span></span><br><span class="line">        <span class="keyword">if</span>(coursePublish==<span class="literal">null</span>)&#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CoursePreviewDto</span>(); </span><br><span class="line">        &#125; </span><br><span class="line"> </span><br><span class="line">        <span class="comment">//课程基本信息 </span></span><br><span class="line">        <span class="type">CourseBaseInfoDto</span> <span class="variable">courseBase</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CourseBaseInfoDto</span>(); </span><br><span class="line">        BeanUtils.copyProperties(coursePublish, courseBase); </span><br><span class="line">        <span class="comment">//课程计划 </span></span><br><span class="line">        List&lt;TeachplanDto&gt; teachplans = JSON.parseArray(coursePublish.getTeachplan(), TeachplanDto.class); </span><br><span class="line">        <span class="type">CoursePreviewDto</span> <span class="variable">coursePreviewInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CoursePreviewDto</span>(); </span><br><span class="line">        coursePreviewInfo.setCourseBase(courseBase); </span><br><span class="line">        coursePreviewInfo.setTeachplans(teachplans); </span><br><span class="line">        <span class="keyword">return</span> coursePreviewInfo; </span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure>
<p>重新測試請求內容管理服務課程查詢介面，吞吐量達到 2700 左右，增加了近一倍。</p>
<img data-src="/John/img/java/redis/2.png" class="abc">
<h1 id="緩存穿透問題"><a class="markdownIt-Anchor" href="#緩存穿透問題">#</a> 緩存穿透問題</h1>
<h2 id="什麼是緩存穿透"><a class="markdownIt-Anchor" href="#什麼是緩存穿透">#</a> 什麼是緩存穿透</h2>
<p>我們分析下程式碼:</p>
<img data-src="/John/img/java/redis/3.png" class="abc">
<p>如果有惡意攻擊的可能，如果有大量並發去查詢一個不存在的課程資訊會出現什麼問題呢？<br>
例如去請求 /content/course/whole/181，查詢 181 號課程，該課程並不在課程發布表中。<br>
進行壓力測試發現會去請求資料庫。<br>
大量並發去存取一個資料庫不存在的數據，由於緩存中沒有該數據導致大量並發查詢資料庫，這個現像要緩存穿透。</p>
<img data-src="/John/img/java/redis/4.png" class="abc">
<p>緩存穿透可以造成資料庫瞬間壓力過大，連線數等資源用完，最後資料庫拒絕連線不可用。</p>
<h2 id="解決緩存穿透"><a class="markdownIt-Anchor" href="#解決緩存穿透">#</a> 解決緩存穿透</h2>
<p>如何解決緩存穿透？<br>
1️⃣對請求增加校驗機制</p>
<p>例如：課程 Id 是長整型，如果發來的不是長整型則直接回傳，但要有規矩才可以</p>
<p>2️⃣使用布隆過濾器</p>
<p>布隆過濾器的特點是，高效地插入和查詢，佔用空間少；查詢結果有不確定性，如果查詢結果是存在則元素不一定存在，如果不存在則一定不存在；另外它只能添加元素 不能刪除元素，因為刪除元素會增加誤判率。<br>
例如：將商品 id 寫入布隆過濾器，如果分 3 次 hash 此時在布隆過濾器有 3 個點，當從布隆過濾器查詢該商品 id，透過 hash 找到了該商品 id 在過濾器 中的點，此時回傳 1，如果找不到一定會回傳 0。<br>
所以，為了避免緩存穿透我們需要緩存預熱將要查詢的課程或商品資訊的 id 提前存入布隆過濾器，添加資料時將資訊的 id 也存入過濾器，當去查詢一個資料時先在 布隆過濾器中找一下如果沒有到到就表示不存在，此時直接返回。<br>
實作方法有：1.Google 工具包 Guava 實作 2.redisson</p>
<p>3️⃣緩存空值或特殊值</p>
<p>請求通過了第一步的校驗，查詢資料庫得到的資料不存在，此時我們仍然去緩存數據，緩存一個空值或一個特殊值的資料。<br>
但是要注意：如果緩存了空值或特殊值要設定一個短暫的過期時間。</p>
<p>本項本採用返回空值的解決方法</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> CoursePublish <span class="title function_">getCoursePublishCache</span><span class="params">(Long courseId)</span> &#123; </span><br><span class="line"> </span><br><span class="line">    <span class="comment">//查询缓存 </span></span><br><span class="line">   <span class="type">Object</span>  <span class="variable">jsonObj</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;course:&quot;</span> + courseId); </span><br><span class="line">    <span class="keyword">if</span>(jsonObj!=<span class="literal">null</span>)&#123; </span><br><span class="line">    <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> jsonObj.toString(); </span><br><span class="line">        <span class="keyword">if</span>(jsonString.equals(<span class="string">&quot;null&quot;</span>)) </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>; </span><br><span class="line">        <span class="type">CoursePublish</span> <span class="variable">coursePublish</span> <span class="operator">=</span> JSON.parseObject(jsonString, CoursePublish.class); </span><br><span class="line">        <span class="keyword">return</span> coursePublish; </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">//从数据库查询 </span></span><br><span class="line">        System.out.println(<span class="string">&quot;从数据库查询数据...&quot;</span>); </span><br><span class="line">        <span class="type">CoursePublish</span> <span class="variable">coursePublish</span> <span class="operator">=</span> getCoursePublish(courseId); </span><br><span class="line">        <span class="comment">//设置过期时间300秒 </span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;course:&quot;</span> + courseId, JSON.toJSONString(coursePublish),<span class="number">30</span>, TimeUnit.SECONDS); </span><br><span class="line">        <span class="keyword">return</span> coursePublish; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h1 id="緩存雪崩"><a class="markdownIt-Anchor" href="#緩存雪崩">#</a> 緩存雪崩</h1>
<h2 id="什麼是緩存雪崩"><a class="markdownIt-Anchor" href="#什麼是緩存雪崩">#</a> 什麼是緩存雪崩</h2>
<p>緩存雪崩是緩存中大量 key 失效後當高並發到來時導致大量請求到資料庫，瞬間耗盡資料庫資源，導致資料庫無法使用。</p>
<p>造成緩存雪崩問題的原因是大量 key 擁有了相同的過期時間，例如對課程資訊設定緩存過期時間為 10 分鐘，在大量請求同時查詢大量的課程資訊時，此時就會有大量的課程存在相同 的過期時間，一旦失效將同時失效，造成雪崩問題。</p>
<h2 id="解決緩存雪崩"><a class="markdownIt-Anchor" href="#解決緩存雪崩">#</a> 解決緩存雪崩</h2>
<p>1️⃣使用同步鎖定控制查詢資料庫的線程<br>
使用同步鎖定控制查詢資料庫的線程，只允許有一個線程去查詢資料庫，查詢得到資料後存入緩存。</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(obj)&#123; </span><br><span class="line">  <span class="comment">//查询数据库 </span></span><br><span class="line">  <span class="comment">//存入缓存 </span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>2️⃣對同一類型資訊的 key 設定不同的過期時間<br>
通常對一類資訊的 key 設定的過期時間是相同的，這裡可以在原有固定時間的基礎上加上一個隨機時間使它們的過期時間都不相同。<br>
範例程式碼如下：</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//设置过期时间300秒 </span></span><br><span class="line">redisTemplate.opsForValue().set(<span class="string">&quot;course:&quot;</span> + courseId, JSON.toJSONString(coursePublish),<span class="number">300</span>+<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">100</span>), TimeUnit.SECONDS); </span><br></pre></td></tr></table></figure>
<p>3️⃣緩存預熱<br>
不用等到請求到來再去查詢資料庫存入緩存，可以提前將資料存入緩存。 使用緩存預熱機制通常有專門的後台程式將資料庫的資料同步到緩存。</p>
<h1 id="緩存擊穿"><a class="markdownIt-Anchor" href="#緩存擊穿">#</a> 緩存擊穿</h1>
<h2 id="什麼是緩存擊穿"><a class="markdownIt-Anchor" href="#什麼是緩存擊穿">#</a> 什麼是緩存擊穿</h2>
<p>緩存擊穿是指大量並發存取同一個熱點數據，當熱點資料失效後同時去請求資料庫，瞬間耗盡資料庫資源，導致資料庫無法使用。<br>
例如某手機新品發布，當緩存失效時有大量並發到來導致同時去存取資料庫。</p>
<h2 id="解决緩存擊穿"><a class="markdownIt-Anchor" href="#解决緩存擊穿">#</a> 解决緩存擊穿</h2>
<p>如何解決緩存擊穿？</p>
<p>1. 使用同步鎖定控制查詢資料庫的線程</p>
<p>使用同步鎖定控制查詢資料庫的程式碼，只允許有一個執行緒去查詢資料庫，查詢得到資料庫存入緩存。</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(obj)&#123; </span><br><span class="line">  <span class="comment">//查询数据库 </span></span><br><span class="line">  <span class="comment">//存入缓存 </span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>2. 熱點數據不過期</p>
<p>可以由後台程式提前將熱點資料加入緩存，緩存過期時間不過期，由後台程式做好緩存同步。</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  CoursePublish <span class="title function_">getCoursePublishCache</span><span class="params">(Long courseId)</span>&#123; </span><br><span class="line">    <span class="keyword">synchronized</span>(<span class="built_in">this</span>)&#123; </span><br><span class="line">        <span class="comment">//查询缓存 </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> (String) redisTemplate.opsForValue().get(<span class="string">&quot;course:&quot;</span> + courseId); </span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isNotEmpty(jsonString))&#123; </span><br><span class="line">            <span class="keyword">if</span>(jsonString.equals(<span class="string">&quot;null&quot;</span>)) </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>; </span><br><span class="line">            <span class="type">CoursePublish</span> <span class="variable">coursePublish</span> <span class="operator">=</span> JSON.parseObject(jsonString, CoursePublish.class); </span><br><span class="line">            <span class="keyword">return</span> coursePublish; </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">            System.out.println(<span class="string">&quot;=========从数据库查询==========&quot;</span>); </span><br><span class="line">            <span class="comment">//从数据库查询 </span></span><br><span class="line">            <span class="type">CoursePublish</span> <span class="variable">coursePublish</span> <span class="operator">=</span> getCoursePublish(courseId); </span><br><span class="line">           <span class="comment">//设置过期时间300秒 </span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;course:&quot;</span> + courseId, JSON.toJSONString(coursePublish),<span class="number">300</span>, TimeUnit.SECONDS); </span><br><span class="line">            <span class="keyword">return</span> coursePublish; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>測試，吞吐量有 1300 左右</p>
<img data-src="/John/img/java/redis/5.png" class="abc">
<p>將上邊的程式碼進行最佳化，查詢緩存的程式碼不用 synchronized 加鎖控制，只對查詢資料庫加鎖，如下：</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  CoursePublish <span class="title function_">getCoursePublishCache</span><span class="params">(Long courseId)</span>&#123; </span><br><span class="line"> </span><br><span class="line">        <span class="comment">//查询缓存 </span></span><br><span class="line">         <span class="type">Object</span>  <span class="variable">jsonObj</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;course:&quot;</span> + courseId); </span><br><span class="line">         <span class="keyword">if</span>(jsonObj!=<span class="literal">null</span>)&#123; </span><br><span class="line">            <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> jsonObj.toString(); </span><br><span class="line">            <span class="type">CoursePublish</span> <span class="variable">coursePublish</span> <span class="operator">=</span> JSON.parseObject(jsonString, CoursePublish.class); </span><br><span class="line">            <span class="keyword">return</span> coursePublish; </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">            <span class="keyword">synchronized</span>(<span class="built_in">this</span>)&#123; </span><br><span class="line">                <span class="type">Object</span>  <span class="variable">jsonObj</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;course:&quot;</span> + courseId); </span><br><span class="line">                <span class="keyword">if</span>(jsonObj!=<span class="literal">null</span>)&#123; </span><br><span class="line">                   <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> jsonObj.toString(); </span><br><span class="line">                    <span class="type">CoursePublish</span> <span class="variable">coursePublish</span> <span class="operator">=</span> JSON.parseObject(jsonString, CoursePublish.class); </span><br><span class="line">                    <span class="keyword">return</span> coursePublish; </span><br><span class="line">                &#125; </span><br><span class="line">                 System.out.println(<span class="string">&quot;=========从数据库查询==========&quot;</span>); </span><br><span class="line">                <span class="comment">//从数据库查询 </span></span><br><span class="line">                <span class="type">CoursePublish</span> <span class="variable">coursePublish</span> <span class="operator">=</span> getCoursePublish(courseId); </span><br><span class="line">              <span class="comment">//设置过期时间300秒 </span></span><br><span class="line">                redisTemplate.opsForValue().set(<span class="string">&quot;course:&quot;</span> + courseId, JSON.toJSONString(coursePublish),<span class="number">300</span>, TimeUnit.SECONDS); </span><br><span class="line">                <span class="keyword">return</span> coursePublish; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>測試，查詢資料庫只發生一次，整個測試過程的吞吐量約 3800。</p>
<img data-src="/John/img/java/redis/6.png" class="abc">
<h1 id="分布式鎖"><a class="markdownIt-Anchor" href="#分布式鎖">#</a> 分布式鎖</h1>
<h2 id="本地鎖的問題"><a class="markdownIt-Anchor" href="#本地鎖的問題">#</a> 本地鎖的問題</h2>
<p>上邊的程式使用了同步鎖定解決了緩存擊穿、緩存雪崩的問題，並保證同一個 key 過期後只會查詢一次資料庫。</p>
<p>如果將同步鎖定的程式分散部署在多個虛擬機器上則無法保證同一個 key 只會查詢一次資料庫，如下圖：</p>
<img data-src="/John/img/java/redis/7.png" class="abc">
<p>一個同步鎖定程式只能保證同一個虛擬機中多個執行緒只有一個執行緒去資料庫，如果高並發透過網關負載平衡轉送給各個虛擬機，此時就會存在多個執行緒去查詢資料庫情況，因為虛擬機 中的鎖只能保證該虛擬機器自己的執行緒去同步執行，無法跨虛擬機器保證同步執行。</p>
<p>我們將虛擬機器內部的鎖叫本地鎖，本地鎖只能確保所在虛擬機器的執行緒同步執行。</p>
<h2 id="什么是分布鎖"><a class="markdownIt-Anchor" href="#什么是分布鎖">#</a> 什么是分布鎖</h2>
<p>本機鎖只能控制所在虛擬機器中的執行緒同步執行，現在要實現分散式環境下所有虛擬機器中的執行緒去同步執行就需要讓多個虛擬機器去共用一個鎖，虛擬機器可以分散部署，鎖 也可以分散部署，如下圖：</p>
<img data-src="/John/img/java/redis/8.png" class="abc">
<p>虛擬機器都去搶佔同一個鎖，鎖是一個單獨的程式提供加鎖、解鎖服務，誰搶到鎖誰去查詢資料庫。</p>
<p>該鎖已不屬於某個虛擬機，而是分散式部署，由多個虛擬機所共享，這種鎖叫做分散式鎖。</p>
<h2 id="分布式鎖的實現方案"><a class="markdownIt-Anchor" href="#分布式鎖的實現方案">#</a> 分布式鎖的實現方案</h2>
<p>實作分散式鎖的方案很多，常用的如下：</p>
<p>1️⃣基於資料庫實現分佈鎖</p>
<p>利用資料庫主鍵唯一性的特點，或利用資料庫唯一索引的特點，多個執行緒同時去插入相同的記錄，誰插入成功誰就搶到鎖。</p>
<p>2️⃣基於 redis 實現鎖</p>
<p>redis 提供了分散式鎖定的實作方案，例如：SETNX、set nx、redisson 等。</p>
<p>拿 SETNX 舉例說明，SETNX 指令的工作過程是去 set 一個不存在的 key，多個執行緒去設定同一個 key 只會有一個執行緒設定成功，設定成功的執行緒拿到鎖定。</p>
<p>3️⃣使用 zookeeper 實現</p>
<p>zookeeper 是一個分散式協調服務，主要解決分散式程式之間的同步的問題。 zookeeper 的結構類似的檔案目錄，多執行緒向 zookeeper 建立一個子目錄 (節點) 只會有一個創建成功，利用此特點可以實現分散式鎖，誰創建該結點成功誰就獲得鎖。</p>
<h1 id="redisson實現分布式鎖"><a class="markdownIt-Anchor" href="#redisson實現分布式鎖">#</a> Redisson 實現分布式鎖</h1>
<h2 id="什么是redisson"><a class="markdownIt-Anchor" href="#什么是redisson">#</a> 什么是 Redisson</h2>
<p>查閱 文檔<span class="exturl" data-url="aHR0cDovL3d3dy5yZWRpcy5jbi9jb21tYW5kcy9zZXQuaHRtbA=="> http://www.redis.cn/commands/set.html</span></p>
<p>我們選用 Java 的實作方案 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JlZGlzc29uL3JlZGlzc29u">https://github.com/redisson/redisson</span></p>
<p>Redisson 的文件網址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JlZGlzc29uL3JlZGlzc29uL3dpa2kvVGFibGUtb2YtQ29udGVudA==">https://github.com/redisson/redisson/wiki/Table-of-Content</span></p>
<p>Redisson 底層採用的是 Netty 框架。 支援 Redis 2.8 以上版本，支援 Java1.6 + 以上版本。 Redisson 是一個在 Redis 的基礎上實現的 Java 駐記憶體資料網格（In-Memory Data Grid）。 它不僅提供了一系列的分散式的 Java 常用對象，還提供了許多分散式服務。</p>
<blockquote><p>使用 Redisson 可以非常方便將 Java 本地記憶體中的常用資料結構的物件移到分散式緩存 redis 中。<br>
也可以將常用的並發程式設計工具如：AtomicLong、CountDownLatch、Semaphore 等支援分散式。<br>
使用 RScheduledExecutorService 實現分散式調度服務。<br>
支援資料分片，將資料分片儲存到不同的 redis 實例中。<br>
支援分散式鎖，基於 Java 的 Lock 介面實現分散式鎖，方便開發。<br>
下邊使用 Redisson 將 Queue 隊列的資料存入 Redis，實作一個排隊及出隊的介面。</p>
</blockquote>
<img data-src="/John/img/java/redis/9.png" class="abc">
<p>添加 redisson 的依赖</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt; </span><br><span class="line">    &lt;groupId&gt;org.redisson&lt;/groupId&gt; </span><br><span class="line">    &lt;artifactId&gt;redisson-spring-boot-starter&lt;/artifactId&gt; </span><br><span class="line">    &lt;version&gt;<span class="number">3.11</span><span class="number">.2</span>&lt;/version&gt; </span><br><span class="line">&lt;/dependency&gt; </span><br></pre></td></tr></table></figure>
<p>从课程资料目录拷贝 singleServerConfig.yaml 到 config 工程下</p>
<p>在 redis 配置文件中添加：</p>
<figure class="highlight yaml"><figcaption><span>YAML</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">redis:</span> </span><br><span class="line">    <span class="attr">redisson:</span> </span><br><span class="line">      <span class="comment">#配置文件目录 </span></span><br><span class="line">      <span class="attr">config:</span> <span class="string">classpath:singleServerConfig.yaml</span> </span><br><span class="line">      <span class="comment">#config: classpath:clusterServersConfig.yaml </span></span><br></pre></td></tr></table></figure>
<p>redis 叢集配置 clusterServersConfig.yaml.</p>
<p>Redisson 相比 set nx 實作分散式鎖要簡單的多，工作原理如下：</p>
<img data-src="/John/img/java/redis/10.png" class="abc">
<p>1️⃣加鎖機制:</p>
<p>執行緒去取得鎖，取得成功：執行 lua 腳本，儲存資料到 redis 資料庫。</p>
<p>執行緒去取得鎖，取得失敗：一直透過 while 循環嘗試取得鎖，取得成功後，執行 lua 腳本，儲存資料到 redis</p>
<p>2️⃣WatchDog 自動延期看門狗機制:</p>
<p>第一種情況：在一個分散式環境下，假如一個線程獲得鎖後，突然伺服器宕機了，那麼這個時候在一定時間後這個鎖會自動釋放，你也可以設定鎖的有效時間 (當不設置 預設 30 秒時），這樣的目的主要是防止死鎖的發生</p>
<p>第二種情況：線程 A 業務還沒執行完，時間就過了，線程 A 還想持有鎖的話，就會啟動一個 watch dog 後台線程，不斷的延長鎖 key 的生存時間。</p>
<p>3️⃣lua 腳本 - 保證原子性操作:</p>
<p>主要是如果你的業務邏輯複雜的話，透過封裝在 lua 腳本中發送給 redis，而且 redis 是單線程的，這樣就保證這段複雜業務邏輯執行的原子性</p>
<p>具體使用 RLock 操作分佈鎖，RLock 繼承 JDK 的 Lock 接口，所以他有 Lock 接口的所有特性，比如 lock、unlock、trylock 等特性，同時它還有很多新特性：強制鎖釋放，帶有效期的鎖，。</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RLock</span> &#123; </span><br><span class="line">     </span><br><span class="line">   <span class="comment">//----------------------Lock接口方法----------------------- </span></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 加锁 锁的有效期默认30秒 </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span>; </span><br><span class="line">     </span><br><span class="line">     <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 加锁 可以手动设置锁的有效时间 </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> leaseTime 锁有效时间 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit      时间单位 小时、分、秒、毫秒等 </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">(<span class="type">long</span> leaseTime, TimeUnit unit)</span>; </span><br><span class="line">     </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * tryLock()方法是有返回值的，用来尝试获取锁， </span></span><br><span class="line"><span class="comment">     * 如果获取成功，则返回true，如果获取失败（即锁已被其他线程获取），则返回false . </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">()</span>; </span><br><span class="line">     </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * tryLock(long time, TimeUnit unit)方法和tryLock()方法是类似的， </span></span><br><span class="line"><span class="comment">     * 只不过区别在于这个方法在拿不到锁时会等待一定的时间， </span></span><br><span class="line"><span class="comment">     * 在时间期限之内如果还拿不到锁，就返回false。如果如果一开始拿到锁或者在等待期间内拿到了锁，则返回true。 </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 等待时间 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit 时间单位 小时、分、秒、毫秒等 </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException; </span><br><span class="line">     </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 比上面多一个参数，多添加一个锁的有效时间 </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> waitTime  等待时间 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> leaseTime 锁有效时间 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit      时间单位 小时、分、秒、毫秒等 </span></span><br><span class="line"><span class="comment">     * waitTime 大于 leaseTime </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> waitTime, <span class="type">long</span> leaseTime, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException; </span><br><span class="line">     </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 解锁 </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span>; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>lock()：</p>
<p>1️⃣此方法為加鎖，但是鎖的有效期限採用預設 30 秒</p>
<p>2️⃣如果主執行緒未釋放，且目前鎖定未呼叫 unlock 方法，則進入到 watchDog 機制</p>
<p>3️⃣如果主執行緒未釋放，且目前鎖定呼叫 unlock 方法，則直接釋放鎖定</p>
<h2 id="分布式鎖避免缓存擊穿"><a class="markdownIt-Anchor" href="#分布式鎖避免缓存擊穿">#</a> 分布式鎖避免缓存擊穿</h2>
<p>使用分布式鎖修改查詢課程資訊的介面。</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Redisson分布式锁 </span></span><br><span class="line"><span class="keyword">public</span>  CoursePublish <span class="title function_">getCoursePublishCache</span><span class="params">(Long courseId)</span>&#123; </span><br><span class="line">        <span class="comment">//查询缓存 </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> (String) redisTemplate.opsForValue().get(<span class="string">&quot;course:&quot;</span> + courseId); </span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isNotEmpty(jsonString))&#123; </span><br><span class="line">            <span class="keyword">if</span>(jsonString.equals(<span class="string">&quot;null&quot;</span>))&#123; </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>; </span><br><span class="line">            &#125; </span><br><span class="line">            <span class="type">CoursePublish</span> <span class="variable">coursePublish</span> <span class="operator">=</span> JSON.parseObject(jsonString, CoursePublish.class); </span><br><span class="line">            <span class="keyword">return</span> coursePublish; </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">            <span class="comment">//每门课程设置一个锁 </span></span><br><span class="line">            <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClient.getLock(<span class="string">&quot;coursequerylock:&quot;</span>+courseId); </span><br><span class="line">            <span class="comment">//获取锁 </span></span><br><span class="line">            lock.lock(); </span><br><span class="line">            <span class="keyword">try</span> &#123; </span><br><span class="line">                jsonString = (String) redisTemplate.opsForValue().get(<span class="string">&quot;course:&quot;</span> + courseId); </span><br><span class="line">                <span class="keyword">if</span>(StringUtils.isNotEmpty(jsonString))&#123; </span><br><span class="line">                    <span class="type">CoursePublish</span> <span class="variable">coursePublish</span> <span class="operator">=</span> JSON.parseObject(jsonString, CoursePublish.class); </span><br><span class="line">                    <span class="keyword">return</span> coursePublish; </span><br><span class="line">                &#125; </span><br><span class="line">                System.out.println(<span class="string">&quot;=========从数据库查询==========&quot;</span>); </span><br><span class="line">                <span class="comment">//从数据库查询 </span></span><br><span class="line">                <span class="type">CoursePublish</span> <span class="variable">coursePublish</span> <span class="operator">=</span> getCoursePublish(courseId); </span><br><span class="line">                redisTemplate.opsForValue().set(<span class="string">&quot;course:&quot;</span> + courseId, JSON.toJSONString(coursePublish),<span class="number">1</span>,TimeUnit.DAYS); </span><br><span class="line">                <span class="keyword">return</span> coursePublish; </span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123; </span><br><span class="line">                <span class="comment">//释放锁 </span></span><br><span class="line">                lock.unlock(); </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>分布式鎖避免缓存擊穿流程:<br>
1️⃣注入 RedissonClient<br>
2️⃣生成以課程 ID 命名的鎖<br>
3️⃣獲得鎖<br>
4️⃣如果主線程未執行完，但已超過期時效，會進入 WatchDog 機制，再一次計算過期時間<br>
5️⃣主線程執行完<br>
6️⃣釋放鎖</p>
<img data-src="https://usagif.com/wp-content/uploads/gifs/thanks-for-watching-9.gif" class="abc" width="600" height="350"><div class="tags"><a href="/John/tags/Radis/" rel="tag"><i class="ic i-tag"></i>Radis</a></div></div><footer><div class="meta"><span class="item"><span class="icon"><i class="ic i-calendar-check"></i></span><span class="text">更新於</span><time title="修改時間：2023-11-07 23:00:04" itemprop="dateModified" datetime="2023-11-07T23:00:04+08:00">2023-11-07</time></span></div><div id="copyright"><ul><li class="author"><strong>作者：</strong>John<i class="ic i-at"><em>@</em></i>一切都是過程</li><li class="link"><strong>文章連結：</strong><a href="https://superrjohn.github.io/John/2023/10/26/java/radis/radis" title="Redis 緩存優化">https://superrjohn.github.io/John/2023/10/26/java/radis/radis</a></li><li class="license"><strong>版權聲明：</strong>本網誌所有文章除特別聲明外，均採用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" rel="noopener" target="_blank"><i class="ic i-creative-commons"><em>(CC)</em></i>BY-NC-SA</a> 許可協議。轉載請註明出處！</li></ul></div></footer></article></div><div class="post-nav"><div class="item left"><a href="/John/2023/10/22/hexo/Hexo" rel="prev" itemprop="url" data-background-image="https:&#x2F;&#x2F;a-static.besthdwallpaper.com&#x2F;moonlit-night-with-loneliness-wallpaper-1440x1080-121512_22.jpg" title="Hexo快速部署!"><span class="type">上一篇</span><span class="category"><i class="ic i-flag"></i>hexo</span><h3>Hexo快速部署!</h3></a></div><div class="item right"><a href="/John/2023/10/26/java/rabbitmq/rabbitmq" rel="next" itemprop="url" data-background-image="https:&#x2F;&#x2F;p6-pc-sign.douyinpic.com&#x2F;tos-cn-i-0813c001&#x2F;eec39780f21e41dfab53faf56087998c~tplv-dy-aweme-images:q75.webp?biz_tag&#x3D;aweme_images&amp;from&#x3D;3213915784&amp;s&#x3D;PackSourceEnum_SEARCH&amp;sc&#x3D;image&amp;se&#x3D;false&amp;x-expires&#x3D;1701637200&amp;x-signature&#x3D;%2B9aoV4ETZ5aH35EYkaI9t7GP5Fw%3D" title="Hello RabbitMq!"><span class="type">下一篇</span><span class="category"><i class="ic i-flag"></i>中間件</span><h3>Hello RabbitMq!</h3></a></div></div><div class="wrap" id="wcomments"></div><script type="module" data-pjax="data-pjax">import { init } from 'https://unpkg.com/@waline/client@v2/dist/waline.mjs';

setTimeout(function () {
    init({
        el: '#wcomments',
        serverURL: 'https://superr.zeabur.app',
        lang: 'zh-CN',
        locale: {},
        emoji: ["https://unpkg.com/@waline/emojis@1.0.1/weibo","https://unpkg.com/@waline/emojis@1.0.1/alus","https://unpkg.com/@waline/emojis@1.0.1/bilibili","https://unpkg.com/@waline/emojis@1.0.1/qq","https://unpkg.com/@waline/emojis@1.0.1/tieba","https://unpkg.com/@waline/emojis@1.0.1/tw-emoji"],
        meta: ["nick","mail","link"],
        requiredMeta: ["nick","mail"],
        wordLimit: 0,
        pageSize: 10,
        pageview: false,
        path: window.location.pathname,
        dark: 'html[data-theme="dark"]'
    });
}, 1000)</script></div><div id="sidebar"><div class="inner"><div class="panels"><div class="inner"><div class="contents panel pjax" data-title="文章目錄"><ol class="toc"><li class="toc-item toc-level-1"><a class="toc-link" href="#%E7%B7%A9%E5%AD%98%E5%84%AA%E5%8C%96"><span class="toc-number">1.</span> <span class="toc-text"> 緩存優化</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#redis%E7%B7%A9%E5%AD%98"><span class="toc-number">1.1.</span> <span class="toc-text"> redis 緩存</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E7%B7%A9%E5%AD%98%E7%A9%BF%E9%80%8F%E5%95%8F%E9%A1%8C"><span class="toc-number">2.</span> <span class="toc-text"> 緩存穿透問題</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E4%BB%80%E9%BA%BC%E6%98%AF%E7%B7%A9%E5%AD%98%E7%A9%BF%E9%80%8F"><span class="toc-number">2.1.</span> <span class="toc-text"> 什麼是緩存穿透</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E8%A7%A3%E6%B1%BA%E7%B7%A9%E5%AD%98%E7%A9%BF%E9%80%8F"><span class="toc-number">2.2.</span> <span class="toc-text"> 解決緩存穿透</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E7%B7%A9%E5%AD%98%E9%9B%AA%E5%B4%A9"><span class="toc-number">3.</span> <span class="toc-text"> 緩存雪崩</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E4%BB%80%E9%BA%BC%E6%98%AF%E7%B7%A9%E5%AD%98%E9%9B%AA%E5%B4%A9"><span class="toc-number">3.1.</span> <span class="toc-text"> 什麼是緩存雪崩</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E8%A7%A3%E6%B1%BA%E7%B7%A9%E5%AD%98%E9%9B%AA%E5%B4%A9"><span class="toc-number">3.2.</span> <span class="toc-text"> 解決緩存雪崩</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E7%B7%A9%E5%AD%98%E6%93%8A%E7%A9%BF"><span class="toc-number">4.</span> <span class="toc-text"> 緩存擊穿</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E4%BB%80%E9%BA%BC%E6%98%AF%E7%B7%A9%E5%AD%98%E6%93%8A%E7%A9%BF"><span class="toc-number">4.1.</span> <span class="toc-text"> 什麼是緩存擊穿</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E8%A7%A3%E5%86%B3%E7%B7%A9%E5%AD%98%E6%93%8A%E7%A9%BF"><span class="toc-number">4.2.</span> <span class="toc-text"> 解决緩存擊穿</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E5%88%86%E5%B8%83%E5%BC%8F%E9%8E%96"><span class="toc-number">5.</span> <span class="toc-text"> 分布式鎖</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E6%9C%AC%E5%9C%B0%E9%8E%96%E7%9A%84%E5%95%8F%E9%A1%8C"><span class="toc-number">5.1.</span> <span class="toc-text"> 本地鎖的問題</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E4%BB%80%E4%B9%88%E6%98%AF%E5%88%86%E5%B8%83%E9%8E%96"><span class="toc-number">5.2.</span> <span class="toc-text"> 什么是分布鎖</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%88%86%E5%B8%83%E5%BC%8F%E9%8E%96%E7%9A%84%E5%AF%A6%E7%8F%BE%E6%96%B9%E6%A1%88"><span class="toc-number">5.3.</span> <span class="toc-text"> 分布式鎖的實現方案</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#redisson%E5%AF%A6%E7%8F%BE%E5%88%86%E5%B8%83%E5%BC%8F%E9%8E%96"><span class="toc-number">6.</span> <span class="toc-text"> Redisson 實現分布式鎖</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E4%BB%80%E4%B9%88%E6%98%AFredisson"><span class="toc-number">6.1.</span> <span class="toc-text"> 什么是 Redisson</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%88%86%E5%B8%83%E5%BC%8F%E9%8E%96%E9%81%BF%E5%85%8D%E7%BC%93%E5%AD%98%E6%93%8A%E7%A9%BF"><span class="toc-number">6.2.</span> <span class="toc-text"> 分布式鎖避免缓存擊穿</span></a></li></ol></li></ol></div><div class="related panel pjax" data-title="系列文章"><ul><li  class="active"><a href="/John/2023/10/26/java/radis/radis" rel="bookmark" title="Redis 緩存優化">Redis 緩存優化</a></li><li ><a href="/John/2023/10/26/java/rabbitmq/rabbitmq" rel="bookmark" title="Hello RabbitMq!">Hello RabbitMq!</a></li><li ><a href="/John/2023/11/07/java/radis/redis_interview" rel="bookmark" title="Redis面試題整理">Redis面試題整理</a></li></ul></div><div class="overview panel" data-title="本站概要"><div class="author" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><img class="image" itemprop="image" alt="John" data-src="/John/assets/404.png"/><p class="name" itemprop="name">John</p><div class="description" itemprop="description"></div></div><nav class="state"><div class="item posts"><a href="/John/archives/"><span class="count">8</span><span class="name">文章</span></a></div><div class="item categories"><a href="/John/categories/"><span class="count">6</span><span class="name">分類</span></a></div><div class="item tags"><a href="/John/tags/"><span class="count">9</span><span class="name">標籤</span></a></div></nav><div class="social"><a href="https://github.com/superrjohn" class="item github" rel="noopener" title="https:&#x2F;&#x2F;github.com&#x2F;superrjohn" target="_blank"><i class="ic i-github"></i></a><a href="https://music.163.com/#/user/home?id=8923804515" class="item music" rel="noopener" title="https:&#x2F;&#x2F;music.163.com&#x2F;#&#x2F;user&#x2F;home?id&#x3D;8923804515" target="_blank"><i class="ic i-cloud-music"></i></a><a href="https://www.youtube.com/@John-ql5uv" class="item youtube" rel="noopener" title="https:&#x2F;&#x2F;www.youtube.com&#x2F;@John-ql5uv" target="_blank"><i class="ic i-youtube"></i></a></div><div class="menu"><li class="item"><a href="/John/" rel="section"><i class="ic i-home"></i>首頁</a></li><li class="item dropdown"><a href="javascript:void(0);"><i class="ic i-user"></i>關於</a><ul class="submenu"><li class="item"><a href="/John/about/" rel="section"><i class="ic i-user"></i>關於本站</a></li></ul></li><li class="item dropdown"><a href="javascript:void(0);"><i class="ic i-feather"></i>文章</a><ul class="submenu"><li class="item"><a href="/John/archives/" rel="section"><i class="ic i-list-alt"></i>歸檔</a></li><li class="item"><a href="/John/categories/" rel="section"><i class="ic i-th"></i>分類</a></li><li class="item"><a href="/John/tags/" rel="section"><i class="ic i-tags"></i>標籤</a></li></ul></li></div></div></div></div><ul id="quick"><li class="prev pjax"><a href="/John/2023/10/26/java/rabbitmq/rabbitmq" rel="prev" title="上一篇"><i class="ic i-chevron-left"></i></a></li><li class="up"><i class="ic i-arrow-up"></i></li><li class="down"><i class="ic i-arrow-down"></i></li><li class="next pjax"><a href="/John/2023/10/22/hexo/Hexo" rel="next" title="下一篇"><i class="ic i-chevron-right"></i></a></li><li class="percent"></li></ul></div></div><div class="dimmer"></div></div></main><footer id="footer"><div class="inner"><div class="widgets"><div class="rpost pjax"><h2>隨機文章</h2><ul><li class="item"><div class="breadcrumb"><a href="/John/categories/java/" title="分類於java">java</a><i class="ic i-angle-right"></i><a href="/John/categories/java/radis-rabbitmq/" title="分類於中間件">中間件</a></div><span><a href="/John/2023/10/26/java/radis/radis">Redis 緩存優化</a></span></li><li class="item"><div class="breadcrumb"><a href="/John/categories/java/" title="分類於java">java</a><i class="ic i-angle-right"></i><a href="/John/categories/java/radis-rabbitmq/" title="分類於中間件">中間件</a></div><span><a href="/John/2023/11/07/java/radis/redis_interview">Redis面試題整理</a></span></li><li class="item"><div class="breadcrumb"><a href="/John/categories/java/" title="分類於java">java</a><i class="ic i-angle-right"></i><a href="/John/categories/java/pay/" title="分類於支付">支付</a></div><span><a href="/John/2023/11/08/java/pay/alipay">整合支付寶</a></span></li><li class="item"><div class="breadcrumb"><a href="/John/categories/java/" title="分類於java">java</a><i class="ic i-angle-right"></i><a href="/John/categories/java/springMVC/" title="分類於springMVC">springMVC</a></div><span><a href="/John/2023/10/27/java/springMVC/UserBook-Web">手寫springMVC!</a></span></li><li class="item"><div class="breadcrumb"><a href="/John/categories/hexo/" title="分類於hexo">hexo</a></div><span><a href="/John/2023/10/22/hexo/Hexo">Hexo快速部署!</a></span></li><li class="item"><div class="breadcrumb"><a href="/John/categories/java/" title="分類於java">java</a><i class="ic i-angle-right"></i><a href="/John/categories/java/SpringSecurity/" title="分類於SpringSecurity">SpringSecurity</a></div><span><a href="/John/2023/10/30/java/SpringSecurity/SpringSecurity">SpringSecurity 認證授權</a></span></li><li class="item"><div class="breadcrumb"><a href="/John/categories/java/" title="分類於java">java</a><i class="ic i-angle-right"></i><a href="/John/categories/java/SpringSecurity/" title="分類於SpringSecurity">SpringSecurity</a></div><span><a href="/John/2023/11/03/java/SpringSecurity/WeChat_login">SpringSecurity 微信登錄</a></span></li><li class="item"><div class="breadcrumb"><a href="/John/categories/java/" title="分類於java">java</a><i class="ic i-angle-right"></i><a href="/John/categories/java/radis-rabbitmq/" title="分類於中間件">中間件</a></div><span><a href="/John/2023/10/26/java/rabbitmq/rabbitmq">Hello RabbitMq!</a></span></li></ul></div><div class="rpost pjax"><h2>最新評論</h2><ul class="leancloud-recent-comment" id="new-comment"><li class="item" v-for="com in coms"><a v-bind:href="root + com.href" data-pjax-state="data-pjax-state"><span class="breadcrumb">{{com.nick}} @ {{com.time}}</span><span>{{com.text}}<br/></span></a></li></ul></div></div><div class="status"><div class="copyright">&copy; 2022 -<span itemprop="copyrightYear">2023</span><span class="with-love"><i class="ic i-sakura rotate"></i></span><span class="author" itemprop="copyrightHolder">John @ john's blog</span></div><div class="count"><span class="post-meta-item-icon"><i class="ic i-chart-area"></i></span><span title="總字數">116k 字</span><span class="post-meta-divider">|</span><span class="post-meta-item-icon"><i class="ic i-coffee"></i></span><span title="所需總閱讀時間">1:45</span></div><div class="powered-by">基於 <a href="https://hexo.io/" rel="noopener" target="_blank">Hexo</a> & Theme.<a href="https://github.com/theme-shoka-x/hexo-theme-shokaX/" rel="noopener" target="_blank">ShokaX</a></div></div></div></footer></div><script data-config type="text/javascript">var LOCAL = {
        path: `2023/10/26/java/radis/radis`,
        favicon: {
        show: `（●´3｀●）復活成功`,
        hide: `(´Д｀)瀏覽器崩潰啦`
    },
    search: {
        placeholder: "文章搜尋",
        empty: "關於 「 ${query} 」 ，什麼也沒搜到",
        stats: "${time} ms 內找到 ${hits} 條結果"
    },
    valine: true,
    chart: false,
    copy_tex: false,
    katex: false,
    mermaid: false,
    audio: undefined,
    fancybox: true,
    nocopy: false,
    outime: true,
    template: `<div class="note warning"><p><span class="label warning">文章時效性提示</span><br>這是一篇發佈於 {{publish}} 天前，最後一次更新在 {{updated}} 天前的文章，部分信息可能已經發生改變，請注意甄別。</p></div>`,
    quiz: {
        choice: `單選題`,
        multiple: `多選題`,
        true_false: `判斷題`,
        essay: `問答題`,
        gap_fill: `填空題`,
        mistake: `錯題備註`
    },
    ignores: [
        (uri) => uri.includes('#'),
        (uri) => new RegExp(LOCAL.path + '$').test(uri),
            []
    ]
};
</script><script src="https://polyfill.io/v3/polyfill.min.js?features=default,fetch"></script><script src="https://lf9-cdn-tos.bytecdntp.com/cdn/expire-6-M/pace/1.0.2/pace.min.js"></script><script src="https://lf9-cdn-tos.bytecdntp.com/cdn/expire-6-M/algoliasearch/4.12.1/algoliasearch-lite.umd.min.js"></script><script src="https://lf9-cdn-tos.bytecdntp.com/cdn/expire-6-M/instantsearch.js/4.39.0/instantsearch.production.min.js"></script><script src="https://lf9-cdn-tos.bytecdntp.com/cdn/expire-6-M/quicklink/2.2.0/quicklink.umd.min.js"></script><script src="https://lf9-cdn-tos.bytecdntp.com/cdn/expire-6-M/??jquery/3.5.1/jquery.min.js,fancybox/3.5.7/jquery.fancybox.min.js,justifiedGallery/3.8.1/js/jquery.justifiedGallery.min.js" async></script><script src="https://lf9-cdn-tos.bytecdntp.com/cdn/expire-6-M/KaTeX/0.15.2/contrib/copy-tex.min.js" async></script><script src="/John/js/app.js?v=0.3.6"></script>
    <script type="module" data-pjax>
        let items = []
        import { RecentComments } from 'https://unpkg.com/@waline/client@v2/dist/waline.mjs'
        RecentComments({
          serverURL: 'https://superr.zeabur.app',
          count: 10,
        }).then(({ comments }) => {
          comments.forEach(function (item) {
              let cText = (item.orig.length > 50) ? item.orig.substring(0,50)+'...' : item.orig
              item.url = item.url !== '/' ?  '/' + item.url : item.url;
              const siteLink = item.url + "#" + item.objectId
              items.push({
                  href: siteLink,
                  nick: item.nick,
                  time: item.insertedAt.split('T').shift(),
                  text: cText
              })
          })
          Vue.createApp({
            data() {
                return {
                    coms: items,
                    root: '/John'
                }
            }
          }).mount('#new-comment')
        }).catch(function (err) {
          console.error(err)
        })
    </script>
    </body></html>