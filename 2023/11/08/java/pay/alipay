<!DOCTYPE html><html lang="zh-TW"><head><meta charset="UTF-8"/><meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=2"/><meta name="theme-color" content="#222"/><meta http-equiv="X-UA-COMPATIBLE" content="IE=edge,chrome=1"/><meta name="renderer" content="webkit"/><link rel="icon" type="image/ico" sizes="32x32" href="/John/assets/favicon.ico"/><link rel="apple-touch-icon" sizes="180x180" href="/John/assets/apple-touch-icon.png"/><link rel="alternate" href="/John/rss.xml" title="一切都是過程" type="application/rss+xml"><link rel="alternate" href="/John/atom.xml" title="一切都是過程" type="application/atom+xml"><link rel="alternate" type="application/json" title="一切都是過程" href="https://superrjohn.github.io/John/feed.json"/><link rel="preconnect" href="https://lf9-cdn-tos.bytecdntp.com"/><link rel="dns-prefetch" href="https://cdn.jsdelivr.net"/><link rel="dns-prefetch" href="https://unpkg.com"/><link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Mulish:300,300italic,400,400italic,700,700italic%7CFredericka%20the%20Great:300,300italic,400,400italic,700,700italic%7CNoto%20Serif%20JP:300,300italic,400,400italic,700,700italic%7CNoto%20Serif%20SC:300,300italic,400,400italic,700,700italic%7CInconsolata:300,300italic,400,400italic,700,700italic&display=swap&subset=latin,latin-ext"><link rel="stylesheet" href="/John/css/app.css?v=0.3.6"><script src="https://cdn.staticfile.org/vue/3.2.45/vue.global.prod.js"></script><link rel="stylesheet" href="https://unpkg.com/@waline/client@v2/dist/waline.css"/><meta name="keywords" content="支付"/><link rel="canonical" href="https://superrjohn.github.io/John/2023/11/08/java/pay/alipay"><title>整合支付寶</title><meta name="generator" content="Hexo 6.3.0"></head><body itemscope itemtype="http://schema.org/WebPage"><div id="loading"><div class="cat"><div class="body"></div><div class="head"><div class="face"></div></div><div class="foot"><div class="tummy-end"></div><div class="bottom"></div><div class="legs left"></div><div class="legs right"></div></div><div class="paw"><div class="hands left"></div><div class="hands right"></div></div></div></div><div id="container"><header id="header" itemscope itemtype="http://schema.org/WPHeader"><div class="inner"><div id="brand"><div class="pjax"><h1 itemprop="name headline">整合支付寶</h1><div class="meta"><span class="item" title="創建時間：2023-11-08 17:27:06"><span class="icon"><i class="ic i-calendar"></i></span><span class="text">發表於</span><time itemprop="dateCreated datePublished" datetime="2023-11-08T17:27:06+08:00">2023-11-08</time></span><span class="item" title="文章字數"><span class="icon"><i class="ic i-pen"></i></span><span class="text">文章字數</span><span>42k</span><span class="text">字</span></span><span class="item" title="所需閱讀時間"><span class="icon"><i class="ic i-clock"></i></span><span class="text">所需閱讀時間</span><span>38 分鐘</span></span></div></div></div><nav id="nav"><div class="inner"><div class="toggle"><div class="lines" aria-label="切換導航欄"><span class="line"></span><span class="line"></span><span class="line"></span></div></div><ul class="menu"><li class="item title"><a href="/John/" rel="start">john's blog</a></li></ul><ul class="right" id="rightNav"><li class="item theme" @click="changeThemeByBtn"><i class="ic" :class="{'i-sun': !themeStatus,'i-moon': themeStatus}"></i></li><li class="item search"><i class="ic i-search"></i></li></ul></div></nav></div><div class="pjax" id="imgs"><img src="https://e1.pxfuel.com/desktop-wallpaper/629/30/desktop-wallpaper-cyberpunk-2077-1920x1080-cyberpunk-2077-pc.jpg"></div></header><div id="waves"><svg class="waves" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 24 150 28" preserveAspectRatio="none" shape-rendering="auto"><defs><path id="gentle-wave" d="M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z"></path></defs><g class="parallax"><use xlink:href="#gentle-wave" x="48" y="0"></use><use xlink:href="#gentle-wave" x="48" y="3"></use><use xlink:href="#gentle-wave" x="48" y="5"></use><use xlink:href="#gentle-wave" x="48" y="7"></use></g></svg></div><main><div class="inner"><div class="pjax" id="main"><div class="article wrap"><div class="breadcrumb" itemListElement itemscope itemtype="https://schema.org/BreadcrumbList"><i class="ic i-home"></i><span><a href="/John/">首頁</a></span><i class="ic i-angle-right"></i><span itemprop="itemListElement" itemscope="itemscope" itemtype="https://schema.org/ListItem"><a href="/John/categories/java/" itemprop="item" rel="index" title="分類於java"><span itemprop="name">java<meta itemprop="position" content="0"/></span></a></span><i class="ic i-angle-right"></i><span class="current" itemprop="itemListElement" itemscope="itemscope" itemtype="https://schema.org/ListItem"><a href="/John/categories/java/pay/" itemprop="item" rel="index" title="分類於支付"><span itemprop="name">支付<meta itemprop="position" content="1"/></span></a></span></div><article class="post block" itemscope="itemscope" itemtype="http://schema.org/Article" lang="zh-TW"><link itemprop="mainEntityOfPage" href="https://superrjohn.github.io/John/2023/11/08/java/pay/alipay"/><span hidden="hidden" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="image" content="/John/assets/404.png"/><meta itemprop="name" content="John"/><meta itemprop="description" content=", "/></span><span hidden="hidden" itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="一切都是過程"/></span><div class="body md" itemprop="articleBody"><p>在此特别感謝黑馬程序員提供的課程: <span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWo4NDExTjdCbS8=">學成在線</span></p>
<p>前言<br>
於由實習項目快做完才做記錄，而且項目模塊較多，故挑部份來記錄<br>
<span class="rainbow">完整项目地址</span>：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N1cGVycmpvaG4vamF2YV93ZWI=">https://github.com/superrjohn/java_web</span></p>
<h1 id="整合第三方支付"><a class="markdownIt-Anchor" href="#整合第三方支付">#</a> 整合第三方支付</h1>
<h2 id="執行流程"><a class="markdownIt-Anchor" href="#執行流程">#</a> 執行流程</h2>
<p>用戶去學習收費課程時引導其去支付，如下圖：<br>
當使用者點擊微信支付或支付寶支付時執行流程如下：</p>
<img data-src="/John/img/java/pay/alipay/1.png" class="abc">
<p>1️⃣請求學習中心服務建立選課記錄<br>
2️⃣請求訂單服務建立商品訂單、產生支付二維碼。<br>
3️⃣用戶掃碼請求訂單支付服務，訂單支付服務請求第三方支付平台產生支付訂單。<br>
4️⃣前端喚起支付客戶端，使用者輸入密碼完成付款。<br>
5️⃣第三方支付平台支付完成發起支付通知。<br>
6️⃣訂單支付服務接收第三方支付通知結果。<br>
7️⃣用戶在前端查詢付款結果，請求訂單支付服務查詢支付結果。<br>
8️⃣訂單支付服務向學習中心服務通知支付結果。<br>
9️⃣學習中心服務收到付款結果，如果支付成功則更新選課記錄，並添加到我的課程表。</p>
<h2 id="通用訂單服務設計"><a class="markdownIt-Anchor" href="#通用訂單服務設計">#</a> 通用訂單服務設計</h2>
<p>在本項目中不僅選課需要下單，購買學習資料、老師一對一答疑等所有收費項目都需要支付下單<br>
所以本項目設計通用的訂單服務，通用的訂單服務承接各業務模組的收費支付需求，當用戶需要交費時，統一產生商品訂單進行支付<br>
所有收費業務最終轉換為訂單記錄，在訂單服務的商品訂單表中存儲<br>
以選課為例，選課記錄表的 ID 在商品訂單表的 out_business_id 字段</p>
<h1 id="準備開發環境"><a class="markdownIt-Anchor" href="#準備開發環境">#</a> 準備開發環境</h1>
<h2 id="支付寶開發環境"><a class="markdownIt-Anchor" href="#支付寶開發環境">#</a> 支付寶開發環境</h2>
<p>1️⃣配置沙箱環境<br>
沙箱環境是支付寶開放平台為開發者提供的與生產環境完全隔離的聯調測試環境，開發者在沙箱環境中完成的接口呼叫不會對生產環境中的資料造成任何影響。<br>
接入手機網站支付需具備以下條件：</p>
<p>🔴申請前必須擁有經過實名認證的支付寶帳戶；</p>
<p>🔴企業或個體工商戶可申請；</p>
<p>🔴需提供真實有效的營業執照，且支付寶帳戶名稱需與營業執照主體一致；</p>
<p>🔴網站能正常存取且頁面顯示完整，網站需要明確經營內容且有完整的商品資訊；</p>
<p>🔴網站必須透過 ICP 備案。 如為個體工商戶，網站備案主體需與支付寶帳戶主體名稱一致；</p>
<p>詳細參考：<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm9wZW4uYWxpcGF5LmNvbS8yMDM=">https://docs.open.alipay.com/203</span></p>
<p>本文檔使用支付寶沙箱進行開發測試，這裡主要介紹支付寶沙箱環境配置。</p>
<p>詳細參考：<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm9wZW4uYWxpcGF5LmNvbS8yMDAvMTA1MzExLw==">https://docs.open.alipay.com/200/105311/</span></p>
<p>2️⃣模擬器</p>
<p>下載模擬器：<span class="exturl" data-url="aHR0cDovL211bXUuMTYzLmNvbS8=">http://mumu.163.com/</span></p>
<p>安裝模擬器，安裝在沒有空格和中文的目錄。</p>
<p>安裝成功，啟動模擬器</p>
<p>3️⃣在模擬器中安裝沙箱版本的支付寶</p>
<p>使用沙箱環境的買家帳號登入沙箱版本的支付寶</p>
<img data-src="/John/img/java/pay/alipay/2.png" class="abc">
<h1 id="建立訂單服務"><a class="markdownIt-Anchor" href="#建立訂單服務">#</a> 建立訂單服務</h1>
<p>拷貝課程資料目錄下的訂單服務工程 xuecheng-plus-orders 到自己的工程目錄</p>
<p>然後在 nacos 中添加配置文件<br>
 orders-api-dev.yaml</p>
<figure class="highlight yaml"><figcaption><span>yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/orders</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">63030</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">cloud:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">override-none:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>orders-service-dev.yaml</p>
<figure class="highlight yaml"><figcaption><span>yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/xc_orders?serverTimezone=UTC&amp;userUnicode=true&amp;useSSL=false&amp;</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">xxl:</span></span><br><span class="line">  <span class="attr">job:</span></span><br><span class="line">    <span class="attr">admin:</span> </span><br><span class="line">      <span class="attr">addresses:</span> <span class="string">http://192.168.101.128:18088/xxl-job-admin/</span></span><br><span class="line">    <span class="attr">executor:</span></span><br><span class="line">      <span class="attr">appname:</span> <span class="string">payresultnotify-job</span></span><br><span class="line">      <span class="attr">address:</span> </span><br><span class="line">      <span class="attr">ip:</span> </span><br><span class="line">      <span class="attr">port:</span> <span class="number">8989</span></span><br><span class="line">      <span class="attr">logpath:</span> <span class="string">/data/applogs/xxl-job/jobhandler</span></span><br><span class="line">      <span class="attr">logretentiondays:</span> <span class="number">30</span></span><br><span class="line">    <span class="attr">accessToken:</span> <span class="string">default_token</span></span><br></pre></td></tr></table></figure>
<p>建立 xc_orders 資料庫，導入黑馬提供的 SQL 腳本</p>
<h1 id="支付接口測試"><a class="markdownIt-Anchor" href="#支付接口測試">#</a> 支付接口測試</h1>
<h2 id="閱讀接口定義"><a class="markdownIt-Anchor" href="#閱讀接口定義">#</a> 閱讀接口定義</h2>
<p>1. 手機網站支付接取流程詳細參考：<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm9wZW4uYWxpcGF5LmNvbS8yMDMvMTA1Mjg1Lw==">https://docs.open.alipay.com/203/105285/</span></p>
<p>1️⃣用戶在商家的 H5 網站下單付款後，商家系統依照手機網站支付接口 alipay.trade.wap.payAPI 的參數規格產生訂單數據</p>
<p>2️⃣前端頁面透過 Form 表單的形式請求到支付寶。 此時支付寶會自動將頁面跳到支付寶 H5 收銀台頁面，如果用戶手機上安裝了支付寶 APP，則會自動喚起支付寶 APP。</p>
<p>3️⃣輸入支付密碼完成付款。</p>
<p>4️⃣用戶在支付寶 APP 或 H5 收銀台完成付款後，會根據商家在手機網站支付 API 中傳入的前台回跳地址 return_url 自動跳轉回商家頁面，同時在 URL 請求中以 Query String 的形式附帶 支付結果參數，詳細回跳參數請見「手機網站支付接口 alipay.trade.wap.pay」前台回跳參數。</p>
<p>5️⃣支付寶也會根據原始支付 API 中傳入的非同步通知地址 notify_url，透過 POST 請求的形式將支付結果作為參數通知到商家系統，詳情請參閱支付結果非同步通知。</p>
<p>2、接口定義</p>
<p>文檔：<span class="exturl" data-url="aHR0cHM6Ly9vcGVuZG9jcy5hbGlwYXkuY29tL29wZW4vMjAzLzEwNzA5MA==">https://opendocs.alipay.com/open/203/107090</span></p>
<p>接口定義：外部商家要求支付寶建立訂單並支付</p>
<p>請求地址：開發中使用沙箱位址：<span class="exturl" data-url="aHR0cHM6Ly9vcGVuYXBpLmFsaXBheWRldi5jb20vZ2F0ZXdheS5kbw==">https://openapi.alipaydev.com/gateway.do</span></p>
<p>請求參數：詳細查閱<span class="exturl" data-url="aHR0cHM6Ly9vcGVuZG9jcy5hbGlwYXkuY29tL29wZW4vMjAzLzEwNzA5MA=="> https://opendocs.alipay.com/open/203/107090</span></p>
<p>一部分由 sdk 設置，一部分需要編寫程式時指定。</p>
<p>3. 示例代碼</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest httpRequest,</span></span><br><span class="line"><span class="params">                HttpServletResponse httpResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="type">AlipayClient</span> <span class="variable">alipayClient</span> <span class="operator">=</span> ... <span class="comment">//获得初始化的AlipayClient</span></span><br><span class="line">    <span class="type">AlipayTradeWapPayRequest</span> <span class="variable">alipayRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlipayTradeWapPayRequest</span>();<span class="comment">//创建API对应的request</span></span><br><span class="line">    alipayRequest.setReturnUrl(<span class="string">&quot;http://domain.com/CallBack/return_url.jsp&quot;</span>);</span><br><span class="line">    alipayRequest.setNotifyUrl(<span class="string">&quot;http://domain.com/CallBack/notify_url.jsp&quot;</span>);<span class="comment">//在公共参数中设置回跳和通知地址</span></span><br><span class="line">    alipayRequest.setBizContent(<span class="string">&quot;&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    \&quot;out_trade_no\&quot;:\&quot;20150320010101002\&quot;,&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    \&quot;total_amount\&quot;:88.88,&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    \&quot;subject\&quot;:\&quot;Iphone6 16G\&quot;,&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    \&quot;product_code\&quot;:\&quot;QUICK_WAP_WAY\&quot;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;  &#125;&quot;</span>);<span class="comment">//填充业务参数</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">form</span> <span class="operator">=</span> alipayClient.pageExecute(alipayRequest).getBody(); <span class="comment">//调用SDK生成表单</span></span><br><span class="line">    httpResponse.setContentType(<span class="string">&quot;text/html;charset=&quot;</span> + AlipayServiceEnvConstants.CHARSET);</span><br><span class="line">    httpResponse.getWriter().write(form);<span class="comment">//直接将完整的表单html输出到页面</span></span><br><span class="line">    httpResponse.getWriter().flush();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="下單執行流程"><a class="markdownIt-Anchor" href="#下單執行流程">#</a> 下單執行流程</h2>
<p>根據接口描述，支付寶下單接口的執行流程如下：</p>
<img data-src="/John/img/java/pay/alipay/3.png" class="abc">
<h2 id="編寫下單程式碼"><a class="markdownIt-Anchor" href="#編寫下單程式碼">#</a> 編寫下單程式碼</h2>
<p>根據接口流程，首先在訂單服務編寫測試類別請求支付寶下單的接口。</p>
<p>在訂單服務 api 工程添加依賴：</p>
<figure class="highlight xml"><figcaption><span>xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 支付宝SDK --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alipay.sdk<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>alipay-sdk-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.73.ALL<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- 支付宝SDK依赖的日志 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br></pre></td></tr></table></figure>
<p>拷貝 AlipayConfig.java 到訂單服務的 service 工程，其中請求網站地址為支付寶支付接口地址</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AlipayConfig</span> &#123;</span><br><span class="line">    <span class="comment">// 商户appid</span></span><br><span class="line"><span class="comment">//	public static String APPID = &quot;&quot;;</span></span><br><span class="line">    <span class="comment">// 私钥 pkcs8格式的</span></span><br><span class="line"><span class="comment">//	public static String RSA_PRIVATE_KEY = &quot;&quot;;</span></span><br><span class="line">    <span class="comment">// 服务器异步通知页面路径 需http://或者https://格式的完整路径，不能加?id=123这类自定义参数，必须外网可以正常访问</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">notify_url</span> <span class="operator">=</span> <span class="string">&quot;http://商户网关地址/alipay.trade.wap.pay-JAVA-UTF-8/notify_url.jsp&quot;</span>;</span><br><span class="line">    <span class="comment">// 页面跳转同步通知页面路径 需http://或者https://格式的完整路径，不能加?id=123这类自定义参数，必须外网可以正常访问 商户可以自定义同步跳转地址</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">return_url</span> <span class="operator">=</span> <span class="string">&quot;http://商户网关地址/alipay.trade.wap.pay-JAVA-UTF-8/return_url.jsp&quot;</span>;</span><br><span class="line">    <span class="comment">// 请求网关地址</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">URL</span> <span class="operator">=</span> <span class="string">&quot;https://openapi.alipaydev.com/gateway.do&quot;</span>;</span><br><span class="line">    <span class="comment">// 编码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">CHARSET</span> <span class="operator">=</span> <span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line">    <span class="comment">// 返回格式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">FORMAT</span> <span class="operator">=</span> <span class="string">&quot;json&quot;</span>;</span><br><span class="line">    <span class="comment">// 支付宝公钥</span></span><br><span class="line"><span class="comment">//	public static String ALIPAY_PUBLIC_KEY = &quot;&quot;;</span></span><br><span class="line">    <span class="comment">// 日志记录目录</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">log_path</span> <span class="operator">=</span> <span class="string">&quot;/log&quot;</span>;</span><br><span class="line">    <span class="comment">// RSA2</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">SIGNTYPE</span> <span class="operator">=</span> <span class="string">&quot;RSA2&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>掃碼支付其實就是請求 URL, 所以我們要寫一個 Controller, 我們要 new DefaultAlipayClient 類並修改參數</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PayTestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;pay.alipay.APP_ID&#125;&quot;)</span></span><br><span class="line">    String APP_ID;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;pay.alipay.APP_PRIVATE_KEY&#125;&quot;)</span></span><br><span class="line">    String APP_PRIVATE_KEY;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;pay.alipay.ALIPAY_PUBLIC_KEY&#125;&quot;)</span></span><br><span class="line">    String ALIPAY_PUBLIC_KEY;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/alipaytest&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest httpRequest,</span></span><br><span class="line"><span class="params">                    HttpServletResponse httpResponse)</span> <span class="keyword">throws</span> ServletException, IOException, AlipayApiException &#123;</span><br><span class="line">        <span class="type">AlipayClient</span> <span class="variable">alipayClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultAlipayClient</span>(AlipayConfig.URL, APP_ID, APP_PRIVATE_KEY, AlipayConfig.FORMAT, AlipayConfig.CHARSET, ALIPAY_PUBLIC_KEY,AlipayConfig.SIGNTYPE);</span><br><span class="line">        <span class="comment">//获得初始化的AlipayClient</span></span><br><span class="line">        <span class="type">AlipayTradeWapPayRequest</span> <span class="variable">alipayRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlipayTradeWapPayRequest</span>();<span class="comment">//创建API对应的request</span></span><br><span class="line"><span class="comment">//        alipayRequest.setReturnUrl(&quot;http://domain.com/CallBack/return_url.jsp&quot;);</span></span><br><span class="line"><span class="comment">//        alipayRequest.setNotifyUrl(&quot;http://domain.com/CallBack/notify_url.jsp&quot;);//在公共参数中设置回跳和通知地址</span></span><br><span class="line">        alipayRequest.setBizContent(<span class="string">&quot;&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;out_trade_no\&quot;:\&quot;202210100010101002\&quot;,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;total_amount\&quot;:100000,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;subject\&quot;:\&quot;Iphone6 16G\&quot;,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;product_code\&quot;:\&quot;QUICK_WAP_WAY\&quot;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &#125;&quot;</span>);<span class="comment">//填充业务参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">form</span> <span class="operator">=</span> alipayClient.pageExecute(alipayRequest).getBody(); <span class="comment">//调用SDK生成表单</span></span><br><span class="line">        httpResponse.setContentType(<span class="string">&quot;text/html;charset=&quot;</span> + AlipayConfig.CHARSET);</span><br><span class="line">        httpResponse.getWriter().write(form);<span class="comment">//直接将完整的表单html输出到页面</span></span><br><span class="line">        httpResponse.getWriter().flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 nacos 中的 orders-service-dev.yaml 中配置公钥和私钥，從你的沙箱環境帳號獲得</p>
<figure class="highlight yml"><figcaption><span>yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pay:</span></span><br><span class="line">  <span class="attr">alipay:</span></span><br><span class="line">    <span class="attr">APP_ID:</span> <span class="string">写你自己的AppID</span></span><br><span class="line">    <span class="attr">APP_PRIVATE_KEY:</span> <span class="string">写你自己的应用私钥</span></span><br><span class="line">    <span class="attr">ALIPAY_PUBLIC_KEY:</span> <span class="string">写你自己的支付宝公钥</span></span><br></pre></td></tr></table></figure>
<h2 id="產生二維碼"><a class="markdownIt-Anchor" href="#產生二維碼">#</a> 產生二維碼</h2>
<p>使用者在前端使用支付寶沙箱透過掃碼請求下單接口，我們需要產生訂單服務的下單接口的二維碼。</p>
<p>ZXing 是一個開源的類別庫，是用 Java 編寫的多格式的 1D / 2D 條碼圖像處理庫，使用 ZXing 可以產生、識別 QR Code（二維碼）。 常用的二維碼處理庫還有 zbar，近幾年不再更新程式碼，下邊介紹 ZXing 產生二維碼的方法。</p>
<p>1）在 base 工程 pom.xml 中加入依賴：</p>
<figure class="highlight xml"><figcaption><span>XML</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 二维码生成&amp;识别组件 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.zxing<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.zxing<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javase<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br></pre></td></tr></table></figure>
<p>2）產生二維碼方法</p>
<p>拷貝課程資料中 utils 下的 QRCodeUtil.java 到 base 工程 util 包下。</p>
<p>測試根據內容產生二維碼方法，在 QRCodeUtil 中加入 main 方法，當執行代碼時會生成 base64 串，將 base64 串複製到瀏覽器位址後將顯示一個二維碼，用戶用手機掃此二維碼將要求至<span class="exturl" data-url="aHR0cDovL3d3dy5pdGNhc3QuY24v"> http://www.itcast.cn/</span> , 如下:</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123; </span><br><span class="line">    <span class="type">QRCodeUtil</span> <span class="variable">qrCodeUtil</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QRCodeUtil</span>(); </span><br><span class="line">    System.out.println(qrCodeUtil.createQRCode(<span class="string">&quot;http://www.itcast.cn/&quot;</span>, <span class="number">200</span>, <span class="number">200</span>)); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h2 id="接口測試"><a class="markdownIt-Anchor" href="#接口測試">#</a> 接口測試</h2>
<p>修改我們之前的 main 方法，將 url 換成下單接口，注意這裡不要用 localhost，得用本機區域網路 ip, 現在用戶掃碼後會請求到我們寫的支付接口</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">QRCodeUtil</span> <span class="variable">qrCodeUtil</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QRCodeUtil</span>();</span><br><span class="line">    System.out.println(qrCodeUtil.createQRCode(<span class="string">&quot;http://192.168.101.1:63030/orders/alipaytest&quot;</span>, <span class="number">200</span>, <span class="number">200</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>運行 main 方法，得到二維碼後，開啟模擬器，在模擬器中開啟支付寶沙箱客戶端，並使用沙箱客戶端掃生成的二維碼，就會調用 SDK 生成表單，並喚醒支付寶的 JS 窗口</p>
<h1 id="支付結果查詢接口"><a class="markdownIt-Anchor" href="#支付結果查詢接口">#</a> 支付結果查詢接口</h1>
<p>支付完成可以呼叫第三方支付平台的付款結果查詢接口查詢支付結果，以下用測試類查詢</p>
<p>文件：<span class="exturl" data-url="aHR0cHM6Ly9vcGVuZG9jcy5hbGlwYXkuY29tL29wZW4vMDJpdmJ0">https://opendocs.alipay.com/open/02ivbt</span></p>
<p>剛才訂單付款成功，可以使用 out_trade_no 商品訂單號碼或支付寶的交易流水號 trade_no 去查詢付款結果。</p>
<p>out_trade_no 商品訂單號碼：是在下單要求時指定的商品訂單號碼。</p>
<p>支付寶的交易流水號 trade_no：是支付完成後支付寶通知付款結果時發送的 trade_no</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliPayTest</span> &#123; </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;pay.alipay.APP_ID&#125;&quot;)</span> </span><br><span class="line">    String APP_ID; </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;pay.alipay.APP_PRIVATE_KEY&#125;&quot;)</span> </span><br><span class="line">    String APP_PRIVATE_KEY; </span><br><span class="line">     </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;pay.alipay.ALIPAY_PUBLIC_KEY&#125;&quot;)</span> </span><br><span class="line">    String ALIPAY_PUBLIC_KEY; </span><br><span class="line"> </span><br><span class="line"><span class="meta">@Test</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryPayResult</span><span class="params">()</span> <span class="keyword">throws</span> AlipayApiException &#123; </span><br><span class="line">    <span class="type">AlipayClient</span> <span class="variable">alipayClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultAlipayClient</span>(AlipayConfig.URL, APP_ID, APP_PRIVATE_KEY, <span class="string">&quot;json&quot;</span>, AlipayConfig.CHARSET, ALIPAY_PUBLIC_KEY, AlipayConfig.SIGNTYPE); <span class="comment">//获得初始化的AlipayClient </span></span><br><span class="line">    <span class="type">AlipayTradeQueryRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlipayTradeQueryRequest</span>(); </span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">bizContent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>(); </span><br><span class="line">    bizContent.put(<span class="string">&quot;out_trade_no&quot;</span>, <span class="string">&quot;202210100010101002&quot;</span>); </span><br><span class="line">    <span class="comment">//bizContent.put(&quot;trade_no&quot;, &quot;2014112611001004680073956707&quot;); </span></span><br><span class="line">    request.setBizContent(bizContent.toString()); </span><br><span class="line">    <span class="type">AlipayTradeQueryResponse</span> <span class="variable">response</span> <span class="operator">=</span> alipayClient.execute(request); </span><br><span class="line">    <span class="keyword">if</span> (response.isSuccess()) &#123; </span><br><span class="line">        System.out.println(<span class="string">&quot;调用成功&quot;</span>); </span><br><span class="line">        <span class="type">String</span> <span class="variable">resultJson</span> <span class="operator">=</span> response.getBody(); </span><br><span class="line">        <span class="comment">//转map </span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">resultMap</span> <span class="operator">=</span> JSON.parseObject(resultJson, Map.class); </span><br><span class="line">        <span class="type">Map</span> <span class="variable">alipay_trade_query_response</span> <span class="operator">=</span> (Map) resultMap.get(<span class="string">&quot;alipay_trade_query_response&quot;</span>); </span><br><span class="line">        <span class="comment">//支付结果 </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">trade_status</span> <span class="operator">=</span> (String) alipay_trade_query_response.get(<span class="string">&quot;trade_status&quot;</span>); </span><br><span class="line">        System.out.println(trade_status); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        System.out.println(<span class="string">&quot;调用失败&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>響應回來重要的參數為:<br>
“out_trade_no” : “20220520010101026”,</p>
<p>“trade_no”:“2022100422001422760505740639”  ： 支付宝交易流水号</p>
<p>“total_amount” : “1.30”</p>
<p>“trade_status” : “TRADE_SUCCESS”：</p>
<h2 id="支付結果通知接口"><a class="markdownIt-Anchor" href="#支付結果通知接口">#</a> 支付結果通知接口</h2>
<p>準備環境<br>
對於手機網站支付產生的交易，支付寶會通知商家支付結果，有兩種通知方式，透過 return_url、notify_url 進行通知，使用 return_url 不能保證通知到位，推薦使用 notify_url 完成支付結構通知。</p>
<p>具體的使用方法是在呼叫下單接口的 API 中傳入的非同步通知位址 notify_url，透過 POST 請求的形式將支付結果作為參數通知到商家系統。 詳情可查看 支付寶非同步通知說明 。</p>
<p>文件：<span class="exturl" data-url="aHR0cHM6Ly9vcGVuZG9jcy5hbGlwYXkuY29tL29wZW4vMjAzLzEwNTI4Ng==">https://opendocs.alipay.com/open/203/105286</span></p>
<p>根據下單執行流程，訂單服務收到付款結果需要對內容進行驗簽，驗簽流程如下：</p>
<p>1️⃣在通知回傳參數清單中，除去 sign、sign_type 兩個參數外，凡是通知回傳回來的參數都是待驗簽的參數。 將剩餘參數進行 url_decode，然後進行字典排序，組成字串，得到待簽名字串； 生活號非同步通知組成的待驗簽串裡需要保留 sign_type 參數。</p>
<p>2️⃣將簽章參數（sign）使用 base64 解碼為字節碼字串；</p>
<p>3️⃣使用 RSA 的驗簽方法，透過簽章字串、簽章參數（經過 base64 解碼）及支付寶公鑰驗證簽章。</p>
<p>4️⃣驗證簽章正確後，必須再嚴格依照以下描述校驗通知資料的正確性。</p>
<p>在上述驗證通過後，商家必須根據支付寶不同類型的業務通知，正確的進行不同的業務處理，並且過濾重複的通知結果資料。</p>
<p>透過驗證 out_trade_no、total_amount、appid 參數的正確性來判斷通知請求的合法性。</p>
<h2 id="編寫測試程式碼"><a class="markdownIt-Anchor" href="#編寫測試程式碼">#</a> 編寫測試程式碼</h2>
<p>在下單請求時設定通知位址 request.setNotifyUrl (“商家自己的 notify_url 位址”);</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/alipaytest&quot;)</span> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">alipaytest</span><span class="params">(HttpServletRequest httpRequest, </span></span><br><span class="line"><span class="params">                           HttpServletResponse httpResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123; </span><br><span class="line">        <span class="comment">//构造sdk的客户端对象 </span></span><br><span class="line">        <span class="type">AlipayClient</span> <span class="variable">alipayClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultAlipayClient</span>(serverUrl, APP_ID, APP_PRIVATE_KEY, <span class="string">&quot;json&quot;</span>, CHARSET, ALIPAY_PUBLIC_KEY, sign_type); <span class="comment">//获得初始化的AlipayClient </span></span><br><span class="line">        <span class="type">AlipayTradeWapPayRequest</span> <span class="variable">alipayRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlipayTradeWapPayRequest</span>();<span class="comment">//创建API对应的request </span></span><br><span class="line"><span class="comment">//        alipayRequest.setReturnUrl(&quot;http://domain.com/CallBack/return_url.jsp&quot;); </span></span><br><span class="line">        alipayRequest.setNotifyUrl(<span class="string">&quot;http://tjxt-user-t.itheima.net/xuecheng/orders/paynotify&quot;</span>);<span class="comment">//在公共参数中设置回跳和通知地址 </span></span><br><span class="line">        ..... </span><br><span class="line">         </span><br></pre></td></tr></table></figure>
<p><span class="yellow">注意由於回呼位址必須外網可存取的位址，所以這裡需要內網穿透工具，可以用 NatApp 或者花生殼</span></p>
<p>編寫接收通知接口，接收參數並驗簽</p>
<p>參考課程資料下的 alipay.trade.wap.pay-java-utf-8\WebContent\notify_url.jsp, 程式碼如下：</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接收通知 </span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/paynotify&quot;)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paynotify</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span> <span class="keyword">throws</span> UnsupportedEncodingException, AlipayApiException &#123; </span><br><span class="line">    Map&lt;String,String&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String,String&gt;(); </span><br><span class="line">    <span class="type">Map</span> <span class="variable">requestParams</span> <span class="operator">=</span> request.getParameterMap(); </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">Iterator</span> <span class="variable">iter</span> <span class="operator">=</span> requestParams.keySet().iterator(); iter.hasNext();) &#123; </span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) iter.next(); </span><br><span class="line">        String[] values = (String[]) requestParams.get(name); </span><br><span class="line">        <span class="type">String</span> <span class="variable">valueStr</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>; </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; values.length; i++) &#123; </span><br><span class="line">            valueStr = (i == values.length - <span class="number">1</span>) ? valueStr + values[i] </span><br><span class="line">                    : valueStr + values[i] + <span class="string">&quot;,&quot;</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">//乱码解决，这段代码在出现乱码时使用。如果mysign和sign不相等也可以使用这段代码转化 </span></span><br><span class="line">        <span class="comment">//valueStr = new String(valueStr.getBytes(&quot;ISO-8859-1&quot;), &quot;gbk&quot;); </span></span><br><span class="line">        params.put(name, valueStr); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//获取支付宝的通知返回参数，可参考技术文档中页面跳转同步通知参数列表(以上仅供参考)// </span></span><br><span class="line">    <span class="comment">//计算得出通知验证结果 </span></span><br><span class="line">    <span class="comment">//boolean AlipaySignature.rsaCheckV1(Map&lt;String, String&gt; params, String publicKey, String charset, String sign_type) </span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">verify_result</span> <span class="operator">=</span> AlipaySignature.rsaCheckV1(params, ALIPAY_PUBLIC_KEY, AlipayConfig.CHARSET, <span class="string">&quot;RSA2&quot;</span>); </span><br><span class="line">    <span class="keyword">if</span>(verify_result) &#123;<span class="comment">//验证成功 </span></span><br><span class="line">        <span class="comment">////////////////////////////////////////////////////////////////////////////////////////// </span></span><br><span class="line">        <span class="comment">//请在这里加上商户的业务逻辑程序代码 </span></span><br><span class="line">         <span class="comment">//商户订单号 </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">out_trade_no</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(request.getParameter(<span class="string">&quot;out_trade_no&quot;</span>).getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>),<span class="string">&quot;UTF-8&quot;</span>); </span><br><span class="line">        <span class="comment">//支付宝交易号     </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">trade_no</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(request.getParameter(<span class="string">&quot;trade_no&quot;</span>).getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>),<span class="string">&quot;UTF-8&quot;</span>); </span><br><span class="line">        <span class="comment">//交易状态 </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">trade_status</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(request.getParameter(<span class="string">&quot;trade_status&quot;</span>).getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>),<span class="string">&quot;UTF-8&quot;</span>); </span><br><span class="line">        <span class="comment">//——请根据您的业务逻辑来编写程序（以下代码仅作参考）—— </span></span><br><span class="line">        <span class="keyword">if</span> (trade_status.equals(<span class="string">&quot;TRADE_FINISHED&quot;</span>)) &#123;<span class="comment">//交易结束 </span></span><br><span class="line">            <span class="comment">//判断该笔订单是否在商户网站中已经做过处理 </span></span><br><span class="line">            <span class="comment">//如果没有做过处理，根据订单号（out_trade_no）在商户网站的订单系统中查到该笔订单的详细，并执行商户的业务程序 </span></span><br><span class="line">            <span class="comment">//请务必判断请求时的total_fee、seller_id与通知时获取的total_fee、seller_id为一致的 </span></span><br><span class="line">            <span class="comment">//如果有做过处理，不执行商户的业务程序 </span></span><br><span class="line">            <span class="comment">//注意： </span></span><br><span class="line">            <span class="comment">//如果签约的是可退款协议，退款日期超过可退款期限后（如三个月可退款），支付宝系统发送该交易状态通知 </span></span><br><span class="line">            <span class="comment">//如果没有签约可退款协议，那么付款完成后，支付宝系统发送该交易状态通知。 </span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (trade_status.equals(<span class="string">&quot;TRADE_SUCCESS&quot;</span>)) &#123;<span class="comment">//交易成功 </span></span><br><span class="line">            System.out.println(trade_status); </span><br><span class="line">            <span class="comment">//判断该笔订单是否在商户网站中已经做过处理 </span></span><br><span class="line">            <span class="comment">//如果没有做过处理，根据订单号（out_trade_no）在商户网站的订单系统中查到该笔订单的详细，并执行商户的业务程序 </span></span><br><span class="line">            <span class="comment">//请务必判断请求时的total_fee、seller_id与通知时获取的total_fee、seller_id为一致的 </span></span><br><span class="line">            <span class="comment">//如果有做过处理，不执行商户的业务程序 </span></span><br><span class="line">            <span class="comment">//注意： </span></span><br><span class="line">            <span class="comment">//如果签约的是可退款协议，那么付款完成后，支付宝系统发送该交易状态通知。 </span></span><br><span class="line">        &#125; </span><br><span class="line">        response.getWriter().write(<span class="string">&quot;success&quot;</span>); </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">        response.getWriter().write(<span class="string">&quot;fail&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>通知接口測試</p>
<p>1️⃣重啟訂單服務，並在接收通知接口中打上斷點</p>
<p>2️⃣配置內部網路穿透的本地端口為訂單服務端口，啟動內部網路穿透客戶端。</p>
<p>3️⃣打開模擬器、支付寶沙箱，掃碼、付款。</p>
<p>4️⃣觀察接收訂單支付資料等是否正常。</p>
<p>這里成功進入到了通知接口</p>
<img data-src="/John/img/java/pay/alipay/4.png" class="abc">
<h1 id="生成支付二維碼"><a class="markdownIt-Anchor" href="#生成支付二維碼">#</a> 生成支付二維碼</h1>
<h2 id="執行流程-2"><a class="markdownIt-Anchor" href="#執行流程-2">#</a> 執行流程</h2>
<p>點選「支付寶支付」此時開啟支付二維碼，用戶掃碼支付。</p>
<img data-src="/John/img/java/pay/alipay/5.png" class="abc">
<p>執行流程：</p>
<p>1. 前端調用學習中心服務的新增選課接口。</p>
<p>2. 新增選課成功請求訂單服務產生支付二維碼接口。</p>
<p>3. 產生二維碼接口：建立商品訂單、產生支付交易記錄、產生二維碼。</p>
<p>4. 將二維碼返回前端，用戶掃碼。</p>
<p>使用者掃碼支付流程如下：</p>
<img data-src="/John/img/java/pay/alipay/6.png" class="abc">
<p>1. 用戶輸入支付密碼，付款成功。</p>
<p>2、接收第三方平台通知的付款結果。</p>
<p>3、根據支付結果更新支付交易記錄的支付狀態為支付成功。</p>
<h2 id="數據模型"><a class="markdownIt-Anchor" href="#數據模型">#</a> 數據模型</h2>
<p>訂單支付模式的核心由三張表組成：訂單表、訂單明細表、支付交易記錄表。</p>
<img data-src="/John/img/java/pay/alipay/7.png" class="abc">
<p>訂單號碼注意唯一性、安全性、盡量短等特點，生成方案常用的如下：</p>
<p>1. 時間戳 + 隨機數</p>
<p>年月日時分秒毫秒 + 隨機數</p>
<p>2、高並發場景</p>
<p>年月日時分秒毫秒 + 隨機數 + redis 自增序列</p>
<p>3. 訂單號碼中加上業務標識</p>
<p>訂單號碼加上業務識別方便客服，例如：第 10 位是業務類型，第 11 位是使用者類型等。</p>
<p>4、雪花演算法</p>
<p>雪花演算法是推特內部使用的分散式環境下的唯一 ID 生成演算法，它基於時間戳生成，保證有序遞增，加以入電腦硬體等元素，可以滿足高並發環境下 ID 不重複。<br>
本項目訂單編號產生採用雪花演算法。</p>
<p>本專案訂單號碼產生策略採用雪花演算法，導入黑馬提供的 IdWorkerUtils.java 到 base 工程的 utils 包下</p>
<h2 id="接口定義"><a class="markdownIt-Anchor" href="#接口定義">#</a> 接口定義</h2>
<p>在訂單服務中定義產生支付二維碼接口。</p>
<p>請求：訂單訊息</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span> </span><br><span class="line"><span class="meta">@ToString</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddOrderDto</span>  &#123; </span><br><span class="line">    <span class="comment">//总价 </span></span><br><span class="line">    <span class="keyword">private</span> Float totalPrice; </span><br><span class="line">    <span class="comment">//订单类型 </span></span><br><span class="line">    <span class="keyword">private</span> String orderType; </span><br><span class="line">    <span class="comment">//订单名称 </span></span><br><span class="line">    <span class="keyword">private</span> String orderName; </span><br><span class="line">    <span class="comment">//订单描述 </span></span><br><span class="line">    <span class="keyword">private</span> String orderDescrip; </span><br><span class="line">    <span class="comment">// 订单明细json，不可为空 </span></span><br><span class="line">    <span class="comment">//[&#123;&quot;goodsId&quot;:&quot;&quot;,&quot;goodsType&quot;:&quot;&quot;,&quot;goodsName&quot;:&quot;&quot;,&quot;goodsPrice&quot;:&quot;&quot;,&quot;goodsDetail&quot;:&quot;&quot;&#125;,&#123;...&#125;] </span></span><br><span class="line">    <span class="keyword">private</span> String orderDetail; </span><br><span class="line">    <span class="comment">//外部系统业务id </span></span><br><span class="line">    <span class="keyword">private</span> String outBusinessId; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>響應：支付交易記錄資訊及二維碼訊息</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span> </span><br><span class="line"><span class="meta">@ToString</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PayRecordDto</span> <span class="keyword">extends</span> <span class="title class_">XcPayRecord</span> &#123; </span><br><span class="line">    <span class="comment">//二维码 </span></span><br><span class="line">    <span class="keyword">private</span> String qrcode; </span><br><span class="line"> </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>接口定義如下</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(value = &quot;订单支付接口&quot;, tags = &quot;订单支付接口&quot;)</span> </span><br><span class="line"><span class="meta">@Slf4j</span> </span><br><span class="line"><span class="meta">@Controller</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123; </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@ApiOperation(&quot;生成支付二维码&quot;)</span> </span><br><span class="line">    <span class="meta">@PostMapping(&quot;/generatepaycode&quot;)</span> </span><br><span class="line">    <span class="meta">@ResponseBody</span> </span><br><span class="line">    <span class="keyword">public</span> PayRecordDto <span class="title function_">generatePayCode</span><span class="params">(<span class="meta">@RequestBody</span> AddOrderDto addOrderDto)</span> &#123; </span><br><span class="line">         </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>; </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>用户扫码请求下单，定义下单接口如下：</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;扫码下单接口&quot;)</span> </span><br><span class="line"><span class="meta">@GetMapping(&quot;/requestpay&quot;)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestpay</span><span class="params">(String payNo,HttpServletResponse httpResponse)</span> <span class="keyword">throws</span> IOException &#123; </span><br><span class="line"> </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h2 id="接口實現"><a class="markdownIt-Anchor" href="#接口實現">#</a> 接口實現</h2>
<p>在前面的分析中，產生支付二維碼操作，其中包含了三個小操作<br>
1️⃣插入訂單訊息<br>
2️⃣插入付款記錄<br>
3️⃣產生二維碼返回<br>
下邊要做的就是實現這三個接口</p>
<p>定義保存訂單資訊接口</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderService</span> &#123; </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">   <span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 创建商品订单 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> addOrderDto 订单信息 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> PayRecordDto 支付交易记录(包括二维码) </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.M </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/10/4 11:02 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">public</span> PayRecordDto <span class="title function_">createOrder</span><span class="params">(String userId,AddOrderDto addOrderDto)</span>; </span><br></pre></td></tr></table></figure>
<p>在保存訂單接口中需要完成建立商品訂單、建立支付交易記錄，接口實作方法如下：</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span> </span><br><span class="line"><span class="meta">@Service</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">OrderService</span> &#123; </span><br><span class="line">    <span class="meta">@Autowired</span> </span><br><span class="line">    XcOrdersMapper ordersMapper; </span><br><span class="line">    <span class="meta">@Autowired</span> </span><br><span class="line">    XcOrdersGoodsMapper ordersGoodsMapper; </span><br><span class="line">     </span><br><span class="line">    <span class="meta">@Autowired</span> </span><br><span class="line">    XcPayRecordMapper payRecordMapper; </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Transactional</span> </span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="keyword">public</span> PayRecordDto <span class="title function_">createOrder</span><span class="params">(String userId, AddOrderDto addOrderDto)</span> &#123; </span><br><span class="line"> </span><br><span class="line">        <span class="comment">//添加商品订单 </span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">//添加支付交易记录 </span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">//生成二维码 </span></span><br><span class="line">         </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>編寫建立商品訂單方法，商品訂單的資料來自選課記錄，在訂單表需要存入選課記錄的 ID，這裡需要作好冪等處理。</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> XcOrders <span class="title function_">saveOrders</span><span class="params">(String userId, AddOrderDto addOrderDto)</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 幂等性判断</span></span><br><span class="line">    <span class="type">XcOrders</span> <span class="variable">order</span> <span class="operator">=</span> getOrderByBusinessId(addOrderDto.getOutBusinessId());</span><br><span class="line">    <span class="keyword">if</span> (order != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. 插入订单表</span></span><br><span class="line">    order = <span class="keyword">new</span> <span class="title class_">XcOrders</span>();</span><br><span class="line">    BeanUtils.copyProperties(addOrderDto, order);</span><br><span class="line">    order.setId(IdWorkerUtils.getInstance().nextId());</span><br><span class="line">    order.setCreateDate(LocalDateTime.now());</span><br><span class="line">    order.setUserId(userId);</span><br><span class="line">    order.setStatus(<span class="string">&quot;600001&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">insert</span> <span class="operator">=</span> xcOrdersMapper.insert(order);</span><br><span class="line">    <span class="keyword">if</span> (insert &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        XueChengPlusException.cast(<span class="string">&quot;插入订单记录失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3. 插入订单明细表</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">orderId</span> <span class="operator">=</span> order.getId();</span><br><span class="line">    <span class="type">String</span> <span class="variable">orderDetail</span> <span class="operator">=</span> addOrderDto.getOrderDetail();</span><br><span class="line">    List&lt;XcOrdersGoods&gt; xcOrdersGoodsList = JSON.parseArray(orderDetail, XcOrdersGoods.class);</span><br><span class="line">    xcOrdersGoodsList.forEach(goods -&gt; &#123;</span><br><span class="line">        goods.setOrderId(orderId);</span><br><span class="line">        <span class="type">int</span> <span class="variable">insert1</span> <span class="operator">=</span> xcOrdersGoodsMapper.insert(goods);</span><br><span class="line">        <span class="keyword">if</span> (insert1 &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            XueChengPlusException.cast(<span class="string">&quot;插入订单明细失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> order;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据业务id查询订单 </span></span><br><span class="line"><span class="keyword">public</span> XcOrders <span class="title function_">getOrderByBusinessId</span><span class="params">(String businessId)</span> &#123; </span><br><span class="line">    <span class="type">XcOrders</span> <span class="variable">orders</span> <span class="operator">=</span> ordersMapper.selectOne(<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;XcOrders&gt;().eq(XcOrders::getOutBusinessId, businessId)); </span><br><span class="line">    <span class="keyword">return</span> orders; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="建立支付交易記錄"><a class="markdownIt-Anchor" href="#建立支付交易記錄">#</a> 建立支付交易記錄</h2>
<p><span class="red">為什麼要創建支付交易記錄？</span></p>
<blockquote><p>在請求微信或支付寶下單接口時需要傳入商品訂單號，在與第三方支付平台對接時發現，當用戶支付失敗或因為其它原因最終該訂單沒有支付成功，此時再次調用第三方支付平台的 下單接口發現報錯 “訂單號碼已存在”，此時如果我們傳入一個沒有使用過的訂單號碼就可以解決問題，但是商品訂單已經創建，因為沒有支付成功重新創建一個新訂單是不合理的。</p>
<p>解決以上問題的方案是：</p>
<p>1、用戶每次發起都建立一個新的支付交易記錄 ，此交易記錄與商品訂單關聯。</p>
<p>2、將支付交易記錄的流水號傳給第三方支付系統下單接口，這樣就即使沒有支付成功就不會出現上邊的問題。</p>
<p>3、需要提醒用戶不要重複付款。</p>
</blockquote>
<p>編寫建立支付交易記錄的方法：</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> XcPayRecord <span class="title function_">createPayRecord</span><span class="params">(XcOrders orders)</span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(order==<span class="literal">null</span>)&#123; </span><br><span class="line">       XueChengPlusException.cast(<span class="string">&quot;订单不存在&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span>(orders.getStatus().equals(<span class="string">&quot;600002&quot;</span>))&#123; </span><br><span class="line">        XueChengPlusException.cast(<span class="string">&quot;订单已支付&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="type">XcPayRecord</span> <span class="variable">payRecord</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XcPayRecord</span>(); </span><br><span class="line">    <span class="comment">//生成支付交易流水号 </span></span><br><span class="line">    <span class="type">long</span> <span class="variable">payNo</span> <span class="operator">=</span> IdWorkerUtils.getInstance().nextId(); </span><br><span class="line">    payRecord.setPayNo(payNo); </span><br><span class="line">    payRecord.setOrderId(orders.getId());<span class="comment">//商品订单号 </span></span><br><span class="line">    payRecord.setOrderName(orders.getOrderName()); </span><br><span class="line">    payRecord.setTotalPrice(orders.getTotalPrice()); </span><br><span class="line">    payRecord.setCurrency(<span class="string">&quot;CNY&quot;</span>); </span><br><span class="line">    payRecord.setCreateDate(LocalDateTime.now()); </span><br><span class="line">    payRecord.setStatus(<span class="string">&quot;601001&quot;</span>);<span class="comment">//未支付 </span></span><br><span class="line">    payRecord.setUserId(orders.getUserId()); </span><br><span class="line">    payRecordMapper.insert(payRecord); </span><br><span class="line">    <span class="keyword">return</span> payRecord; </span><br><span class="line"> </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h2 id="產成支付二維碼"><a class="markdownIt-Anchor" href="#產成支付二維碼">#</a> 產成支付二維碼</h2>
<p>1、在 nacos 中 orders-service-dev.yaml 配置二維碼的 url</p>
<figure class="highlight yaml"><figcaption><span>YAML</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pay:</span> </span><br><span class="line"> <span class="attr">qrcodeurl:</span> <span class="string">http://192.168.101.1/api/orders/requestpay?payNo=%s</span> </span><br></pre></td></tr></table></figure>
<p>2、用 format 拼接支付 URL, 完善建立訂單 service 方法:</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;pay.qrcodeurl&#125;&quot;)</span> </span><br><span class="line">String qrcodeurl; </span><br><span class="line"> </span><br><span class="line"><span class="meta">@Transactional</span> </span><br><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="keyword">public</span> PayRecordDto <span class="title function_">createOrder</span><span class="params">(String userId, AddOrderDto addOrderDto)</span> &#123; </span><br><span class="line">    <span class="comment">//创建商品订单 </span></span><br><span class="line">    <span class="type">XcOrders</span> <span class="variable">orders</span> <span class="operator">=</span> saveXcOrders(userId, addOrderDto); </span><br><span class="line">    <span class="keyword">if</span>(orders==<span class="literal">null</span>)&#123; </span><br><span class="line">        XueChengPlusException.cast(<span class="string">&quot;订单创建失败&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span>(orders.getStatus().equals(<span class="string">&quot;600002&quot;</span>))&#123; </span><br><span class="line">        XueChengPlusException.cast(<span class="string">&quot;订单已支付&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//生成支付记录 </span></span><br><span class="line">    <span class="type">XcPayRecord</span> <span class="variable">payRecord</span> <span class="operator">=</span> createPayRecord(orders); </span><br><span class="line">    <span class="comment">//生成二维码 </span></span><br><span class="line">    <span class="type">String</span> <span class="variable">qrCode</span> <span class="operator">=</span> <span class="literal">null</span>; </span><br><span class="line">    <span class="keyword">try</span> &#123; </span><br><span class="line">        <span class="comment">//url要可以被模拟器访问到，url为下单接口(稍后定义) </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> String.format(qrcodeurl, payRecord.getPayNo()); </span><br><span class="line">        qrCode = <span class="keyword">new</span> <span class="title class_">QRCodeUtil</span>().createQRCode(url, <span class="number">200</span>, <span class="number">200</span>); </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123; </span><br><span class="line">        XueChengPlusException.cast(<span class="string">&quot;生成二维码出错&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="type">PayRecordDto</span> <span class="variable">payRecordDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PayRecordDto</span>(); </span><br><span class="line">    BeanUtils.copyProperties(payRecord,payRecordDto); </span><br><span class="line">    payRecordDto.setQrcode(qrCode); </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> payRecordDto; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h2 id="生成二維碼接口完善"><a class="markdownIt-Anchor" href="#生成二維碼接口完善">#</a> 生成二維碼接口完善</h2>
<p>完善生成支付二维码 controller 接口</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span> </span><br><span class="line">OrderService orderService; </span><br><span class="line">     </span><br><span class="line"><span class="meta">@ApiOperation(&quot;生成支付二维码&quot;)</span> </span><br><span class="line"><span class="meta">@PostMapping(&quot;/generatepaycode&quot;)</span> </span><br><span class="line"><span class="meta">@ResponseBody</span> </span><br><span class="line"><span class="keyword">public</span> PayRecordDto <span class="title function_">generatePayCode</span><span class="params">(<span class="meta">@RequestBody</span> AddOrderDto addOrderDto)</span> &#123; </span><br><span class="line">    <span class="comment">//登录用户 </span></span><br><span class="line">    SecurityUtil.<span class="type">XcUser</span> <span class="variable">user</span> <span class="operator">=</span> SecurityUtil.getUser(); </span><br><span class="line">    <span class="keyword">if</span>(user == <span class="literal">null</span>)&#123; </span><br><span class="line">        XueChengPlusException.cast(<span class="string">&quot;请登录后继续选课&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">   <span class="keyword">return</span> orderService.createOrder(user.getId(), addOrderDto); </span><br><span class="line">    </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>成了支付二維碼，用戶掃碼請求第三方支付平台下單、付款。</p>
<p>1. 定義查詢支付交易記錄的 Service 接口與實作方法</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> XcPayRecord <span class="title function_">getPayRecordByPayno</span><span class="params">(String payNo)</span>; </span><br></pre></td></tr></table></figure>
<p>實現如下：</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="keyword">public</span> XcPayRecord <span class="title function_">getPayRecordByPayno</span><span class="params">(String payNo)</span> &#123; </span><br><span class="line">    <span class="type">XcPayRecord</span> <span class="variable">xcPayRecord</span> <span class="operator">=</span> payRecordMapper.selectOne(<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;XcPayRecord&gt;().eq(XcPayRecord::getPayNo, payNo)); </span><br><span class="line">    <span class="keyword">return</span> xcPayRecord; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>2 定義下單接口如下：</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;pay.alipay.APP_ID&#125;&quot;)</span> </span><br><span class="line">String APP_ID; </span><br><span class="line"><span class="meta">@Value(&quot;$&#123;pay.alipay.APP_PRIVATE_KEY&#125;&quot;)</span> </span><br><span class="line">String APP_PRIVATE_KEY; </span><br><span class="line"> </span><br><span class="line"><span class="meta">@Value(&quot;$&#123;pay.alipay.ALIPAY_PUBLIC_KEY&#125;&quot;)</span> </span><br><span class="line">String ALIPAY_PUBLIC_KEY; </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@ApiOperation(&quot;扫码下单接口&quot;)</span> </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/requestpay&quot;)</span> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestpay</span><span class="params">(String payNo,HttpServletResponse httpResponse)</span> <span class="keyword">throws</span> IOException &#123; </span><br><span class="line">        <span class="comment">//如果payNo不存在则提示重新发起支付 </span></span><br><span class="line">        <span class="type">XcPayRecord</span> <span class="variable">payRecord</span> <span class="operator">=</span> orderService.getPayRecordByPayno(payNo); </span><br><span class="line">        <span class="keyword">if</span>(payRecord == <span class="literal">null</span>)&#123; </span><br><span class="line">            XueChengPlusException.cast(<span class="string">&quot;请重新点击支付获取二维码&quot;</span>); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">//支付状态 </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">status</span> <span class="operator">=</span> payRecord.getStatus(); </span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;601002&quot;</span>.equals(status))&#123; </span><br><span class="line">            XueChengPlusException.cast(<span class="string">&quot;订单已支付，请勿重复支付。&quot;</span>); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">//构造sdk的客户端对象 </span></span><br><span class="line">        <span class="type">AlipayClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultAlipayClient</span>(AlipayConfig.URL, APP_ID, APP_PRIVATE_KEY, AlipayConfig.FORMAT, AlipayConfig.CHARSET, ALIPAY_PUBLIC_KEY, AlipayConfig.SIGNTYPE);<span class="comment">//获得初始化的AlipayClient </span></span><br><span class="line">        <span class="type">AlipayTradeWapPayRequest</span> <span class="variable">alipayRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlipayTradeWapPayRequest</span>();<span class="comment">//创建API对应的request </span></span><br><span class="line"><span class="comment">//        alipayRequest.setReturnUrl(&quot;http://domain.com/CallBack/return_url.jsp&quot;); </span></span><br><span class="line"><span class="comment">//        alipayRequest.setNotifyUrl(&quot;http://tjxt-user-t.itheima.net/xuecheng/orders/paynotify&quot;);//在公共参数中设置回跳和通知地址 </span></span><br><span class="line">        alipayRequest.setBizContent(<span class="string">&quot;&#123;&quot;</span> + </span><br><span class="line">                <span class="string">&quot; \&quot;out_trade_no\&quot;:\&quot;&quot;</span>+payRecord.getPayNo()+<span class="string">&quot;\&quot;,&quot;</span> + </span><br><span class="line">                <span class="string">&quot; \&quot;total_amount\&quot;:\&quot;&quot;</span>+payRecord.getTotalPrice()+<span class="string">&quot;\&quot;,&quot;</span> + </span><br><span class="line">                <span class="string">&quot; \&quot;subject\&quot;:\&quot;&quot;</span>+payRecord.getOrderName()+<span class="string">&quot;\&quot;,&quot;</span> + </span><br><span class="line">                <span class="string">&quot; \&quot;product_code\&quot;:\&quot;QUICK_WAP_PAY\&quot;&quot;</span> + </span><br><span class="line">                <span class="string">&quot; &#125;&quot;</span>);<span class="comment">//填充业务参数 </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">form</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>; </span><br><span class="line">        <span class="keyword">try</span> &#123; </span><br><span class="line">            <span class="comment">//请求支付宝下单接口,发起http请求 </span></span><br><span class="line">            form = client.pageExecute(alipayRequest).getBody(); <span class="comment">//调用SDK生成表单 </span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (AlipayApiException e) &#123; </span><br><span class="line">            e.printStackTrace(); </span><br><span class="line">        &#125; </span><br><span class="line">        httpResponse.setContentType(<span class="string">&quot;text/html;charset=&quot;</span> + AlipayConfig.CHARSET); </span><br><span class="line">        httpResponse.getWriter().write(form);<span class="comment">//直接将完整的表单html输出到页面 </span></span><br><span class="line">        httpResponse.getWriter().flush(); </span><br><span class="line">        httpResponse.getWriter().close(); </span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure>
<p>支付測試<br>
測試準備：</p>
<p>1、啟動網關服務、認證服務、驗證碼服務、學習中心服務、訂單服務、內容管理服務。</p>
<p>2、發布一門收費課程。</p>
<p>3. 使用資料目錄中的新模板 course_template.ftl</p>
<p>測試流程：</p>
<p>1. 進入收費課程詳細頁面，點選馬上學習。</p>
<p>2. 追蹤瀏覽器及微服務，觀察選課記錄是否創建成功、商品訂單是否創建成功、支付交易記錄是否創建成功。</p>
<p>3. 觀察產生二維碼是否成功</p>
<p>4. 使用模擬器掃碼測試，是否可以正常付款。</p>
<h2 id="查詢付款結果"><a class="markdownIt-Anchor" href="#查詢付款結果">#</a> 查詢付款結果</h2>
<p>接口定义:</p>
<p>根據前邊我們調查的獲取支付結果的接口，包括：主動查詢支付結果、被動接收支付結果。<br>
這裡先實現主動查詢支付結果，當支付完成用戶點擊「支付結果」將請求第三方支付平台查詢支付結果。<br>
在 OrderController 類別中定義接口如下：</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;查询支付结果&quot;)</span> </span><br><span class="line"><span class="meta">@GetMapping(&quot;/payresult&quot;)</span> </span><br><span class="line"><span class="meta">@ResponseBody</span> </span><br><span class="line"><span class="keyword">public</span> PayRecordDto <span class="title function_">payresult</span><span class="params">(String payNo)</span> <span class="keyword">throws</span> IOException &#123; </span><br><span class="line"> </span><br><span class="line">    <span class="comment">//查询支付结果 </span></span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>; </span><br><span class="line"> </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>1、定義查詢支付結果的 service</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 请求支付宝查询支付结果 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> payNo 支付记录id </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 支付记录信息 </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">public</span> PayRecordDto <span class="title function_">queryPayResult</span><span class="params">(String payNo)</span>; </span><br></pre></td></tr></table></figure>
<p>2、service 实现如下：</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="keyword">public</span> PayRecordDto <span class="title function_">queryPayResult</span><span class="params">(String payNo)</span>&#123; </span><br><span class="line">    <span class="type">XcPayRecord</span> <span class="variable">payRecord</span> <span class="operator">=</span> getPayRecordByPayno(payNo); </span><br><span class="line">    <span class="keyword">if</span> (payRecord == <span class="literal">null</span>) &#123; </span><br><span class="line">        XueChengPlusException.cast(<span class="string">&quot;请重新点击支付获取二维码&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//支付状态 </span></span><br><span class="line">    <span class="type">String</span> <span class="variable">status</span> <span class="operator">=</span> payRecord.getStatus(); </span><br><span class="line">    <span class="comment">//如果支付成功直接返回 </span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;601002&quot;</span>.equals(status)) &#123; </span><br><span class="line">        <span class="type">PayRecordDto</span> <span class="variable">payRecordDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PayRecordDto</span>(); </span><br><span class="line">        BeanUtils.copyProperties(payRecord, payRecordDto); </span><br><span class="line">        <span class="keyword">return</span> payRecordDto; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//从支付宝查询支付结果 </span></span><br><span class="line">    <span class="type">PayStatusDto</span> <span class="variable">payStatusDto</span> <span class="operator">=</span> queryPayResultFromAlipay(payNo); </span><br><span class="line">    <span class="comment">//保存支付结果 </span></span><br><span class="line">    currentProxy.saveAliPayStatus( payStatusDto); </span><br><span class="line">    <span class="comment">//重新查询支付记录 </span></span><br><span class="line">    payRecord = getPayRecordByPayno(payNo); </span><br><span class="line">    <span class="type">PayRecordDto</span> <span class="variable">payRecordDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PayRecordDto</span>(); </span><br><span class="line">    BeanUtils.copyProperties(payRecord, payRecordDto); </span><br><span class="line">    <span class="keyword">return</span> payRecordDto; </span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>定义从支付宝查询支付结果的方法</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> PayStatusDto <span class="title function_">queryPayResultFromAlipay</span><span class="params">(String payNo)</span> &#123; </span><br><span class="line"> </span><br><span class="line">    <span class="comment">//========请求支付宝查询支付结果============= </span></span><br><span class="line">    <span class="type">AlipayClient</span> <span class="variable">alipayClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultAlipayClient</span>(AlipayConfig.URL, APP_ID, APP_PRIVATE_KEY, <span class="string">&quot;json&quot;</span>, AlipayConfig.CHARSET, ALIPAY_PUBLIC_KEY, AlipayConfig.SIGNTYPE); <span class="comment">//获得初始化的AlipayClient </span></span><br><span class="line">    <span class="type">AlipayTradeQueryRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlipayTradeQueryRequest</span>(); </span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">bizContent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>(); </span><br><span class="line">    bizContent.put(<span class="string">&quot;out_trade_no&quot;</span>, payNo); </span><br><span class="line">    request.setBizContent(bizContent.toString()); </span><br><span class="line">    <span class="type">AlipayTradeQueryResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="literal">null</span>; </span><br><span class="line">    <span class="keyword">try</span> &#123; </span><br><span class="line">        response = alipayClient.execute(request); </span><br><span class="line">        <span class="keyword">if</span> (!response.isSuccess()) &#123; </span><br><span class="line">            XueChengPlusException.cast(<span class="string">&quot;请求支付查询查询失败&quot;</span>); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; <span class="keyword">catch</span> (AlipayApiException e) &#123; </span><br><span class="line">        log.error(<span class="string">&quot;请求支付宝查询支付结果异常:&#123;&#125;&quot;</span>, e.toString(), e); </span><br><span class="line">        XueChengPlusException.cast(<span class="string">&quot;请求支付查询查询失败&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="comment">//获取支付结果 </span></span><br><span class="line">    <span class="type">String</span> <span class="variable">resultJson</span> <span class="operator">=</span> response.getBody(); </span><br><span class="line">    <span class="comment">//转map </span></span><br><span class="line">    <span class="type">Map</span> <span class="variable">resultMap</span> <span class="operator">=</span> JSON.parseObject(resultJson, Map.class); </span><br><span class="line">    <span class="type">Map</span> <span class="variable">alipay_trade_query_response</span> <span class="operator">=</span> (Map) resultMap.get(<span class="string">&quot;alipay_trade_query_response&quot;</span>); </span><br><span class="line">    <span class="comment">//支付结果 </span></span><br><span class="line">    <span class="type">String</span> <span class="variable">trade_status</span> <span class="operator">=</span> (String) alipay_trade_query_response.get(<span class="string">&quot;trade_status&quot;</span>); </span><br><span class="line">    <span class="type">String</span> <span class="variable">total_amount</span> <span class="operator">=</span> (String) alipay_trade_query_response.get(<span class="string">&quot;total_amount&quot;</span>); </span><br><span class="line">    <span class="type">String</span> <span class="variable">trade_no</span> <span class="operator">=</span> (String) alipay_trade_query_response.get(<span class="string">&quot;trade_no&quot;</span>); </span><br><span class="line">    <span class="comment">//保存支付结果 </span></span><br><span class="line">    <span class="type">PayStatusDto</span> <span class="variable">payStatusDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PayStatusDto</span>(); </span><br><span class="line">    payStatusDto.setOut_trade_no(payNo); </span><br><span class="line">    payStatusDto.setTrade_status(trade_status); </span><br><span class="line">    payStatusDto.setApp_id(APP_ID); </span><br><span class="line">    payStatusDto.setTrade_no(trade_no); </span><br><span class="line">    payStatusDto.setTotal_amount(total_amount); </span><br><span class="line">    <span class="keyword">return</span> payStatusDto; </span><br><span class="line"> </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>1、定义保存支付结果的接口</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveAliPayStatus</span><span class="params">(PayStatusDto payStatusDto)</span> ;</span><br></pre></td></tr></table></figure>
<p>2、编写接口实现</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span> </span><br><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveAliPayStatus</span><span class="params">(PayStatusDto payStatusDto)</span> &#123; </span><br><span class="line">    <span class="comment">//支付流水号 </span></span><br><span class="line">    <span class="type">String</span> <span class="variable">payNo</span> <span class="operator">=</span> payStatusDto.getOut_trade_no(); </span><br><span class="line">    <span class="type">XcPayRecord</span> <span class="variable">payRecord</span> <span class="operator">=</span> getPayRecordByPayno(payNo); </span><br><span class="line">    <span class="keyword">if</span> (payRecord == <span class="literal">null</span>) &#123; </span><br><span class="line">        XueChengPlusException.cast(<span class="string">&quot;支付记录找不到&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//支付结果 </span></span><br><span class="line">    <span class="type">String</span> <span class="variable">trade_status</span> <span class="operator">=</span> payStatusDto.getTrade_status(); </span><br><span class="line">    log.debug(<span class="string">&quot;收到支付结果:&#123;&#125;,支付记录:&#123;&#125;&#125;&quot;</span>, payStatusDto.toString(),payRecord.toString()); </span><br><span class="line">    <span class="keyword">if</span> (trade_status.equals(<span class="string">&quot;TRADE_SUCCESS&quot;</span>)) &#123; </span><br><span class="line"> </span><br><span class="line">        <span class="comment">//支付金额变为分 </span></span><br><span class="line">        <span class="type">Float</span> <span class="variable">totalPrice</span> <span class="operator">=</span> payRecord.getTotalPrice() * <span class="number">100</span>; </span><br><span class="line">        <span class="type">Float</span> <span class="variable">total_amount</span> <span class="operator">=</span> Float.parseFloat(payStatusDto.getTotal_amount()) * <span class="number">100</span>; </span><br><span class="line">        <span class="comment">//校验是否一致 </span></span><br><span class="line">        <span class="keyword">if</span> (!payStatusDto.getApp_id().equals(APP_ID) || totalPrice.intValue() != total_amount.intValue()) &#123; </span><br><span class="line">            <span class="comment">//校验失败 </span></span><br><span class="line">            log.info(<span class="string">&quot;校验支付结果失败,支付记录:&#123;&#125;,APP_ID:&#123;&#125;,totalPrice:&#123;&#125;&quot;</span> ,payRecord.toString(),payStatusDto.getApp_id(),total_amount.intValue()); </span><br><span class="line">            XueChengPlusException.cast(<span class="string">&quot;校验支付结果失败&quot;</span>); </span><br><span class="line">        &#125; </span><br><span class="line">        log.debug(<span class="string">&quot;更新支付结果,支付交易流水号:&#123;&#125;,支付结果:&#123;&#125;&quot;</span>, payNo, trade_status); </span><br><span class="line">        <span class="type">XcPayRecord</span> <span class="variable">payRecord_u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XcPayRecord</span>(); </span><br><span class="line">        payRecord_u.setStatus(<span class="string">&quot;601002&quot;</span>);<span class="comment">//支付成功 </span></span><br><span class="line">        payRecord_u.setOutPayChannel(<span class="string">&quot;Alipay&quot;</span>); </span><br><span class="line">        payRecord_u.setOutPayNo(payStatusDto.getTrade_no());<span class="comment">//支付宝交易号 </span></span><br><span class="line">        payRecord_u.setPaySuccessTime(LocalDateTime.now());<span class="comment">//通知时间 </span></span><br><span class="line">        <span class="type">int</span> <span class="variable">update1</span> <span class="operator">=</span> payRecordMapper.update(payRecord_u, <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;XcPayRecord&gt;().eq(XcPayRecord::getPayNo, payNo)); </span><br><span class="line">        <span class="keyword">if</span> (update1 &gt; <span class="number">0</span>) &#123; </span><br><span class="line">            log.info(<span class="string">&quot;更新支付记录状态成功:&#123;&#125;&quot;</span>, payRecord_u.toString()); </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            log.info(<span class="string">&quot;更新支付记录状态失败:&#123;&#125;&quot;</span>, payRecord_u.toString()); </span><br><span class="line">            XueChengPlusException.cast(<span class="string">&quot;更新支付记录状态失败&quot;</span>); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">//关联的订单号 </span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">orderId</span> <span class="operator">=</span> payRecord.getOrderId(); </span><br><span class="line">        <span class="type">XcOrders</span> <span class="variable">orders</span> <span class="operator">=</span> ordersMapper.selectById(orderId); </span><br><span class="line">        <span class="keyword">if</span> (orders == <span class="literal">null</span>) &#123; </span><br><span class="line">            log.info(<span class="string">&quot;根据支付记录[&#123;&#125;&#125;]找不到订单&quot;</span>, payRecord_u.toString()); </span><br><span class="line">            XueChengPlusException.cast(<span class="string">&quot;根据支付记录找不到订单&quot;</span>); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="type">XcOrders</span> <span class="variable">order_u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XcOrders</span>(); </span><br><span class="line">        order_u.setStatus(<span class="string">&quot;600002&quot;</span>);<span class="comment">//支付成功 </span></span><br><span class="line">        <span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> ordersMapper.update(order_u, <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;XcOrders&gt;().eq(XcOrders::getId, orderId)); </span><br><span class="line">        <span class="keyword">if</span> (update &gt; <span class="number">0</span>) &#123; </span><br><span class="line">            log.info(<span class="string">&quot;更新订单表状态成功,订单号:&#123;&#125;&quot;</span>, orderId); </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            log.info(<span class="string">&quot;更新订单表状态失败,订单号:&#123;&#125;&quot;</span>, orderId); </span><br><span class="line">            XueChengPlusException.cast(<span class="string">&quot;更新订单表状态失败&quot;</span>); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h1 id="接口測試-2"><a class="markdownIt-Anchor" href="#接口測試-2">#</a> 接口測試</h1>
<p>1、完善接口</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;查询支付结果&quot;)</span> </span><br><span class="line"><span class="meta">@GetMapping(&quot;/payresult&quot;)</span> </span><br><span class="line"><span class="meta">@ResponseBody</span> </span><br><span class="line"><span class="keyword">public</span> PayRecordDto <span class="title function_">payresult</span><span class="params">(String payNo)</span> <span class="keyword">throws</span> IOException &#123; </span><br><span class="line">    <span class="comment">//调用支付宝接口查询 </span></span><br><span class="line">    <span class="type">PayRecordDto</span> <span class="variable">payRecordDto</span> <span class="operator">=</span> orderService.queryPayResult(payNo); </span><br><span class="line">    <span class="keyword">return</span> payRecordDto; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>導入黑馬提供的 LocalDateTimeConfig.java 到 base 工程的 config 包下，用於處理前端 Long 精度遺失的問題，然後使用前後端聯調</p>
<h2 id="接收支付通知"><a class="markdownIt-Anchor" href="#接收支付通知">#</a> 接收支付通知</h2>
<p>接口定义<br>
支付完成后第三方支付系统会主动通知支付结果，要实现主动通知需要在请求支付系统下单时传入 NotifyUrl，这里有两个 url：NotifyUrl 和 ReturnUrl，ReturnUrl 是支付完成后支付系统携带支付结果重定向到 ReturnUrl 地址，NotifyUrl 是支付完成后支付系统在后台定时去通知，使用 NotifyUrl 比使用 ReturnUrl 有保证。</p>
<p>根据接口描述：<span class="exturl" data-url="aHR0cHM6Ly9vcGVuZG9jcy5hbGlwYXkuY29tL29wZW4vMjAzLzEwNTI4NiVFNyU5QSU4NCVFNSU4NiU4NSVFNSVBRSVCOSVFNCVCOCU4QiVFOCVCRSVCOSVFNSU5QyVBOCVFOCVBRSVBMiVFNSU4RCU5NSVFNiU5QyU4RCVFNSU4QSVBMSVFNSVBRSU5QSVFNCVCOSU4OSVFNiU4RSVBNSVFNiU5NCVCNiVFNiU5NCVBRiVFNCVCQiU5OCVFNyVCQiU5MyVFNiU5RSU5QyVFOSU4MCU5QSVFNyU5RiVBNSVFNyU5QSU4NCVFNiU4RSVBNSVFNSU4RiVBMyVFMyU4MCU4Mg==">https://opendocs.alipay.com/open/203/105286 的内容下边在订单服务定义接收支付结果通知的接口。</span></p>
<p>首先在下单时指定 NotifyUrl:</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alipayRequest.setNotifyUrl(<span class="string">&quot;http://tjxt-user-t.itheima.net/xuecheng/orders/receivenotify&quot;</span>); </span><br></pre></td></tr></table></figure>
<p>接收支付结果通知接口如下：</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;接收支付结果通知&quot;)</span> </span><br><span class="line"><span class="meta">@PostMapping(&quot;/receivenotify&quot;)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receivenotify</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> UnsupportedEncodingException, AlipayApiException &#123; </span><br><span class="line">    Map&lt;String,String&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String,String&gt;(); </span><br><span class="line">    <span class="type">Map</span> <span class="variable">requestParams</span> <span class="operator">=</span> request.getParameterMap(); </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">Iterator</span> <span class="variable">iter</span> <span class="operator">=</span> requestParams.keySet().iterator(); iter.hasNext();) &#123; </span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) iter.next(); </span><br><span class="line">        String[] values = (String[]) requestParams.get(name); </span><br><span class="line">        <span class="type">String</span> <span class="variable">valueStr</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>; </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; values.length; i++) &#123; </span><br><span class="line">            valueStr = (i == values.length - <span class="number">1</span>) ? valueStr + values[i] </span><br><span class="line">                    : valueStr + values[i] + <span class="string">&quot;,&quot;</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        params.put(name, valueStr); </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//验签 </span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">verify_result</span> <span class="operator">=</span> AlipaySignature.rsaCheckV1(params, ALIPAY_PUBLIC_KEY, AlipayConfig.CHARSET, <span class="string">&quot;RSA2&quot;</span>);  </span><br><span class="line">    <span class="keyword">if</span>(verify_result) &#123;<span class="comment">//验证成功 </span></span><br><span class="line">        <span class="comment">//商户订单号 </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">out_trade_no</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(request.getParameter(<span class="string">&quot;out_trade_no&quot;</span>).getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>),<span class="string">&quot;UTF-8&quot;</span>); </span><br><span class="line">        <span class="comment">//支付宝交易号 </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">trade_no</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(request.getParameter(<span class="string">&quot;trade_no&quot;</span>).getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>),<span class="string">&quot;UTF-8&quot;</span>); </span><br><span class="line">        <span class="comment">//交易状态 </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">trade_status</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(request.getParameter(<span class="string">&quot;trade_status&quot;</span>).getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>),<span class="string">&quot;UTF-8&quot;</span>); </span><br><span class="line">        <span class="comment">//appid </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">app_id</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(request.getParameter(<span class="string">&quot;app_id&quot;</span>).getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>),<span class="string">&quot;UTF-8&quot;</span>); </span><br><span class="line">        <span class="comment">//total_amount </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">total_amount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(request.getParameter(<span class="string">&quot;total_amount&quot;</span>).getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>),<span class="string">&quot;UTF-8&quot;</span>);  </span><br><span class="line">        <span class="comment">//交易成功处理 </span></span><br><span class="line">        <span class="keyword">if</span> (trade_status.equals(<span class="string">&quot;TRADE_SUCCESS&quot;</span>)) &#123; </span><br><span class="line"> </span><br><span class="line">            <span class="type">PayStatusDto</span> <span class="variable">payStatusDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PayStatusDto</span>(); </span><br><span class="line">            payStatusDto.setOut_trade_no(out_trade_no); </span><br><span class="line">            payStatusDto.setTrade_status(trade_status); </span><br><span class="line">            payStatusDto.setApp_id(app_id); </span><br><span class="line">            payStatusDto.setTrade_no(trade_no); </span><br><span class="line">            payStatusDto.setTotal_amount(total_amount); </span><br><span class="line">           <span class="comment">//处理逻辑。。。 </span></span><br><span class="line">            orderService.saveAliPayStatus(payStatusDto); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>接口测试:</p>
<p>1、启动网关服务、认证服务、验证码服务、学习中心服务、内容管理服务。</p>
<p>2、发布一门收费课程。</p>
<p>测试流程：</p>
<p>1、对选课进行支付</p>
<p>2、支付成功跟踪 service 方法的日志，支付成功需要更新支付交易表记录的状态、通知时间、支付宝交易号、支付渠道 (Alipay)</p>
<p>支付成功更新订单表的状态为空。</p>
<h1 id="支付通知"><a class="markdownIt-Anchor" href="#支付通知">#</a> 支付通知</h1>
<p>訂單服務作為通用服務在訂單支付成功後需要將支付結果非同步通知給其它微服務。<br>
下圖使用了訊息隊列完成支付結果通知：</p>
<img data-src="/John/img/java/pay/alipay/8.png" class="abc">
<p>學習中心服務：收費課程選課需支付，與訂單服務對接完成支付。</p>
<p>學習資源服務：收費的學習資料需要購買後下載，與訂單服務對接完成付款。</p>
<p>訂單服務完成付款後將付款結果發給每一個與訂單服務對接的微服務，訂單服務將訊息發給交換機，由交換機廣播訊息，每個訂閱訊息的微服務都可以接收到支付結果.</p>
<p>微服務收到付款結果會根據訂單的類型去更新自己的業務資料。</p>
<h2 id="技术方案"><a class="markdownIt-Anchor" href="#技术方案">#</a> 技术方案</h2>
<p>使用訊息隊列進行非同步通知需要保證訊息的可靠性，即生產端將訊息成功通知到消費端。<br>
訊息從生產端發送到消費端經歷瞭如下過程：</p>
<p>1、訊息發送到交換機</p>
<p>2、訊息由交換器發送到隊列</p>
<p>3. 訊息者收到訊息進行處理</p>
<p>保證訊息的可靠性需要保證以上過程的可靠性，本專案使用 RabbitMQ 可以透過以下方面保證訊息的可靠性。</p>
<p>1. 生產者確認機制</p>
<p>發送訊息前使用資料庫事務將訊息保證到資料庫表中<br>
成功傳送到交換器將訊息從資料庫中刪除</p>
<p>2、mq 持久化</p>
<p>mq 收到訊息進行持久化，當 mq 重啟即使訊息沒有消費完也不會遺失。<br>
需要配置交換器持久化、隊列持久化、發送訊息時設定持久化。</p>
<p>3. 消費者確認機制</p>
<p>消費者消費成功自動發送 ack，否則重試消費。</p>
<h2 id="訂單服務整合mq"><a class="markdownIt-Anchor" href="#訂單服務整合mq">#</a> 訂單服務整合 MQ</h2>
<p>1. 首先在訂單服務新增訊息隊列依賴</p>
<figure class="highlight xml"><figcaption><span>XML</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br></pre></td></tr></table></figure>
<p>2. 在 nacos 配置 rabbitmq-dev.yaml 為通用配置文件</p>
<figure class="highlight yaml"><figcaption><span>YAML</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">rabbitmq:</span> </span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.101</span><span class="number">.65</span> </span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> </span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span> </span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span> </span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span> </span><br><span class="line">    <span class="attr">publisher-confirm-type:</span> <span class="string">correlated</span> <span class="comment">#correlated 异步回调，定义ConfirmCallback，MQ返回结果时会回调这个ConfirmCallback </span></span><br><span class="line">    <span class="attr">publisher-returns:</span> <span class="literal">false</span> <span class="comment">#开启publish-return功能，同样是基于callback机制，需要定义ReturnCallback </span></span><br><span class="line">    <span class="attr">template:</span> </span><br><span class="line">      <span class="attr">mandatory:</span> <span class="literal">false</span> <span class="comment">#定义消息路由失败时的策略。true，则调用ReturnCallback；false：则直接丢弃消息 </span></span><br><span class="line">    <span class="attr">listener:</span> </span><br><span class="line">      <span class="attr">simple:</span> </span><br><span class="line">        <span class="attr">acknowledge-mode:</span> <span class="string">none</span> <span class="comment">#出现异常时返回unack，消息回滚到mq；没有异常，返回ack ,manual:手动控制,none:丢弃消息，不回滚到mq </span></span><br><span class="line">        <span class="attr">retry:</span> </span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#开启消费者失败重试 </span></span><br><span class="line">          <span class="attr">initial-interval:</span> <span class="string">1000ms</span> <span class="comment">#初识的失败等待时长为1秒 </span></span><br><span class="line">          <span class="attr">multiplier:</span> <span class="number">1</span> <span class="comment">#失败的等待时长倍数，下次等待时长 = multiplier * last-interval </span></span><br><span class="line">          <span class="attr">max-attempts:</span> <span class="number">3</span> <span class="comment">#最大重试次数 </span></span><br><span class="line">          <span class="attr">stateless:</span> <span class="literal">true</span> <span class="comment">#true无状态；false有状态。如果业务中包含事务，这里改为false </span></span><br></pre></td></tr></table></figure>
<p>`3. 在訂單服務隊列工程引入 rabbitmq-dev.yaml 設定檔</p>
<figure class="highlight yaml"><figcaption><span>YAML</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">shared-configs:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">data-id:</span> <span class="string">rabbitmq-$&#123;spring.profiles.active&#125;.yaml</span> </span><br><span class="line">    <span class="attr">group:</span> <span class="string">xuecheng-plus-common</span> </span><br><span class="line">    <span class="attr">refresh:</span> <span class="literal">true</span> </span><br></pre></td></tr></table></figure>
<p>4. 在訂單服務 service 工程編寫 MQ 配置類，配置交換機</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span> </span><br><span class="line"><span class="meta">@Configuration</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PayNotifyConfig</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span> &#123; </span><br><span class="line"> </span><br><span class="line">    <span class="comment">//交换机 </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PAYNOTIFY_EXCHANGE_FANOUT</span> <span class="operator">=</span> <span class="string">&quot;paynotify_exchange_fanout&quot;</span>; </span><br><span class="line">    <span class="comment">//支付结果通知消息类型 </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MESSAGE_TYPE</span> <span class="operator">=</span> <span class="string">&quot;payresult_notify&quot;</span>; </span><br><span class="line">    <span class="comment">//支付通知隊列 </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PAYNOTIFY_QUEUE</span> <span class="operator">=</span> <span class="string">&quot;paynotify_queue&quot;</span>; </span><br><span class="line"> </span><br><span class="line">    <span class="comment">//声明交换机，且持久化 </span></span><br><span class="line">    <span class="meta">@Bean(PAYNOTIFY_EXCHANGE_FANOUT)</span> </span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">paynotify_exchange_fanout</span><span class="params">()</span> &#123; </span><br><span class="line">        <span class="comment">// 三个参数：交换机名称、是否持久化、当没有queue与其绑定时是否自动删除 </span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(PAYNOTIFY_EXCHANGE_FANOUT, <span class="literal">true</span>, <span class="literal">false</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//支付通知隊列,且持久化 </span></span><br><span class="line">    <span class="meta">@Bean(PAYNOTIFY_QUEUE)</span> </span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">course_publish_queue</span><span class="params">()</span> &#123; </span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(PAYNOTIFY_QUEUE).build(); </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="comment">//交换机和支付通知隊列绑定 </span></span><br><span class="line">    <span class="meta">@Bean</span> </span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">binding_course_publish_queue</span><span class="params">(<span class="meta">@Qualifier(PAYNOTIFY_QUEUE)</span> Queue queue, <span class="meta">@Qualifier(PAYNOTIFY_EXCHANGE_FANOUT)</span> FanoutExchange exchange)</span> &#123; </span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange); </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123; </span><br><span class="line">        <span class="comment">// 获取RabbitTemplate </span></span><br><span class="line">        <span class="type">RabbitTemplate</span> <span class="variable">rabbitTemplate</span> <span class="operator">=</span> applicationContext.getBean(RabbitTemplate.class); </span><br><span class="line">        <span class="comment">//消息处理service </span></span><br><span class="line">        <span class="type">MqMessageService</span> <span class="variable">mqMessageService</span> <span class="operator">=</span> applicationContext.getBean(MqMessageService.class); </span><br><span class="line">        <span class="comment">// 设置ReturnCallback </span></span><br><span class="line">        rabbitTemplate.setReturnCallback((message, replyCode, replyText, exchange, routingKey) -&gt; &#123; </span><br><span class="line">            <span class="comment">// 投递失败，记录日志 </span></span><br><span class="line">            log.info(<span class="string">&quot;消息发送失败，应答码&#123;&#125;，原因&#123;&#125;，交换机&#123;&#125;，路由键&#123;&#125;,消息&#123;&#125;&quot;</span>, </span><br><span class="line">                    replyCode, replyText, exchange, routingKey, message.toString()); </span><br><span class="line">            <span class="type">MqMessage</span> <span class="variable">mqMessage</span> <span class="operator">=</span> JSON.parseObject(message.toString(), MqMessage.class); </span><br><span class="line">            <span class="comment">//将消息再添加到消息表 </span></span><br><span class="line">            mqMessageService.addMessage(mqMessage.getMessageType(),mqMessage.getBusinessKey1(),mqMessage.getBusinessKey2(),mqMessage.getBusinessKey3()); </span><br><span class="line"> </span><br><span class="line">        &#125;); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="發送支付結果"><a class="markdownIt-Anchor" href="#發送支付結果">#</a> 發送支付結果</h2>
<p>在 OrderService 中定义接口</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 发送通知结果 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> message </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyPayResult</span><span class="params">(MqMessage message)</span>; </span><br></pre></td></tr></table></figure>
<p>編寫接口實作方法：</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyPayResult</span><span class="params">(MqMessage message)</span> &#123; </span><br><span class="line"> </span><br><span class="line">    <span class="comment">//1、消息体，转json </span></span><br><span class="line">    <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> JSON.toJSONString(message); </span><br><span class="line">    <span class="comment">//设置消息持久化 </span></span><br><span class="line">    <span class="type">Message</span> <span class="variable">msgObj</span> <span class="operator">=</span> MessageBuilder.withBody(msg.getBytes(StandardCharsets.UTF_8)) </span><br><span class="line">            .setDeliveryMode(MessageDeliveryMode.PERSISTENT) </span><br><span class="line">            .build(); </span><br><span class="line">    <span class="comment">// 2.全局唯一的消息ID，需要封装到CorrelationData中 </span></span><br><span class="line">    <span class="type">CorrelationData</span> <span class="variable">correlationData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorrelationData</span>(message.getId().toString()); </span><br><span class="line">    <span class="comment">// 3.添加callback </span></span><br><span class="line">    correlationData.getFuture().addCallback( </span><br><span class="line">            result -&gt; &#123; </span><br><span class="line">                <span class="keyword">if</span>(result.isAck())&#123; </span><br><span class="line">                    <span class="comment">// 3.1.ack，消息成功 </span></span><br><span class="line">                    log.debug(<span class="string">&quot;通知支付结果消息发送成功, ID:&#123;&#125;&quot;</span>, correlationData.getId()); </span><br><span class="line">                    <span class="comment">//删除消息表中的记录 </span></span><br><span class="line">                    mqMessageService.completed(message.getId()); </span><br><span class="line">                &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">                    <span class="comment">// 3.2.nack，消息失败 </span></span><br><span class="line">                    log.error(<span class="string">&quot;通知支付结果消息发送失败, ID:&#123;&#125;, 原因&#123;&#125;&quot;</span>,correlationData.getId(), result.getReason()); </span><br><span class="line">                &#125; </span><br><span class="line">            &#125;, </span><br><span class="line">            ex -&gt; log.error(<span class="string">&quot;消息发送异常, ID:&#123;&#125;, 原因&#123;&#125;&quot;</span>,correlationData.getId(),ex.getMessage()) </span><br><span class="line">    ); </span><br><span class="line">    <span class="comment">// 发送消息 </span></span><br><span class="line">    rabbitTemplate.convertAndSend(PayNotifyConfig.PAYNOTIFY_EXCHANGE_FANOUT, <span class="string">&quot;&quot;</span>, msgObj,correlationData); </span><br><span class="line"> </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>订单服务收到第三方平台的支付结果时，在 saveAliPayStatus 方法中添加代码，向数据库消息表添加消息并进行发送消息，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span> </span><br><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveAliPayStatus</span><span class="params">(PayStatusDto payStatusDto)</span> &#123; </span><br><span class="line">        ....... </span><br><span class="line">        <span class="comment">//保存消息记录,参数1：支付结果通知类型，2: 业务id，3:业务类型 </span></span><br><span class="line">        <span class="type">MqMessage</span> <span class="variable">mqMessage</span> <span class="operator">=</span> mqMessageService.addMessage(<span class="string">&quot;payresult_notify&quot;</span>, orders.getOutBusinessId(), orders.getOrderType(), <span class="literal">null</span>); </span><br><span class="line">        <span class="comment">//通知消息 </span></span><br><span class="line">        notifyPayResult(mqMessage); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>配置交换机和隊列</p>
<p>在 order-service 工程配置</p>
<p>消息发送方法</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 发送通知结果 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> message </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyPayResult</span><span class="params">(MqMessage message)</span>; </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="學習中心服務集成mq"><a class="markdownIt-Anchor" href="#學習中心服務集成mq">#</a> 學習中心服務集成 MQ</h2>
<p>1、在学习中心服务添加消息隊列依赖</p>
<figure class="highlight xml"><figcaption><span>XML</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br></pre></td></tr></table></figure>
<p>2、在学习中心服务接口工程引入 rabbitmq-dev.yaml 配置文件</p>
<figure class="highlight yaml"><figcaption><span>YAML</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">shared-configs:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">data-id:</span> <span class="string">rabbitmq-$&#123;spring.profiles.active&#125;.yaml</span> </span><br><span class="line">    <span class="attr">group:</span> <span class="string">xuecheng-plus-common</span> </span><br><span class="line">    <span class="attr">refresh:</span> <span class="literal">true</span> </span><br></pre></td></tr></table></figure>
<p>3、添加配置类</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span> </span><br><span class="line"><span class="meta">@Configuration</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PayNotifyConfig</span> &#123; </span><br><span class="line"> </span><br><span class="line">    <span class="comment">//交换机 </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PAYNOTIFY_EXCHANGE_FANOUT</span> <span class="operator">=</span> <span class="string">&quot;paynotify_exchange_fanout&quot;</span>; </span><br><span class="line">    <span class="comment">//支付结果通知消息类型 </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MESSAGE_TYPE</span> <span class="operator">=</span> <span class="string">&quot;payresult_notify&quot;</span>; </span><br><span class="line">    <span class="comment">//支付通知隊列 </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PAYNOTIFY_QUEUE</span> <span class="operator">=</span> <span class="string">&quot;paynotify_queue&quot;</span>; </span><br><span class="line"> </span><br><span class="line">    <span class="comment">//声明交换机，且持久化 </span></span><br><span class="line">    <span class="meta">@Bean(PAYNOTIFY_EXCHANGE_FANOUT)</span> </span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">paynotify_exchange_fanout</span><span class="params">()</span> &#123; </span><br><span class="line">        <span class="comment">// 三个参数：交换机名称、是否持久化、当没有queue与其绑定时是否自动删除 </span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(PAYNOTIFY_EXCHANGE_FANOUT, <span class="literal">true</span>, <span class="literal">false</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//支付通知隊列,且持久化 </span></span><br><span class="line">    <span class="meta">@Bean(PAYNOTIFY_QUEUE)</span> </span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">course_publish_queue</span><span class="params">()</span> &#123; </span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(PAYNOTIFY_QUEUE).build(); </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="comment">//交换机和支付通知隊列绑定 </span></span><br><span class="line">    <span class="meta">@Bean</span> </span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">binding_course_publish_queue</span><span class="params">(<span class="meta">@Qualifier(PAYNOTIFY_QUEUE)</span> Queue queue, <span class="meta">@Qualifier(PAYNOTIFY_EXCHANGE_FANOUT)</span> FanoutExchange exchange)</span> &#123; </span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange); </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="接收支付结果"><a class="markdownIt-Anchor" href="#接收支付结果">#</a> 接收支付结果</h2>
<p>监听 MQ，接收支付结果，定义 ReceivePayNotifyService 类如下：</p>
<figure class="highlight java"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span> </span><br><span class="line"><span class="meta">@Service</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReceivePayNotifyService</span> &#123; </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span> </span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate; </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span> </span><br><span class="line">    MqMessageService mqMessageService; </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span> </span><br><span class="line">    MyCourseTablesService myCourseTablesService; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//监听消息隊列接收支付结果通知 </span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = PayNotifyConfig.PAYNOTIFY_QUEUE)</span> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(Message message, Channel channel)</span> &#123; </span><br><span class="line">        <span class="keyword">try</span> &#123; </span><br><span class="line">            Thread.sleep(<span class="number">5000</span>); </span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">//获取消息 </span></span><br><span class="line">        <span class="type">MqMessage</span> <span class="variable">mqMessage</span> <span class="operator">=</span> JSON.parseObject(message.getBody(), MqMessage.class); </span><br><span class="line">        log.debug(<span class="string">&quot;学习中心服务接收支付结果:&#123;&#125;&quot;</span>, mqMessage); </span><br><span class="line"> </span><br><span class="line">        <span class="comment">//消息类型 </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">messageType</span> <span class="operator">=</span> mqMessage.getMessageType(); </span><br><span class="line">        <span class="comment">//订单类型,60201表示购买课程 </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">businessKey2</span> <span class="operator">=</span> mqMessage.getBusinessKey2(); </span><br><span class="line">        <span class="comment">//这里只处理支付结果通知 </span></span><br><span class="line">        <span class="keyword">if</span> (PayNotifyConfig.MESSAGE_TYPE.equals(messageType) &amp;&amp; <span class="string">&quot;60201&quot;</span>.equals(businessKey2)) &#123; </span><br><span class="line">            <span class="comment">//选课记录id </span></span><br><span class="line">            <span class="type">String</span> <span class="variable">choosecourseId</span> <span class="operator">=</span> mqMessage.getBusinessKey1(); </span><br><span class="line">            <span class="comment">//添加选课 </span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> myCourseTablesService.saveChooseCourseStauts(choosecourseId); </span><br><span class="line">            <span class="keyword">if</span>(!b)&#123; </span><br><span class="line">                <span class="comment">//添加选课失败，抛出异常，消息重回隊列 </span></span><br><span class="line">                XueChengPlusException.cast(<span class="string">&quot;收到支付结果，添加选课失败&quot;</span>); </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="通知支付结果測試"><a class="markdownIt-Anchor" href="#通知支付结果測試">#</a> 通知支付结果測試</h2>
<p>测试准备：</p>
<p>1️⃣找一門已發布的收費課程。</p>
<p>2️⃣如果在我的課程表儲存則刪除。</p>
<p>3️⃣刪除此課程的選課紀錄及訂單資訊。</p>
<p>測試流程：</p>
<p>1️⃣進入課程詳細頁面，點選馬上學習，產生二維碼進行付款。</p>
<p>2️⃣付款完成點擊 “付款完成”，觀察訂單服務控制台是否發送訊息。</p>
<p>3️⃣觀察學習中心服務控制台是否接收到訊息。</p>
<p>4️⃣觀察資料庫中的消息表的相應記錄是否已刪除。</p>
<p>消費重試測試：</p>
<p>1️⃣在學習中心服務接收支付結果方法中製造異常。</p>
<p>2️⃣重新執行上邊的測試流程，觀察是否消費重試。</p>
<img data-src="https://usagif.com/wp-content/uploads/gifs/thanks-for-watching-9.gif" class="abc" width="600" height="350"><div class="tags"><a href="/John/tags/%E6%94%AF%E4%BB%98/" rel="tag"><i class="ic i-tag"></i>支付</a></div></div><footer><div class="meta"><span class="item"><span class="icon"><i class="ic i-calendar-check"></i></span><span class="text">更新於</span><time title="修改時間：2023-11-10 16:43:48" itemprop="dateModified" datetime="2023-11-10T16:43:48+08:00">2023-11-10</time></span></div><div id="copyright"><ul><li class="author"><strong>作者：</strong>John<i class="ic i-at"><em>@</em></i>一切都是過程</li><li class="link"><strong>文章連結：</strong><a href="https://superrjohn.github.io/John/2023/11/08/java/pay/alipay" title="整合支付寶">https://superrjohn.github.io/John/2023/11/08/java/pay/alipay</a></li><li class="license"><strong>版權聲明：</strong>本網誌所有文章除特別聲明外，均採用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" rel="noopener" target="_blank"><i class="ic i-creative-commons"><em>(CC)</em></i>BY-NC-SA</a> 許可協議。轉載請註明出處！</li></ul></div></footer></article></div><div class="post-nav"><div class="item left"><a href="/John/2023/11/07/java/radis/redis_interview" rel="prev" itemprop="url" data-background-image="https:&#x2F;&#x2F;www.wangluogeng.com&#x2F;static&#x2F;uploads&#x2F;20191228&#x2F;3918128f599ec041f8d7e71c993ac550.jpeg" title="Redis面試題整理"><span class="type">上一篇</span><span class="category"><i class="ic i-flag"></i>中間件</span><h3>Redis面試題整理</h3></a></div><div class="item right"></div></div><div class="wrap" id="wcomments"></div><script type="module" data-pjax="data-pjax">import { init } from 'https://unpkg.com/@waline/client@v2/dist/waline.mjs';

setTimeout(function () {
    init({
        el: '#wcomments',
        serverURL: 'https://superr.zeabur.app',
        lang: 'zh-CN',
        locale: {},
        emoji: ["https://unpkg.com/@waline/emojis@1.0.1/weibo","https://unpkg.com/@waline/emojis@1.0.1/alus","https://unpkg.com/@waline/emojis@1.0.1/bilibili","https://unpkg.com/@waline/emojis@1.0.1/qq","https://unpkg.com/@waline/emojis@1.0.1/tieba","https://unpkg.com/@waline/emojis@1.0.1/tw-emoji"],
        meta: ["nick","mail","link"],
        requiredMeta: ["nick","mail"],
        wordLimit: 0,
        pageSize: 10,
        pageview: false,
        path: window.location.pathname,
        dark: 'html[data-theme="dark"]'
    });
}, 1000)</script></div><div id="sidebar"><div class="inner"><div class="panels"><div class="inner"><div class="contents panel pjax" data-title="文章目錄"><ol class="toc"><li class="toc-item toc-level-1"><a class="toc-link" href="#%E6%95%B4%E5%90%88%E7%AC%AC%E4%B8%89%E6%96%B9%E6%94%AF%E4%BB%98"><span class="toc-number">1.</span> <span class="toc-text"> 整合第三方支付</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%9F%B7%E8%A1%8C%E6%B5%81%E7%A8%8B"><span class="toc-number">1.1.</span> <span class="toc-text"> 執行流程</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E9%80%9A%E7%94%A8%E8%A8%82%E5%96%AE%E6%9C%8D%E5%8B%99%E8%A8%AD%E8%A8%88"><span class="toc-number">1.2.</span> <span class="toc-text"> 通用訂單服務設計</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E6%BA%96%E5%82%99%E9%96%8B%E7%99%BC%E7%92%B0%E5%A2%83"><span class="toc-number">2.</span> <span class="toc-text"> 準備開發環境</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E6%94%AF%E4%BB%98%E5%AF%B6%E9%96%8B%E7%99%BC%E7%92%B0%E5%A2%83"><span class="toc-number">2.1.</span> <span class="toc-text"> 支付寶開發環境</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E5%BB%BA%E7%AB%8B%E8%A8%82%E5%96%AE%E6%9C%8D%E5%8B%99"><span class="toc-number">3.</span> <span class="toc-text"> 建立訂單服務</span></a></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E6%94%AF%E4%BB%98%E6%8E%A5%E5%8F%A3%E6%B8%AC%E8%A9%A6"><span class="toc-number">4.</span> <span class="toc-text"> 支付接口測試</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E9%96%B1%E8%AE%80%E6%8E%A5%E5%8F%A3%E5%AE%9A%E7%BE%A9"><span class="toc-number">4.1.</span> <span class="toc-text"> 閱讀接口定義</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E4%B8%8B%E5%96%AE%E5%9F%B7%E8%A1%8C%E6%B5%81%E7%A8%8B"><span class="toc-number">4.2.</span> <span class="toc-text"> 下單執行流程</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E7%B7%A8%E5%AF%AB%E4%B8%8B%E5%96%AE%E7%A8%8B%E5%BC%8F%E7%A2%BC"><span class="toc-number">4.3.</span> <span class="toc-text"> 編寫下單程式碼</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E7%94%A2%E7%94%9F%E4%BA%8C%E7%B6%AD%E7%A2%BC"><span class="toc-number">4.4.</span> <span class="toc-text"> 產生二維碼</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E6%8E%A5%E5%8F%A3%E6%B8%AC%E8%A9%A6"><span class="toc-number">4.5.</span> <span class="toc-text"> 接口測試</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E6%94%AF%E4%BB%98%E7%B5%90%E6%9E%9C%E6%9F%A5%E8%A9%A2%E6%8E%A5%E5%8F%A3"><span class="toc-number">5.</span> <span class="toc-text"> 支付結果查詢接口</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E6%94%AF%E4%BB%98%E7%B5%90%E6%9E%9C%E9%80%9A%E7%9F%A5%E6%8E%A5%E5%8F%A3"><span class="toc-number">5.1.</span> <span class="toc-text"> 支付結果通知接口</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E7%B7%A8%E5%AF%AB%E6%B8%AC%E8%A9%A6%E7%A8%8B%E5%BC%8F%E7%A2%BC"><span class="toc-number">5.2.</span> <span class="toc-text"> 編寫測試程式碼</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E7%94%9F%E6%88%90%E6%94%AF%E4%BB%98%E4%BA%8C%E7%B6%AD%E7%A2%BC"><span class="toc-number">6.</span> <span class="toc-text"> 生成支付二維碼</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%9F%B7%E8%A1%8C%E6%B5%81%E7%A8%8B-2"><span class="toc-number">6.1.</span> <span class="toc-text"> 執行流程</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E6%95%B8%E6%93%9A%E6%A8%A1%E5%9E%8B"><span class="toc-number">6.2.</span> <span class="toc-text"> 數據模型</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E6%8E%A5%E5%8F%A3%E5%AE%9A%E7%BE%A9"><span class="toc-number">6.3.</span> <span class="toc-text"> 接口定義</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E6%8E%A5%E5%8F%A3%E5%AF%A6%E7%8F%BE"><span class="toc-number">6.4.</span> <span class="toc-text"> 接口實現</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%BB%BA%E7%AB%8B%E6%94%AF%E4%BB%98%E4%BA%A4%E6%98%93%E8%A8%98%E9%8C%84"><span class="toc-number">6.5.</span> <span class="toc-text"> 建立支付交易記錄</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E7%94%A2%E6%88%90%E6%94%AF%E4%BB%98%E4%BA%8C%E7%B6%AD%E7%A2%BC"><span class="toc-number">6.6.</span> <span class="toc-text"> 產成支付二維碼</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E7%94%9F%E6%88%90%E4%BA%8C%E7%B6%AD%E7%A2%BC%E6%8E%A5%E5%8F%A3%E5%AE%8C%E5%96%84"><span class="toc-number">6.7.</span> <span class="toc-text"> 生成二維碼接口完善</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E6%9F%A5%E8%A9%A2%E4%BB%98%E6%AC%BE%E7%B5%90%E6%9E%9C"><span class="toc-number">6.8.</span> <span class="toc-text"> 查詢付款結果</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E6%8E%A5%E5%8F%A3%E6%B8%AC%E8%A9%A6-2"><span class="toc-number">7.</span> <span class="toc-text"> 接口測試</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E6%8E%A5%E6%94%B6%E6%94%AF%E4%BB%98%E9%80%9A%E7%9F%A5"><span class="toc-number">7.1.</span> <span class="toc-text"> 接收支付通知</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E6%94%AF%E4%BB%98%E9%80%9A%E7%9F%A5"><span class="toc-number">8.</span> <span class="toc-text"> 支付通知</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88"><span class="toc-number">8.1.</span> <span class="toc-text"> 技术方案</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E8%A8%82%E5%96%AE%E6%9C%8D%E5%8B%99%E6%95%B4%E5%90%88mq"><span class="toc-number">8.2.</span> <span class="toc-text"> 訂單服務整合 MQ</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E7%99%BC%E9%80%81%E6%94%AF%E4%BB%98%E7%B5%90%E6%9E%9C"><span class="toc-number">8.3.</span> <span class="toc-text"> 發送支付結果</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%AD%B8%E7%BF%92%E4%B8%AD%E5%BF%83%E6%9C%8D%E5%8B%99%E9%9B%86%E6%88%90mq"><span class="toc-number">8.4.</span> <span class="toc-text"> 學習中心服務集成 MQ</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E6%8E%A5%E6%94%B6%E6%94%AF%E4%BB%98%E7%BB%93%E6%9E%9C"><span class="toc-number">8.5.</span> <span class="toc-text"> 接收支付结果</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E9%80%9A%E7%9F%A5%E6%94%AF%E4%BB%98%E7%BB%93%E6%9E%9C%E6%B8%AC%E8%A9%A6"><span class="toc-number">8.6.</span> <span class="toc-text"> 通知支付结果測試</span></a></li></ol></li></ol></div><div class="related panel pjax" data-title="系列文章"><ul><li  class="active"><a href="/John/2023/11/08/java/pay/alipay" rel="bookmark" title="整合支付寶">整合支付寶</a></li></ul></div><div class="overview panel" data-title="本站概要"><div class="author" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><img class="image" itemprop="image" alt="John" data-src="/John/assets/404.png"/><p class="name" itemprop="name">John</p><div class="description" itemprop="description"></div></div><nav class="state"><div class="item posts"><a href="/John/archives/"><span class="count">8</span><span class="name">文章</span></a></div><div class="item categories"><a href="/John/categories/"><span class="count">6</span><span class="name">分類</span></a></div><div class="item tags"><a href="/John/tags/"><span class="count">9</span><span class="name">標籤</span></a></div></nav><div class="social"><a href="https://github.com/superrjohn" class="item github" rel="noopener" title="https:&#x2F;&#x2F;github.com&#x2F;superrjohn" target="_blank"><i class="ic i-github"></i></a><a href="https://music.163.com/#/user/home?id=8923804515" class="item music" rel="noopener" title="https:&#x2F;&#x2F;music.163.com&#x2F;#&#x2F;user&#x2F;home?id&#x3D;8923804515" target="_blank"><i class="ic i-cloud-music"></i></a><a href="https://www.youtube.com/@John-ql5uv" class="item youtube" rel="noopener" title="https:&#x2F;&#x2F;www.youtube.com&#x2F;@John-ql5uv" target="_blank"><i class="ic i-youtube"></i></a></div><div class="menu"><li class="item"><a href="/John/" rel="section"><i class="ic i-home"></i>首頁</a></li><li class="item dropdown"><a href="javascript:void(0);"><i class="ic i-user"></i>關於</a><ul class="submenu"><li class="item"><a href="/John/about/" rel="section"><i class="ic i-user"></i>關於本站</a></li></ul></li><li class="item dropdown"><a href="javascript:void(0);"><i class="ic i-feather"></i>文章</a><ul class="submenu"><li class="item"><a href="/John/archives/" rel="section"><i class="ic i-list-alt"></i>歸檔</a></li><li class="item"><a href="/John/categories/" rel="section"><i class="ic i-th"></i>分類</a></li><li class="item"><a href="/John/tags/" rel="section"><i class="ic i-tags"></i>標籤</a></li></ul></li></div></div></div></div><ul id="quick"><li class="prev pjax"></li><li class="up"><i class="ic i-arrow-up"></i></li><li class="down"><i class="ic i-arrow-down"></i></li><li class="next pjax"><a href="/John/2023/11/07/java/radis/redis_interview" rel="next" title="下一篇"><i class="ic i-chevron-right"></i></a></li><li class="percent"></li></ul></div></div><div class="dimmer"></div></div></main><footer id="footer"><div class="inner"><div class="widgets"><div class="rpost pjax"><h2>隨機文章</h2><ul><li class="item"><div class="breadcrumb"><a href="/John/categories/java/" title="分類於java">java</a><i class="ic i-angle-right"></i><a href="/John/categories/java/pay/" title="分類於支付">支付</a></div><span><a href="/John/2023/11/08/java/pay/alipay">整合支付寶</a></span></li><li class="item"><div class="breadcrumb"><a href="/John/categories/java/" title="分類於java">java</a><i class="ic i-angle-right"></i><a href="/John/categories/java/SpringSecurity/" title="分類於SpringSecurity">SpringSecurity</a></div><span><a href="/John/2023/10/30/java/SpringSecurity/SpringSecurity">SpringSecurity 認證授權</a></span></li><li class="item"><div class="breadcrumb"><a href="/John/categories/java/" title="分類於java">java</a><i class="ic i-angle-right"></i><a href="/John/categories/java/SpringSecurity/" title="分類於SpringSecurity">SpringSecurity</a></div><span><a href="/John/2023/11/03/java/SpringSecurity/WeChat_login">SpringSecurity 微信登錄</a></span></li><li class="item"><div class="breadcrumb"><a href="/John/categories/hexo/" title="分類於hexo">hexo</a></div><span><a href="/John/2023/10/22/hexo/Hexo">Hexo快速部署!</a></span></li><li class="item"><div class="breadcrumb"><a href="/John/categories/java/" title="分類於java">java</a><i class="ic i-angle-right"></i><a href="/John/categories/java/radis-rabbitmq/" title="分類於中間件">中間件</a></div><span><a href="/John/2023/11/07/java/radis/redis_interview">Redis面試題整理</a></span></li><li class="item"><div class="breadcrumb"><a href="/John/categories/java/" title="分類於java">java</a><i class="ic i-angle-right"></i><a href="/John/categories/java/springMVC/" title="分類於springMVC">springMVC</a></div><span><a href="/John/2023/10/27/java/springMVC/UserBook-Web">手寫springMVC!</a></span></li><li class="item"><div class="breadcrumb"><a href="/John/categories/java/" title="分類於java">java</a><i class="ic i-angle-right"></i><a href="/John/categories/java/radis-rabbitmq/" title="分類於中間件">中間件</a></div><span><a href="/John/2023/10/26/java/radis/radis">Redis 緩存優化</a></span></li><li class="item"><div class="breadcrumb"><a href="/John/categories/java/" title="分類於java">java</a><i class="ic i-angle-right"></i><a href="/John/categories/java/radis-rabbitmq/" title="分類於中間件">中間件</a></div><span><a href="/John/2023/10/26/java/rabbitmq/rabbitmq">Hello RabbitMq!</a></span></li></ul></div><div class="rpost pjax"><h2>最新評論</h2><ul class="leancloud-recent-comment" id="new-comment"><li class="item" v-for="com in coms"><a v-bind:href="root + com.href" data-pjax-state="data-pjax-state"><span class="breadcrumb">{{com.nick}} @ {{com.time}}</span><span>{{com.text}}<br/></span></a></li></ul></div></div><div class="status"><div class="copyright">&copy; 2022 -<span itemprop="copyrightYear">2023</span><span class="with-love"><i class="ic i-sakura rotate"></i></span><span class="author" itemprop="copyrightHolder">John @ john's blog</span></div><div class="count"><span class="post-meta-item-icon"><i class="ic i-chart-area"></i></span><span title="總字數">116k 字</span><span class="post-meta-divider">|</span><span class="post-meta-item-icon"><i class="ic i-coffee"></i></span><span title="所需總閱讀時間">1:45</span></div><div class="powered-by">基於 <a href="https://hexo.io/" rel="noopener" target="_blank">Hexo</a> & Theme.<a href="https://github.com/theme-shoka-x/hexo-theme-shokaX/" rel="noopener" target="_blank">ShokaX</a></div></div></div></footer></div><script data-config type="text/javascript">var LOCAL = {
        path: `2023/11/08/java/pay/alipay`,
        favicon: {
        show: `（●´3｀●）復活成功`,
        hide: `(´Д｀)瀏覽器崩潰啦`
    },
    search: {
        placeholder: "文章搜尋",
        empty: "關於 「 ${query} 」 ，什麼也沒搜到",
        stats: "${time} ms 內找到 ${hits} 條結果"
    },
    valine: true,
    chart: false,
    copy_tex: false,
    katex: false,
    mermaid: false,
    audio: undefined,
    fancybox: true,
    nocopy: false,
    outime: true,
    template: `<div class="note warning"><p><span class="label warning">文章時效性提示</span><br>這是一篇發佈於 {{publish}} 天前，最後一次更新在 {{updated}} 天前的文章，部分信息可能已經發生改變，請注意甄別。</p></div>`,
    quiz: {
        choice: `單選題`,
        multiple: `多選題`,
        true_false: `判斷題`,
        essay: `問答題`,
        gap_fill: `填空題`,
        mistake: `錯題備註`
    },
    ignores: [
        (uri) => uri.includes('#'),
        (uri) => new RegExp(LOCAL.path + '$').test(uri),
            []
    ]
};
</script><script src="https://polyfill.io/v3/polyfill.min.js?features=default,fetch"></script><script src="https://lf9-cdn-tos.bytecdntp.com/cdn/expire-6-M/pace/1.0.2/pace.min.js"></script><script src="https://lf9-cdn-tos.bytecdntp.com/cdn/expire-6-M/algoliasearch/4.12.1/algoliasearch-lite.umd.min.js"></script><script src="https://lf9-cdn-tos.bytecdntp.com/cdn/expire-6-M/instantsearch.js/4.39.0/instantsearch.production.min.js"></script><script src="https://lf9-cdn-tos.bytecdntp.com/cdn/expire-6-M/quicklink/2.2.0/quicklink.umd.min.js"></script><script src="https://lf9-cdn-tos.bytecdntp.com/cdn/expire-6-M/??jquery/3.5.1/jquery.min.js,fancybox/3.5.7/jquery.fancybox.min.js,justifiedGallery/3.8.1/js/jquery.justifiedGallery.min.js" async></script><script src="https://lf9-cdn-tos.bytecdntp.com/cdn/expire-6-M/KaTeX/0.15.2/contrib/copy-tex.min.js" async></script><script src="/John/js/app.js?v=0.3.6"></script>
    <script type="module" data-pjax>
        let items = []
        import { RecentComments } from 'https://unpkg.com/@waline/client@v2/dist/waline.mjs'
        RecentComments({
          serverURL: 'https://superr.zeabur.app',
          count: 10,
        }).then(({ comments }) => {
          comments.forEach(function (item) {
              let cText = (item.orig.length > 50) ? item.orig.substring(0,50)+'...' : item.orig
              item.url = item.url !== '/' ?  '/' + item.url : item.url;
              const siteLink = item.url + "#" + item.objectId
              items.push({
                  href: siteLink,
                  nick: item.nick,
                  time: item.insertedAt.split('T').shift(),
                  text: cText
              })
          })
          Vue.createApp({
            data() {
                return {
                    coms: items,
                    root: '/John'
                }
            }
          }).mount('#new-comment')
        }).catch(function (err) {
          console.error(err)
        })
    </script>
    </body></html>