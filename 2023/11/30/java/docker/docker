<!DOCTYPE html><html lang="zh-TW"><head><meta charset="UTF-8"/><meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=2"/><meta name="theme-color" content="#222"/><meta http-equiv="X-UA-COMPATIBLE" content="IE=edge,chrome=1"/><meta name="renderer" content="webkit"/><link rel="icon" type="image/ico" sizes="32x32" href="/John/assets/favicon.ico"/><link rel="apple-touch-icon" sizes="180x180" href="/John/assets/apple-touch-icon.png"/><link rel="alternate" href="/John/rss.xml" title="一切都是過程" type="application/rss+xml"><link rel="alternate" href="/John/atom.xml" title="一切都是過程" type="application/atom+xml"><link rel="alternate" type="application/json" title="一切都是過程" href="https://superrjohn.github.io/John/feed.json"/><link rel="preconnect" href="https://lf9-cdn-tos.bytecdntp.com"/><link rel="dns-prefetch" href="https://cdn.jsdelivr.net"/><link rel="dns-prefetch" href="https://unpkg.com"/><link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Mulish:300,300italic,400,400italic,700,700italic%7CFredericka%20the%20Great:300,300italic,400,400italic,700,700italic%7CNoto%20Serif%20JP:300,300italic,400,400italic,700,700italic%7CNoto%20Serif%20SC:300,300italic,400,400italic,700,700italic%7CInconsolata:300,300italic,400,400italic,700,700italic&display=swap&subset=latin,latin-ext"><link rel="stylesheet" href="/John/css/app.css?v=0.3.6"><script src="https://cdn.staticfile.org/vue/3.2.45/vue.global.prod.js"></script><link rel="stylesheet" href="https://unpkg.com/@waline/client@v2/dist/waline.css"/><meta name="keywords" content="docker"/><link rel="canonical" href="https://superrjohn.github.io/John/2023/11/30/java/docker/docker"><title>Docker</title><meta name="generator" content="Hexo 6.3.0"></head><body itemscope itemtype="http://schema.org/WebPage"><div id="loading"><div class="cat"><div class="body"></div><div class="head"><div class="face"></div></div><div class="foot"><div class="tummy-end"></div><div class="bottom"></div><div class="legs left"></div><div class="legs right"></div></div><div class="paw"><div class="hands left"></div><div class="hands right"></div></div></div></div><div id="container"><header id="header" itemscope itemtype="http://schema.org/WPHeader"><div class="inner"><div id="brand"><div class="pjax"><h1 itemprop="name headline">Docker</h1><div class="meta"><span class="item" title="創建時間：2023-11-30 18:25:29"><span class="icon"><i class="ic i-calendar"></i></span><span class="text">發表於</span><time itemprop="dateCreated datePublished" datetime="2023-11-30T18:25:29+08:00">2023-11-30</time></span><span class="item" title="文章字數"><span class="icon"><i class="ic i-pen"></i></span><span class="text">文章字數</span><span>16k</span><span class="text">字</span></span><span class="item" title="所需閱讀時間"><span class="icon"><i class="ic i-clock"></i></span><span class="text">所需閱讀時間</span><span>14 分鐘</span></span></div></div></div><nav id="nav"><div class="inner"><div class="toggle"><div class="lines" aria-label="切換導航欄"><span class="line"></span><span class="line"></span><span class="line"></span></div></div><ul class="menu"><li class="item title"><a href="/John/" rel="start">john's blog</a></li></ul><ul class="right" id="rightNav"><li class="item theme" @click="changeThemeByBtn"><i class="ic" :class="{'i-sun': !themeStatus,'i-moon': themeStatus}"></i></li><li class="item search"><i class="ic i-search"></i></li></ul></div></nav></div><div class="pjax" id="imgs"><img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ1qsUiMJKhfpDaKNPftRnnyXG1OMDpups9nQNNjn9F8W12pXySEJeHUbGXciZ8vAhaC38&amp;usqp=CAU"></div></header><div id="waves"><svg class="waves" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 24 150 28" preserveAspectRatio="none" shape-rendering="auto"><defs><path id="gentle-wave" d="M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z"></path></defs><g class="parallax"><use xlink:href="#gentle-wave" x="48" y="0"></use><use xlink:href="#gentle-wave" x="48" y="3"></use><use xlink:href="#gentle-wave" x="48" y="5"></use><use xlink:href="#gentle-wave" x="48" y="7"></use></g></svg></div><main><div class="inner"><div class="pjax" id="main"><div class="article wrap"><div class="breadcrumb" itemListElement itemscope itemtype="https://schema.org/BreadcrumbList"><i class="ic i-home"></i><span><a href="/John/">首頁</a></span><i class="ic i-angle-right"></i><span class="current" itemprop="itemListElement" itemscope="itemscope" itemtype="https://schema.org/ListItem"><a href="/John/categories/java/" itemprop="item" rel="index" title="分類於java"><span itemprop="name">java<meta itemprop="position" content="0"/></span></a></span></div><article class="post block" itemscope="itemscope" itemtype="http://schema.org/Article" lang="zh-TW"><link itemprop="mainEntityOfPage" href="https://superrjohn.github.io/John/2023/11/30/java/docker/docker"/><span hidden="hidden" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="image" content="/John/assets/404.png"/><meta itemprop="name" content="John"/><meta itemprop="description" content=", "/></span><span hidden="hidden" itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="一切都是過程"/></span><div class="body md" itemprop="articleBody"><p>前言：感謝黑馬提供的課程:<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUhQNDExODc5Ny8/cD0zJmFtcDtzcG1faWRfZnJvbT1wYWdlRHJpdmVyJmFtcDt2ZF9zb3VyY2U9MDlkNjZhMWYwNzI1YzU0NTkzNDg5MmYwOGVmNmNiYTU=">docker 教學</span></p>
<h1 id="安裝docker所需的前置"><a class="markdownIt-Anchor" href="#安裝docker所需的前置">#</a> 安裝 Docker 所需的前置</h1>
<h2 id="准备linux环境"><a class="markdownIt-Anchor" href="#准备linux环境">#</a> 准备 Linux 环境</h2>
<p>首先，我们要准备一个 Linux 的系统，成本最低的方式就是在本地安装一台虚拟机。为了统一学习环境，不管是使用 MacOS 还是 Windows 系统的同学，都建议安装一台虚拟机。<br>
windows 采用 VMware，Mac 则采用 Fusion,<span class="rainbow"> 安裝前置請參考黑馬課程中的文檔</span>。</p>
<p>1️⃣安装 VMware<br>
2️⃣创建虚拟机，Centos7 是比较常用的一个 Linux 发行版本，首先要下载一个 Centos7 的 iso 文件，下載 mini 版即可。<br>
3️⃣安装 Centos7<br>
4️⃣SSH 客户端，使用 Finshell 或其他也可</p>
<h3 id="安裝docker"><a class="markdownIt-Anchor" href="#安裝docker">#</a> 安裝 docker</h3>
<p>1. 卸载旧版<br>
首先如果系统中已经存在旧的 Docker，则先卸载：</p>
<figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">    docker-client \</span><br><span class="line">    docker-client-latest \</span><br><span class="line">    docker-common \</span><br><span class="line">    docker-latest \</span><br><span class="line">    docker-latest-logrotate \</span><br><span class="line">    docker-logrotate \</span><br><span class="line">    docker-engine</span><br></pre></td></tr></table></figure>
<p>2. 配置 Docker 的 yum 库<br>
首先要安装一个 yum 工具</p>
<figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure>
<p>安装成功后，执行命令，配置 Docker 的 yum 源：</p>
<figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>
<p>3. 安装 Docker<br>
 最后，执行命令，安装 Docker</p>
<figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure>
<p>4. 启动和校验</p>
<figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动Docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止Docker</span></span><br><span class="line">systemctl stop docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置开机自启</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行docker ps命令，如果不报错，说明安装启动成功</span></span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure>
<p>5. 配置镜像加速 (將 yum 源改為其他，例如阿里云，騰信云等)</p>
<h1 id="快速入門"><a class="markdownIt-Anchor" href="#快速入門">#</a> 快速入門</h1>
<h2 id="部署mysql"><a class="markdownIt-Anchor" href="#部署mysql">#</a> 部署 MySQL</h2>
<p>首先，我们利用 Docker 来安装一个 MySQL 软件，大家可以对比一下之前传统的安装方式，看看哪个效率更高一些。<br>
如果是利用传统方式部署 MySQL，大概的步骤有：</p>
<ul>
<li>搜索并下载 MySQL 安装包</li>
<li>上传至 Linux 环境</li>
<li>编译和配置环境</li>
<li>安装</li>
</ul>
<p>而使用 Docker 安装，仅仅需要一步即可，在命令行输入下面的命令（建议采用 CV 大法）：</p>
<figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name mysql \</span><br><span class="line">  -p 3306:3306 \</span><br><span class="line">  -e TZ=Asia/Shanghai \</span><br><span class="line">  -e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line">  mysql</span><br></pre></td></tr></table></figure>
<p>运行效果如图：</p>
<img data-src="/John/img/java/docker/1.png" class="abc">
<p>MySQL 安装完毕！通过任意客户端工具即可连接到 MySQL.</p>
<p><span class="rainbow">重點 1:</span>docker 安裝好後，以下載 MYSQL 為例，安裝好後不用進行各種環境配置，這是為什麼？是因為 docker 會自動下載 MYSQL 的鏡像，鏡像包括應用本身、運行所需的環境、配置、系統函數庫，而且 docker 會在運行鏡像時創建一個隔離環境，免受其他進程的影響，稱為容器，所以 docker 中安裝不同的應用，不會因為應用本身所需的環境配置不同，發生應用和應用之間的衝突，因為應用是隔離環境的。</p>
<p><span class="rainbow">重點 2:</span>docker 的應用源在哪裡搜尋和下載？在鏡像倉庫，存儲和管理鏡像的平台，docker 官方維護了一個公共倉庫:docker hub, 不過事實上上載到平台的應用基本上都是軟件公司自己上載到公共倉庫。</p>
<img data-src="/John/img/java/docker/2.png" class="abc">
<h1 id="命令解讀"><a class="markdownIt-Anchor" href="#命令解讀">#</a> 命令解讀</h1>
<figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name mysql \</span><br><span class="line">  -p 3306:3306 \</span><br><span class="line">  -e TZ=Asia/Shanghai \</span><br><span class="line">  -e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line">  mysql</span><br></pre></td></tr></table></figure>
<p><span class="rainbow">命令解讀:</span>docker run -d,docker 是前綴，run 是其中一個子命令，docker run 是創建并運行一個容器，-d 是讓容器在後台運行<br>
–name mysql 是給容器起一個名字，必須唯一<br>
 - p 3306:3306, 是設置端口映射，第一個 3306 是映射到虛擬機 (宿者機) 的端口，第二個 3306 是容器的端口，因為 docker 內的應用是隔離環境的，別人沒辦法訪問，但我們可以讓容器的端口映射到虛擬機的端口，然後我們通過訪問虛擬機加映射端口就能訪問到容器。<br>
-e KEY=VALUE 是設置環境變量，這個要查看 docker hub 的應用中，作者讓我們可以配置什麼。-e TZ=Asia/Shangha 是上海時區，-e MYSQL_ROOT_PASSWORD=123 是 MYSQL 的密碼設置為 123<br>
mysql 是指定運行的鏡像名字，指定 docker 要下載誰，搜尋誰下載誰就在這指定，如果想指定 mysql 的版本就需要這樣寫 mysql:5.7, 沒有指定版本默認安裝最新版</p>
<h2 id="dokcer常見命令"><a class="markdownIt-Anchor" href="#dokcer常見命令">#</a> Dokcer 常見命令</h2>
<p>不用背命令，用到再查即可</p>
<img data-src="/John/img/java/docker/3.png" class="abc">
<h2 id="用nginx演示"><a class="markdownIt-Anchor" href="#用nginx演示">#</a> 用 nginx 演示</h2>
<figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第1步，去DockerHub查看nginx镜像仓库及相关信息</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第2步，拉取Nginx镜像</span></span><br><span class="line">docker pull nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第3步，查看镜像</span></span><br><span class="line">docker images</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">结果如下：</span></span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">nginx        latest    605c77e624dd   16 months ago   141MB</span><br><span class="line">mysql        latest    3218b38490ce   17 months ago   516MB</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第4步，创建并允许Nginx容器</span></span><br><span class="line">docker run -d --name nginx -p 80:80 nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第5步，查看运行中容器</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">也可以加格式化方式访问，格式会更加清爽</span></span><br><span class="line">docker ps --format &quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第6步，访问网页，地址：http://虚拟机地址</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第7步，停止容器</span></span><br><span class="line">docker stop nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第8步，查看所有容器</span></span><br><span class="line">docker ps -a --format &quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第9步，再次启动nginx容器</span></span><br><span class="line">docker start nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第10步，再次查看容器</span></span><br><span class="line">docker ps --format &quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第11步，查看容器详细信息</span></span><br><span class="line">docker inspect nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第12步，进入容器,查看容器内目录,-it是可輸入的總端,因為要指令跟容器交互,進入容器後<span class="built_in">exit</span>退出</span></span><br><span class="line">docker exec -it nginx bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者，可以进入MySQL</span></span><br><span class="line">docker exec -it mysql mysql -uroot -p</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第13步，删除容器</span></span><br><span class="line">docker rm nginx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">发现无法删除，因为容器运行中，强制删除容器</span></span><br><span class="line">docker rm -f nginx</span><br></pre></td></tr></table></figure>
<h2 id="起別名"><a class="markdownIt-Anchor" href="#起別名">#</a> 起別名</h2>
<p>因為有些見用的命令很長，所以我們可以為命令起別名，在 docker 根下進入 vi ~/.bashrc 文件，文件內容有一些默認的別名，像是 alias rm=‘rm -i’,rm 是要起的別名，= 號右邊是原本的命令。</p>
<p>因為原本 docker ps 返回的內容有些不需要，所以我們用 format 命令指定返回內容，現在我們為這個命令起別名，方便之後工作。</p>
<figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alias dps=&#x27;docker ps --format &quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;&#x27;</span><br><span class="line">alias dis=&#x27;docker images&#x27;</span><br></pre></td></tr></table></figure>
<p>添加後退出保存，添加後需要再輸入 source ~/.bashrc, 找到這文件才會起效</p>
<h1 id="數據卷"><a class="markdownIt-Anchor" href="#數據卷">#</a> 數據卷</h1>
<h2 id="以nginx為例"><a class="markdownIt-Anchor" href="#以nginx為例">#</a> 以 nginx 為例</h2>
<p>修改 nginx 容器中的 html 目錄下的 index 文件，並將靜態資源部署到 nginx, 但發現用 vi 進入不到容器，因為鏡像只配置能運行的環境，所以我們要修改容器內的東西很困難，所以我們使用數據卷。</p>
<p>數據卷是一個虛擬目錄，是容器內目錄與宿主機目錄之間映射的橋粱，利用 docker 命令創建數據卷，就會在宿主機文系統創建對應文件，然後讓容器與宿主機目錄掛載，我們修改宿主機文件的內容會映射到容器中。</p>
<img data-src="/John/img/java/docker/4.png" class="abc">
<p>提示：在執行 docker run 命令時，使用 - v 數據卷：容器目錄可以完成數據卷掛載，當創建容器時，如果掛載了數據卷且數據卷不存在，會自動創建數據卷</p>
<img data-src="/John/img/java/docker/5.png" class="abc">
<figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f nginx</span><br><span class="line">docker run -d --name nginx -p 80:80 -v html:/usr/share/nginx/html nginx</span><br></pre></td></tr></table></figure>
<p>再輸入 docker volume ls 查看有沒有創成功數據卷，可以再查看數據卷位置 docker volume inspect html, 如下圖數據卷映射流程。</p>
<img data-src="/John/img/java/docker/6.png" class="abc">
<p>現在我們可以修改數據卷了，在 FinalShell 中找到數據卷位置，修改當中的 nginx 的 index 文件 title</p>
<img data-src="/John/img/java/docker/7.png" class="abc">
<h2 id="容器創建後再掛載數據卷"><a class="markdownIt-Anchor" href="#容器創建後再掛載數據卷">#</a> 容器創建後再掛載數據卷</h2>
<p>docker inspect nginx 命令，可以查看 nginx 容器詳細信息，其中 Mounts 可以看到數據卷的信息。</p>
<img data-src="/John/img/java/docker/8.png" class="abc">
<p>以下再查看 MYSQL 容器詳細信息，發現在我們沒有為容器創建數據卷情況下，docker 為我們自動生成了<br>
這種數據卷是匿名卷，名字會自動生成，這會有些問題存在，把容器刪了，但其實匿名卷還在，所以再創一個容器就會把舊的匿名卷覆蓋，可以把匿名卷 copy, 但不實際</p>
<img data-src="/John/img/java/docker/9.png" class="abc">
<p>現在我們要在 root 建創 mysql 目錄並進行掛載，先 mkdir mysql 創建 mysql 目錄，cd mysql,mkdir data,mkdir conf,mkdir init, 然後把課程資源對應 mysql 的文件放進去，<br>
 然後刪除並重新建立 mysql 容器，並完成本機目錄掛載:<br>
・掛載 /root/mysql/data 到容器內的 /var/lib/mysql 目錄<br>
・掛載 /root/mysql/init 到容器內的 /docker-entrypoint-initdb.d 目錄 (初始化的 SQL 腳本目錄)<br>
・掛載 /root/mysql/conf 到容器內的 /etc/mysql/conf.d 目錄 (這個是 MySQL 設定檔目錄)</p>
<p>本地掛載注意:</p>
<img data-src="/John/img/java/docker/10.png" class="abc">
<figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name mysql \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line">-v /root......[自行輸入] \</span><br><span class="line">-v /root......[自行輸入] \</span><br><span class="line">-v /root......[自行輸入] \</span><br><span class="line">mysql</span><br></pre></td></tr></table></figure>
<p>這樣就可以成功掛載，這種方法掛載，以後做升級需要刪了 mysql, 只要 root 中的 mysql 目錄還在，就能重新掛載。</p>
<h1 id="自定義鏡像"><a class="markdownIt-Anchor" href="#自定義鏡像">#</a> 自定義鏡像</h1>
<h2 id="dockerfile"><a class="markdownIt-Anchor" href="#dockerfile">#</a> Dockerfile</h2>
<img data-src="/John/img/java/docker/11.png" class="abc">
<p>1. 基礎鏡像是應用所依賴的文件，而這個文件是各文件都互通的，像是已安裝 mysql 後，再安裝 redis, 會發現基礎鏡像已存在。<br>
2. 層是應用的操作，每次操作都伯形成新的一層<br>
 3. 入口是程式啟動的腳本和參數</p>
<img data-src="/John/img/java/docker/12.png" class="abc">
<p>我們可以用 Dockerfile 來簡化鏡像構建，也可以直表接基於 JDK 為基礎鏡像，省略前面的步驟</p>
<img data-src="/John/img/java/docker/13.png" class="abc">
<p>找到課程資料 demo 文件中關於 dockerfile 的文件，和在 images 文件中的 jdk.tar 包上傳，在 root 中加入 jdk.tar 文件，如何把 tar 包變成自己的鏡像，要輸入指令 docker load -i jdk.tar, 其中 - i 是插入的意思，插入後用 dis 查看 openjdk 存在不，然後在 root 中加入 demo 文件，內容把課程資料的 dockerfile 放入，放入後同樣要用 docker build -t docker-demo ., 因為目前在 /root/demo/ 文件中所以用。即可不用指定文件名，它會找到 Dockerfile 文件。</p>
<p>之後我們再用 dis 查看，發現 docker-demo 存在，說明構建成功，docker run -d --name dd -p 8090:8090 docker-demo:1.0, 現在把容器運行後就可以訪問了</p>
<h1 id="網絡"><a class="markdownIt-Anchor" href="#網絡">#</a> 網絡</h1>
<p>上节课我们创建了一个 Java 项目的容器，而 Java 项目往往需要访问其它各种中间件，例如 MySQL、Redis 等。现在，我们的容器之间能否互相访问呢？我们来测试一下</p>
<p>首先，我们查看下 MySQL 容器的详细信息，重点关注其中的网络 IP 地址：</p>
<figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.用基本命令，寻找Networks.bridge.IPAddress属性</span></span><br><span class="line">docker inspect mysql</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">也可以使用format过滤结果</span></span><br><span class="line">docker inspect --format=&#x27;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;println .IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27; mysql</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">得到IP地址如下：</span></span><br><span class="line">172.17.0.2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2.然后通过命令进入<span class="built_in">dd</span>容器</span></span><br><span class="line">docker exec -it dd bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3.在容器内，通过ping命令测试网络</span></span><br><span class="line">ping 172.17.0.2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">结果</span></span><br><span class="line">PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.053 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.059 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=3 ttl=64 time=0.058 ms</span><br></pre></td></tr></table></figure>
<p>发现可以互联，没有问题。</p>
<p>但是，容器的网络 IP 其实是一个虚拟的 IP，其值并不固定与某一个容器绑定，如果我们在开发时写死某个 IP，而在部署时很可能 MySQL 容器的 IP 会发生变化，连接会失败。</p>
<p>教学演示：自定义网络</p>
<figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.首先通过命令创建一个网络</span></span><br><span class="line">docker network create hmall</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2.然后查看网络</span></span><br><span class="line">docker network ls</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">结果：</span></span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">639bc44d0a87   bridge    bridge    local</span><br><span class="line">403f16ec62a2   hmall     bridge    local</span><br><span class="line">0dc0f72a0fbb   host      host      local</span><br><span class="line">cd8d3e8df47b   none      null      local</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">其中，除了hmall以外，其它都是默认的网络</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3.让<span class="built_in">dd</span>和mysql都加入该网络，注意，在加入网络时可以通过--<span class="built_in">alias</span>给容器起别名</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这样该网络内的其它容器可以用别名互相访问！</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3.1.mysql容器，指定别名为db，另外每一个容器都有一个别名是容器名</span></span><br><span class="line">docker network connect hmall mysql --alias db</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3.2.db容器，也就是我们的java项目</span></span><br><span class="line">docker network connect hmall dd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4.进入<span class="built_in">dd</span>容器，尝试利用别名访问db</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4.1.进入容器</span></span><br><span class="line">docker exec -it dd bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4.2.用db别名访问</span></span><br><span class="line">ping db</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">结果</span></span><br><span class="line">PING db (172.18.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from mysql.hmall (172.18.0.2): icmp_seq=1 ttl=64 time=0.070 ms</span><br><span class="line">64 bytes from mysql.hmall (172.18.0.2): icmp_seq=2 ttl=64 time=0.056 ms</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4.3.用容器名访问</span></span><br><span class="line">ping mysql</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">结果：</span></span><br><span class="line">PING mysql (172.18.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from mysql.hmall (172.18.0.2): icmp_seq=1 ttl=64 time=0.044 ms</span><br><span class="line">64 bytes from mysql.hmall (172.18.0.2): icmp_seq=2 ttl=64 time=0.054 ms</span><br></pre></td></tr></table></figure>
<p>OK，现在无需记住 IP 地址也可以实现容器互联了。</p>
<p>总结：</p>
<ul>
<li>在自定义网络中，可以给容器起多个别名，默认的别名是容器名本身</li>
<li>在同一个自定义网络中的容器，可以通过别名互相访问</li>
</ul>
<h1 id="手動部署java應用"><a class="markdownIt-Anchor" href="#手動部署java應用">#</a> 手動部署 JAVA 應用</h1>
<p>好了，我们已经熟悉了 Docker 的基本用法，接下来可以尝试部署项目了。<br>
在课前资料中已经提供了一个黑马商城项目给大家，如图：</p>
<p>项目说明：</p>
<ul>
<li>hmall：商城的后端代码</li>
<li>hmall-portal：商城用户端的前端代码</li>
<li>hmall-admin：商城管理端的前端代码</li>
</ul>
<p>部署的容器及端口说明：</p>
<table>
<thead>
<tr>
<th>项目</th>
<th>容器名</th>
<th>端口</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>hmall</td>
<td>hmall</td>
<td>8080</td>
<td>黑马商城后端 API 入口</td>
</tr>
<tr>
<td>hmall-portal</td>
<td>nginx</td>
<td>18080</td>
<td>黑马商城用户端入口</td>
</tr>
<tr>
<td>hmall-admin</td>
<td></td>
<td>18081</td>
<td>黑马商城管理端入口</td>
</tr>
<tr>
<td>mysql</td>
<td>mysql</td>
<td>3306</td>
<td>数据库</td>
</tr>
</tbody>
</table>
<p>在正式部署前，我们先删除之前的 nginx、dd 两个容器：</p>
<figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f nginx dd</span><br></pre></td></tr></table></figure>
<p>mysql 容器中已经准备好了商城的数据，所以就不再删除了。</p>
<p>hmall 项目是一个 maven 聚合项目，使用 IDEA 打开 hmall 项目，查看项目结构如图</p>
<p>我们要部署的就是其中的 hm-service，其中的配置文件采用了多环境的方式</p>
<p>我们将项目打包，将 hm-service 目录下的 Dockerfile 和 hm-service/target 目录下的 hm-service.jar 一起上传到虚拟机的 root 目录</p>
<p>部署项目：</p>
<figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.构建项目镜像，不指定tag，则默认为latest</span></span><br><span class="line">docker build -t hmall .</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2.查看镜像</span></span><br><span class="line">docker images</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">结果</span></span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">hmall         latest    0bb07b2c34b9   43 seconds ago   362MB</span><br><span class="line">docker-demo   1.0       49743484da68   24 hours ago     327MB</span><br><span class="line">nginx         latest    605c77e624dd   16 months ago    141MB</span><br><span class="line">mysql         latest    3218b38490ce   17 months ago    516MB</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3.创建并运行容器，并通过--network将其加入hmall网络，这样才能通过容器名访问mysql</span></span><br><span class="line">docker run -d --name hmall --network hmall -p 8080:8080 hmall</span><br></pre></td></tr></table></figure>
<p>测试，通过浏览器访问：<span class="exturl" data-url="aHR0cDovL3huLS02cXE1M3FuYjA2NWVramY2dTBhMmt6OjgwODAvc2VhcmNoL2xpc3Q=">http:// 你的虚拟机地址：8080/search/list</span></p>
<p>hmall-portal 和 hmall-admin 是前端代码，需要基于 nginx 部署。在课前资料中已经给大家提供了 nginx 的部署目录：</p>
<p>我们现在要做的就是把整个 nginx 目录上传到虚拟机的 /root 目录下：</p>
<p>然后创建 nginx 容器并完成两个挂载：</p>
<ul>
<li>把 /root/nginx/nginx.conf 挂载到 /etc/nginx/nginx.conf</li>
<li>把 /root/nginx/html 挂载到 /usr/share/nginx/html</li>
</ul>
<p>由于需要让 nginx 同时代理 hmall-portal 和 hmall-admin 两套前端资源，因此我们需要暴露两个端口：</p>
<ul>
<li>18080：对应 hmall-portal</li>
<li>18081：对应 hmall-admin<br>
 命令如下：</li>
</ul>
<figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name nginx \</span><br><span class="line">  -p 18080:18080 \</span><br><span class="line">  -p 18081:18081 \</span><br><span class="line">  -v /root/nginx/html:/usr/share/nginx/html \</span><br><span class="line">  -v /root/nginx/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">  --network hmall \</span><br><span class="line">  nginx</span><br></pre></td></tr></table></figure>
<p>测试，通过浏览器访问：<span class="exturl" data-url="aHR0cDovL3huLS1pcC0wcDNjbDM1ZWs1ZTZ1MGEya3o6MTgwODA=">http:// 你的虚拟机 ip:18080</span></p>
<h1 id="自動部署dockercompose"><a class="markdownIt-Anchor" href="#自動部署dockercompose">#</a> 自動部署 DockerCompose</h1>
<h1 id="dockercompose"><a class="markdownIt-Anchor" href="#dockercompose">#</a> DockerCompose</h1>
<p>大家可以看到，我们部署一个简单的 java 项目，其中包含 3 个容器：</p>
<ul>
<li>MySQL</li>
<li>Nginx</li>
<li>Java 项目<br>
而稍微复杂的项目，其中还会有各种各样的其它中间件，需要部署的东西远不止 3 个。如果还像之前那样手动的逐一部署，就太麻烦了。</li>
</ul>
<p>而 Docker Compose 就可以帮助我们实现多个相互关联的 Docker 容器的快速部署。它允许用户通过一个单独的 docker-compose.yml 模板文件（YAML 格式）来定义一组相关联的应用容器。</p>
<p>docker-compose 文件中可以定义多个相互关联的应用容器，每一个应用容器被称为一个服务（service）。由于 service 就是在定义某个应用的运行时参数，因此与 docker run 参数非常相似。<br>
举例来说，用 docker run 部署 MySQL 的命令如下：</p>
<figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name mysql \</span><br><span class="line">  -p 3306:3306 \</span><br><span class="line">  -e TZ=Asia/Shanghai \</span><br><span class="line">  -e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line">  -v ./mysql/data:/var/lib/mysql \</span><br><span class="line">  -v ./mysql/conf:/etc/mysql/conf.d \</span><br><span class="line">  -v ./mysql/init:/docker-entrypoint-initdb.d \</span><br><span class="line">  --network hmall</span><br><span class="line">  mysql</span><br></pre></td></tr></table></figure>
<p>如果用 docker-compose.yml 文件来定义，就是这样：</p>
<figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3.8&quot;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  mysql:</span><br><span class="line">    image: mysql</span><br><span class="line">    container_name: mysql</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;3306:3306&quot;</span><br><span class="line">    environment:</span><br><span class="line">      TZ: Asia/Shanghai</span><br><span class="line">      MYSQL_ROOT_PASSWORD: 123</span><br><span class="line">    volumes:</span><br><span class="line">      - &quot;./mysql/conf:/etc/mysql/conf.d&quot;</span><br><span class="line">      - &quot;./mysql/data:/var/lib/mysql&quot;</span><br><span class="line">    networks:</span><br><span class="line">      - new</span><br><span class="line">networks:</span><br><span class="line">  new:</span><br><span class="line">    name: hmall</span><br></pre></td></tr></table></figure>
<p>对比如下：</p>
<table>
<thead>
<tr>
<th>docker run 参数</th>
<th>docker compose 指令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>–name</td>
<td>container_name</td>
<td>容器名称</td>
</tr>
<tr>
<td>-p</td>
<td>ports</td>
<td>端口映射</td>
</tr>
<tr>
<td>-e</td>
<td>environment</td>
<td>环境变量</td>
</tr>
<tr>
<td>-v</td>
<td>volumes</td>
<td>数据卷配置</td>
</tr>
<tr>
<td>–network</td>
<td>networks</td>
<td>网络</td>
</tr>
</tbody>
</table>
<p>明白了其中的对应关系，相信编写 docker-compose 文件应该难不倒大家。</p>
<p>黑马商城部署文件：</p>
<figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3.8&quot;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  mysql:</span><br><span class="line">    image: mysql</span><br><span class="line">    container_name: mysql</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;3306:3306&quot;</span><br><span class="line">    environment:</span><br><span class="line">      TZ: Asia/Shanghai</span><br><span class="line">      MYSQL_ROOT_PASSWORD: 123</span><br><span class="line">    volumes:</span><br><span class="line">      - &quot;./mysql/conf:/etc/mysql/conf.d&quot;</span><br><span class="line">      - &quot;./mysql/data:/var/lib/mysql&quot;</span><br><span class="line">      - &quot;./mysql/init:/docker-entrypoint-initdb.d&quot;</span><br><span class="line">    networks:</span><br><span class="line">      - hm-net</span><br><span class="line">  hmall:</span><br><span class="line">    build: </span><br><span class="line">      context: .</span><br><span class="line">      dockerfile: Dockerfile</span><br><span class="line">    container_name: hmall</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8080:8080&quot;</span><br><span class="line">    networks:</span><br><span class="line">      - hm-net</span><br><span class="line">    depends_on:</span><br><span class="line">      - mysql</span><br><span class="line">  nginx:</span><br><span class="line">    image: nginx</span><br><span class="line">    container_name: nginx</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;18080:18080&quot;</span><br><span class="line">      - &quot;18081:18081&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - &quot;./nginx/nginx.conf:/etc/nginx/nginx.conf&quot;</span><br><span class="line">      - &quot;./nginx/html:/usr/share/nginx/html&quot;</span><br><span class="line">    depends_on:</span><br><span class="line">      - hmall</span><br><span class="line">    networks:</span><br><span class="line">      - hm-net</span><br><span class="line">networks:</span><br><span class="line">  hm-net:</span><br><span class="line">    name: hmall</span><br></pre></td></tr></table></figure>
<p>编写好 docker-compose.yml 文件，就可以部署项目了。常见的命令：<br>
基本语法如下：</p>
<figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose [OPTIONS] [COMMAND]</span><br></pre></td></tr></table></figure>
<p>其中，OPTIONS 和 COMMAND 都是可选参数，比较常见的有：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>参数或指令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Options</td>
<td>-f</td>
<td>指定 compose 文件的路径和名称</td>
</tr>
<tr>
<td></td>
<td>-p</td>
<td>指定 project 名称。project 就是当前 compose 文件中设置的多个 service 的集合，是逻辑概念</td>
</tr>
<tr>
<td>Commands</td>
<td>up</td>
<td>创建并启动所有 service 容器</td>
</tr>
<tr>
<td></td>
<td>down</td>
<td>停止并移除所有容器、网络</td>
</tr>
<tr>
<td></td>
<td>ps</td>
<td>列出所有启动的容器</td>
</tr>
<tr>
<td></td>
<td>logs</td>
<td>查看指定容器的日志</td>
</tr>
<tr>
<td></td>
<td>stop</td>
<td>停止容器</td>
</tr>
<tr>
<td></td>
<td>start</td>
<td>启动容器</td>
</tr>
<tr>
<td></td>
<td>restart</td>
<td>重启容器</td>
</tr>
<tr>
<td></td>
<td>top</td>
<td>查看运行的进程</td>
</tr>
<tr>
<td></td>
<td>exec</td>
<td>在指定的运行中容器中执行命令</td>
</tr>
</tbody>
</table>
<figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.进入root目录</span></span><br><span class="line">cd /root</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2.删除旧容器</span></span><br><span class="line">docker rm -f $(docker ps -qa)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3.删除hmall镜像</span></span><br><span class="line">docker rmi hmall</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4.清空MySQL数据</span></span><br><span class="line">rm -rf mysql/data</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5.启动所有, -d 参数是后台启动</span></span><br><span class="line">docker compose up -d</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">结果：</span></span><br><span class="line">[+] Building 15.5s (8/8) FINISHED</span><br><span class="line"> =&gt; [internal] load build definition from Dockerfile                                    0.0s</span><br><span class="line"> =&gt; =&gt; transferring dockerfile: 358B                                                    0.0s</span><br><span class="line"> =&gt; [internal] load .dockerignore                                                       0.0s</span><br><span class="line"> =&gt; =&gt; transferring context: 2B                                                         0.0s</span><br><span class="line"> =&gt; [internal] load metadata for docker.io/library/openjdk:11.0-jre-buster             15.4s</span><br><span class="line"> =&gt; [1/3] FROM docker.io/library/openjdk:11.0-jre-buster@sha256:3546a17e6fb4ff4fa681c3  0.0s</span><br><span class="line"> =&gt; [internal] load build context                                                       0.0s</span><br><span class="line"> =&gt; =&gt; transferring context: 98B                                                        0.0s</span><br><span class="line"> =&gt; CACHED [2/3] RUN ln -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; echo   0.0s</span><br><span class="line"> =&gt; CACHED [3/3] COPY hm-service.jar /app.jar                                           0.0s</span><br><span class="line"> =&gt; exporting to image                                                                  0.0s</span><br><span class="line"> =&gt; =&gt; exporting layers                                                                 0.0s</span><br><span class="line"> =&gt; =&gt; writing image sha256:32eebee16acde22550232f2eb80c69d2ce813ed099640e4cfed2193f71  0.0s</span><br><span class="line"> =&gt; =&gt; naming to docker.io/library/root-hmall                                           0.0s</span><br><span class="line">[+] Running 4/4</span><br><span class="line"> ✔ Network hmall    Created                                                             0.2s</span><br><span class="line"> ✔ Container mysql  Started                                                             0.5s</span><br><span class="line"> ✔ Container hmall  Started                                                             0.9s</span><br><span class="line"> ✔ Container nginx  Started                                                             1.5s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">6.查看镜像</span></span><br><span class="line">docker compose images</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">结果</span></span><br><span class="line">CONTAINER           REPOSITORY          TAG                 IMAGE ID            SIZE</span><br><span class="line">hmall               root-hmall          latest              32eebee16acd        362MB</span><br><span class="line">mysql               mysql               latest              3218b38490ce        516MB</span><br><span class="line">nginx               nginx               latest              605c77e624dd        141MB</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">7.查看容器</span></span><br><span class="line">docker compose ps</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">结果</span></span><br><span class="line">NAME                IMAGE               COMMAND                  SERVICE             CREATED             STATUS              PORTS</span><br><span class="line">hmall               root-hmall          &quot;java -jar /app.jar&quot;     hmall               54 seconds ago      Up 52 seconds       0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp</span><br><span class="line">mysql               mysql               &quot;docker-entrypoint.s…&quot;   mysql               54 seconds ago      Up 53 seconds       0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp</span><br><span class="line">nginx               nginx               &quot;/docker-entrypoint.…&quot;   nginx               54 seconds ago      Up 52 seconds       80/tcp, 0.0.0.0:18080-18081-&gt;18080-18081/tcp, :::18080-18081-&gt;18080-18081/tcp</span><br></pre></td></tr></table></figure>
<p>打开浏览器，访问：<span class="exturl" data-url="aHR0cDovL3lvdXJJcDo4MDgw">http://yourIp:8080</span></p>
<img data-src="https://i.makeagif.com/media/9-15-2015/bQkqor.gif" class="abc" width="600" height="350"><div class="tags"><a href="/John/tags/docker/" rel="tag"><i class="ic i-tag"></i>docker</a></div></div><footer><div class="meta"><span class="item"><span class="icon"><i class="ic i-calendar-check"></i></span><span class="text">更新於</span><time title="修改時間：2023-12-03 23:15:06" itemprop="dateModified" datetime="2023-12-03T23:15:06+08:00">2023-12-03</time></span></div><div id="copyright"><ul><li class="author"><strong>作者：</strong>John<i class="ic i-at"><em>@</em></i>一切都是過程</li><li class="link"><strong>文章連結：</strong><a href="https://superrjohn.github.io/John/2023/11/30/java/docker/docker" title="Docker">https://superrjohn.github.io/John/2023/11/30/java/docker/docker</a></li><li class="license"><strong>版權聲明：</strong>本網誌所有文章除特別聲明外，均採用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" rel="noopener" target="_blank"><i class="ic i-creative-commons"><em>(CC)</em></i>BY-NC-SA</a> 許可協議。轉載請註明出處！</li></ul></div></footer></article></div><div class="post-nav"><div class="item left"><a href="/John/2023/11/08/java/pay/alipay" rel="prev" itemprop="url" data-background-image="https:&#x2F;&#x2F;e1.pxfuel.com&#x2F;desktop-wallpaper&#x2F;629&#x2F;30&#x2F;desktop-wallpaper-cyberpunk-2077-1920x1080-cyberpunk-2077-pc.jpg" title="整合支付寶"><span class="type">上一篇</span><span class="category"><i class="ic i-flag"></i>支付</span><h3>整合支付寶</h3></a></div><div class="item right"><a href="/John/2024/01/16/java/hexo/Hexo" rel="next" itemprop="url" data-background-image="https:&#x2F;&#x2F;a-static.besthdwallpaper.com&#x2F;moonlit-night-with-loneliness-wallpaper-1440x1080-121512_22.jpg" title="Hexo快速部署!"><span class="type">下一篇</span><span class="category"><i class="ic i-flag"></i>java</span><h3>Hexo快速部署!</h3></a></div></div><div class="wrap" id="wcomments"></div><script type="module" data-pjax="data-pjax">import { init } from 'https://unpkg.com/@waline/client@v2/dist/waline.mjs';

setTimeout(function () {
    init({
        el: '#wcomments',
        serverURL: 'https://superr.zeabur.app',
        lang: 'zh-CN',
        locale: {},
        emoji: ["https://unpkg.com/@waline/emojis@1.0.1/weibo","https://unpkg.com/@waline/emojis@1.0.1/alus","https://unpkg.com/@waline/emojis@1.0.1/bilibili","https://unpkg.com/@waline/emojis@1.0.1/qq","https://unpkg.com/@waline/emojis@1.0.1/tieba","https://unpkg.com/@waline/emojis@1.0.1/tw-emoji"],
        meta: ["nick","mail","link"],
        requiredMeta: ["nick","mail"],
        wordLimit: 0,
        pageSize: 10,
        pageview: false,
        path: window.location.pathname,
        dark: 'html[data-theme="dark"]'
    });
}, 1000)</script></div><div id="sidebar"><div class="inner"><div class="panels"><div class="inner"><div class="contents panel pjax" data-title="文章目錄"><ol class="toc"><li class="toc-item toc-level-1"><a class="toc-link" href="#%E5%AE%89%E8%A3%9Ddocker%E6%89%80%E9%9C%80%E7%9A%84%E5%89%8D%E7%BD%AE"><span class="toc-number">1.</span> <span class="toc-text"> 安裝 Docker 所需的前置</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%87%86%E5%A4%87linux%E7%8E%AF%E5%A2%83"><span class="toc-number">1.1.</span> <span class="toc-text"> 准备 Linux 环境</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%AE%89%E8%A3%9Ddocker"><span class="toc-number">1.1.1.</span> <span class="toc-text"> 安裝 docker</span></a></li></ol></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E5%BF%AB%E9%80%9F%E5%85%A5%E9%96%80"><span class="toc-number">2.</span> <span class="toc-text"> 快速入門</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E9%83%A8%E7%BD%B2mysql"><span class="toc-number">2.1.</span> <span class="toc-text"> 部署 MySQL</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E5%91%BD%E4%BB%A4%E8%A7%A3%E8%AE%80"><span class="toc-number">3.</span> <span class="toc-text"> 命令解讀</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#dokcer%E5%B8%B8%E8%A6%8B%E5%91%BD%E4%BB%A4"><span class="toc-number">3.1.</span> <span class="toc-text"> Dokcer 常見命令</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E7%94%A8nginx%E6%BC%94%E7%A4%BA"><span class="toc-number">3.2.</span> <span class="toc-text"> 用 nginx 演示</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E8%B5%B7%E5%88%A5%E5%90%8D"><span class="toc-number">3.3.</span> <span class="toc-text"> 起別名</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E6%95%B8%E6%93%9A%E5%8D%B7"><span class="toc-number">4.</span> <span class="toc-text"> 數據卷</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E4%BB%A5nginx%E7%82%BA%E4%BE%8B"><span class="toc-number">4.1.</span> <span class="toc-text"> 以 nginx 為例</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%AE%B9%E5%99%A8%E5%89%B5%E5%BB%BA%E5%BE%8C%E5%86%8D%E6%8E%9B%E8%BC%89%E6%95%B8%E6%93%9A%E5%8D%B7"><span class="toc-number">4.2.</span> <span class="toc-text"> 容器創建後再掛載數據卷</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E8%87%AA%E5%AE%9A%E7%BE%A9%E9%8F%A1%E5%83%8F"><span class="toc-number">5.</span> <span class="toc-text"> 自定義鏡像</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#dockerfile"><span class="toc-number">5.1.</span> <span class="toc-text"> Dockerfile</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E7%B6%B2%E7%B5%A1"><span class="toc-number">6.</span> <span class="toc-text"> 網絡</span></a></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E6%89%8B%E5%8B%95%E9%83%A8%E7%BD%B2java%E6%87%89%E7%94%A8"><span class="toc-number">7.</span> <span class="toc-text"> 手動部署 JAVA 應用</span></a></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E8%87%AA%E5%8B%95%E9%83%A8%E7%BD%B2dockercompose"><span class="toc-number">8.</span> <span class="toc-text"> 自動部署 DockerCompose</span></a></li><li class="toc-item toc-level-1"><a class="toc-link" href="#dockercompose"><span class="toc-number">9.</span> <span class="toc-text"> DockerCompose</span></a></li></ol></div><div class="related panel pjax" data-title="系列文章"><ul><li ><a href="/John/2023/10/26/java/radis/radis" rel="bookmark" title="Redis 緩存優化">Redis 緩存優化</a></li><li ><a href="/John/2023/10/26/java/rabbitmq/rabbitmq" rel="bookmark" title="Hello RabbitMq!">Hello RabbitMq!</a></li><li ><a href="/John/2023/10/27/java/springMVC/UserBook-Web" rel="bookmark" title="手寫springMVC!">手寫springMVC!</a></li><li ><a href="/John/2023/10/30/java/SpringSecurity/SpringSecurity" rel="bookmark" title="SpringSecurity 認證授權">SpringSecurity 認證授權</a></li><li ><a href="/John/2023/11/03/java/SpringSecurity/WeChat_login" rel="bookmark" title="SpringSecurity 微信登錄">SpringSecurity 微信登錄</a></li><li ><a href="/John/2023/11/07/java/radis/redis_interview" rel="bookmark" title="Redis面試題整理">Redis面試題整理</a></li><li ><a href="/John/2023/11/08/java/pay/alipay" rel="bookmark" title="整合支付寶">整合支付寶</a></li><li  class="active"><a href="/John/2023/11/30/java/docker/docker" rel="bookmark" title="Docker">Docker</a></li><li ><a href="/John/2024/01/16/java/hexo/Hexo" rel="bookmark" title="Hexo快速部署!">Hexo快速部署!</a></li></ul></div><div class="overview panel" data-title="本站概要"><div class="author" itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><img class="image" itemprop="image" alt="John" data-src="/John/assets/404.png"/><p class="name" itemprop="name">John</p><div class="description" itemprop="description"></div></div><nav class="state"><div class="item posts"><a href="/John/archives/"><span class="count">10</span><span class="name">文章</span></a></div><div class="item categories"><a href="/John/categories/"><span class="count">6</span><span class="name">分類</span></a></div><div class="item tags"><a href="/John/tags/"><span class="count">11</span><span class="name">標籤</span></a></div></nav><div class="social"><a href="https://github.com/superrjohn" class="item github" rel="noopener" title="https:&#x2F;&#x2F;github.com&#x2F;superrjohn" target="_blank"><i class="ic i-github"></i></a><a href="https://music.163.com/#/user/home?id=8923804515" class="item music" rel="noopener" title="https:&#x2F;&#x2F;music.163.com&#x2F;#&#x2F;user&#x2F;home?id&#x3D;8923804515" target="_blank"><i class="ic i-cloud-music"></i></a><a href="https://www.youtube.com/@John-ql5uv" class="item youtube" rel="noopener" title="https:&#x2F;&#x2F;www.youtube.com&#x2F;@John-ql5uv" target="_blank"><i class="ic i-youtube"></i></a></div><div class="menu"><li class="item"><a href="/John/" rel="section"><i class="ic i-home"></i>首頁</a></li><li class="item dropdown"><a href="javascript:void(0);"><i class="ic i-user"></i>關於</a><ul class="submenu"><li class="item"><a href="/John/about/" rel="section"><i class="ic i-user"></i>關於本站</a></li></ul></li><li class="item dropdown"><a href="javascript:void(0);"><i class="ic i-feather"></i>文章</a><ul class="submenu"><li class="item"><a href="/John/archives/" rel="section"><i class="ic i-list-alt"></i>歸檔</a></li><li class="item"><a href="/John/categories/" rel="section"><i class="ic i-th"></i>分類</a></li><li class="item"><a href="/John/tags/" rel="section"><i class="ic i-tags"></i>標籤</a></li></ul></li></div></div></div></div><ul id="quick"><li class="prev pjax"><a href="/John/2024/01/16/java/hexo/Hexo" rel="prev" title="上一篇"><i class="ic i-chevron-left"></i></a></li><li class="up"><i class="ic i-arrow-up"></i></li><li class="down"><i class="ic i-arrow-down"></i></li><li class="next pjax"><a href="/John/2023/11/08/java/pay/alipay" rel="next" title="下一篇"><i class="ic i-chevron-right"></i></a></li><li class="percent"></li></ul></div></div><div class="dimmer"></div></div></main><footer id="footer"><div class="inner"><div class="widgets"><div class="rpost pjax"><h2>隨機文章</h2><ul><li class="item"><div class="breadcrumb"><a href="/John/categories/java/" title="分類於java">java</a></div><span><a href="/John/2024/01/16/java/hexo/Hexo">Hexo快速部署!</a></span></li><li class="item"><div class="breadcrumb"><a href="/John/categories/java/" title="分類於java">java</a><i class="ic i-angle-right"></i><a href="/John/categories/java/springMVC/" title="分類於springMVC">springMVC</a></div><span><a href="/John/2023/10/27/java/springMVC/UserBook-Web">手寫springMVC!</a></span></li><li class="item"><div class="breadcrumb"><a href="/John/categories/java/" title="分類於java">java</a><i class="ic i-angle-right"></i><a href="/John/categories/java/SpringSecurity/" title="分類於SpringSecurity">SpringSecurity</a></div><span><a href="/John/2023/11/03/java/SpringSecurity/WeChat_login">SpringSecurity 微信登錄</a></span></li><li class="item"><div class="breadcrumb"><a href="/John/categories/java/" title="分類於java">java</a><i class="ic i-angle-right"></i><a href="/John/categories/java/pay/" title="分類於支付">支付</a></div><span><a href="/John/2023/11/08/java/pay/alipay">整合支付寶</a></span></li><li class="item"><div class="breadcrumb"><a href="/John/categories/code/" title="分類於code">code</a></div><span><a href="/John/2024/01/16/code/code1">遞迴刷題</a></span></li><li class="item"><div class="breadcrumb"><a href="/John/categories/java/" title="分類於java">java</a><i class="ic i-angle-right"></i><a href="/John/categories/java/SpringSecurity/" title="分類於SpringSecurity">SpringSecurity</a></div><span><a href="/John/2023/10/30/java/SpringSecurity/SpringSecurity">SpringSecurity 認證授權</a></span></li><li class="item"><div class="breadcrumb"><a href="/John/categories/java/" title="分類於java">java</a><i class="ic i-angle-right"></i><a href="/John/categories/java/radis-rabbitmq/" title="分類於中間件">中間件</a></div><span><a href="/John/2023/10/26/java/rabbitmq/rabbitmq">Hello RabbitMq!</a></span></li><li class="item"><div class="breadcrumb"><a href="/John/categories/java/" title="分類於java">java</a><i class="ic i-angle-right"></i><a href="/John/categories/java/radis-rabbitmq/" title="分類於中間件">中間件</a></div><span><a href="/John/2023/11/07/java/radis/redis_interview">Redis面試題整理</a></span></li><li class="item"><div class="breadcrumb"><a href="/John/categories/java/" title="分類於java">java</a><i class="ic i-angle-right"></i><a href="/John/categories/java/radis-rabbitmq/" title="分類於中間件">中間件</a></div><span><a href="/John/2023/10/26/java/radis/radis">Redis 緩存優化</a></span></li><li class="item"><div class="breadcrumb"><a href="/John/categories/java/" title="分類於java">java</a></div><span><a href="/John/2023/11/30/java/docker/docker">Docker</a></span></li></ul></div><div class="rpost pjax"><h2>最新評論</h2><ul class="leancloud-recent-comment" id="new-comment"><li class="item" v-for="com in coms"><a v-bind:href="root + com.href" data-pjax-state="data-pjax-state"><span class="breadcrumb">{{com.nick}} @ {{com.time}}</span><span>{{com.text}}<br/></span></a></li></ul></div></div><div class="status"><div class="copyright">&copy; 2022 -<span itemprop="copyrightYear">2024</span><span class="with-love"><i class="ic i-sakura rotate"></i></span><span class="author" itemprop="copyrightHolder">John @ john's blog</span></div><div class="count"><span class="post-meta-item-icon"><i class="ic i-chart-area"></i></span><span title="總字數">132k 字</span><span class="post-meta-divider">|</span><span class="post-meta-item-icon"><i class="ic i-coffee"></i></span><span title="所需總閱讀時間">2:01</span></div><div class="powered-by">基於 <a href="https://hexo.io/" rel="noopener" target="_blank">Hexo</a> & Theme.<a href="https://github.com/theme-shoka-x/hexo-theme-shokaX/" rel="noopener" target="_blank">ShokaX</a></div></div></div></footer></div><script data-config type="text/javascript">var LOCAL = {
        path: `2023/11/30/java/docker/docker`,
        favicon: {
        show: `（●´3｀●）復活成功`,
        hide: `(´Д｀)瀏覽器崩潰啦`
    },
    search: {
        placeholder: "文章搜尋",
        empty: "關於 「 ${query} 」 ，什麼也沒搜到",
        stats: "${time} ms 內找到 ${hits} 條結果"
    },
    valine: true,
    chart: false,
    copy_tex: false,
    katex: false,
    mermaid: false,
    audio: undefined,
    fancybox: true,
    nocopy: false,
    outime: true,
    template: `<div class="note warning"><p><span class="label warning">文章時效性提示</span><br>這是一篇發佈於 {{publish}} 天前，最後一次更新在 {{updated}} 天前的文章，部分信息可能已經發生改變，請注意甄別。</p></div>`,
    quiz: {
        choice: `單選題`,
        multiple: `多選題`,
        true_false: `判斷題`,
        essay: `問答題`,
        gap_fill: `填空題`,
        mistake: `錯題備註`
    },
    ignores: [
        (uri) => uri.includes('#'),
        (uri) => new RegExp(LOCAL.path + '$').test(uri),
            []
    ]
};
</script><script src="https://polyfill.io/v3/polyfill.min.js?features=default,fetch"></script><script src="https://lf9-cdn-tos.bytecdntp.com/cdn/expire-6-M/pace/1.0.2/pace.min.js"></script><script src="https://lf9-cdn-tos.bytecdntp.com/cdn/expire-6-M/algoliasearch/4.12.1/algoliasearch-lite.umd.min.js"></script><script src="https://lf9-cdn-tos.bytecdntp.com/cdn/expire-6-M/instantsearch.js/4.39.0/instantsearch.production.min.js"></script><script src="https://lf9-cdn-tos.bytecdntp.com/cdn/expire-6-M/quicklink/2.2.0/quicklink.umd.min.js"></script><script src="https://lf9-cdn-tos.bytecdntp.com/cdn/expire-6-M/??jquery/3.5.1/jquery.min.js,fancybox/3.5.7/jquery.fancybox.min.js,justifiedGallery/3.8.1/js/jquery.justifiedGallery.min.js" async></script><script src="https://lf9-cdn-tos.bytecdntp.com/cdn/expire-6-M/KaTeX/0.15.2/contrib/copy-tex.min.js" async></script><script src="/John/js/app.js?v=0.3.6"></script>
    <script type="module" data-pjax>
        let items = []
        import { RecentComments } from 'https://unpkg.com/@waline/client@v2/dist/waline.mjs'
        RecentComments({
          serverURL: 'https://superr.zeabur.app',
          count: 10,
        }).then(({ comments }) => {
          comments.forEach(function (item) {
              let cText = (item.orig.length > 50) ? item.orig.substring(0,50)+'...' : item.orig
              item.url = item.url !== '/' ?  '/' + item.url : item.url;
              const siteLink = item.url + "#" + item.objectId
              items.push({
                  href: siteLink,
                  nick: item.nick,
                  time: item.insertedAt.split('T').shift(),
                  text: cText
              })
          })
          Vue.createApp({
            data() {
                return {
                    coms: items,
                    root: '/John'
                }
            }
          }).mount('#new-comment')
        }).catch(function (err) {
          console.error(err)
        })
    </script>
    </body></html>