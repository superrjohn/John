<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://superrjohn.github.io/John</id>
    <title>一切都是過程 • Posts by &#34;中間件&#34; category</title>
    <link href="https://superrjohn.github.io/John" />
    <updated>2023-11-07T14:59:14.136Z</updated>
    <category term="hexo" />
    <category term="RabbitMQ" />
    <category term="Radis" />
    <category term="SpringSecurity" />
    <category term="SpringMVC" />
    <category term="Pinia" />
    <category term="Vue2" />
    <category term="SpringBoot" />
    <category term="支付" />
    <entry>
        <id>https://superrjohn.github.io/John/2023/11/07/java/radis/redis_interview</id>
        <title>Redis面試題整理</title>
        <link rel="alternate" href="https://superrjohn.github.io/John/2023/11/07/java/radis/redis_interview"/>
        <content type="html">&lt;p&gt;前言:&lt;br&gt;
 內容出自&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXlUNDExSDdZSy8/dmRfc291cmNlPTA5ZDY2YTFmMDcyNWM1NDU5MzQ4OTJmMDhlZjZjYmE1&#34;&gt;黑馬高頻面試題&lt;/span&gt;&lt;br&gt;
經消化整理內容後再作出記錄&lt;/p&gt;
&lt;h1 id=&#34;緩存穿透&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#緩存穿透&#34;&gt;#&lt;/a&gt; 緩存穿透&lt;/h1&gt;
&lt;p&gt;緩存穿透：查詢一個不存在的數據，因 MySQL 查不到數據導致緩存也沒有數據，所以每次都會請求數據庫&lt;br&gt;
解決方法一：查詢 MYSQL 也沒有數據時，返回空值到緩存，這方法簡單，但會消耗內存，有可能發生不一致問題&lt;br&gt;
解決方法二：布隆過濾器，實現模複雜，但查詢空間和時間都大幅提升&lt;/p&gt;
&lt;h1 id=&#34;緩存擊穿&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#緩存擊穿&#34;&gt;#&lt;/a&gt; 緩存擊穿&lt;/h1&gt;
&lt;p&gt;緩存擊穿：某一個熱門 KEY 的過期時間過期時，剛好對這 KEY 有大量的請求，因為沒有緩存阻擋所以直接到達數據庫，可能會把 DB 壓垮&lt;br&gt;
解決一：在強一致場景用互斥鎖，因為在線程加上鎖後，獲得鎖的線程才能查數據庫，防止高併發場景下請求數據庫，使用鎖的關係性能較差&lt;br&gt;
解決二：在高可用的場景用邏輯過期，因為這個 KEY 是熱門 KEY 所以不設過期時間手動維護，但設邏輯過期值，當重置邏輯過期時間更新數據時，用戶還是可以查詢到緩存，但不保證數據絕對一致&lt;/p&gt;
&lt;h1 id=&#34;緩存雪崩&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#緩存雪崩&#34;&gt;#&lt;/a&gt; 緩存雪崩&lt;/h1&gt;
&lt;p&gt;緩存雪崩：指同一時間大量的 KEY 同時過期或者 redis 服務宕機，導致大量請求到數據庫，造成壓力&lt;br&gt;
解決 KEY 失效：給 key 設失效時間為隨機值&lt;br&gt;
解決宕機：集群、降級限流、多級緩存&lt;/p&gt;
&lt;h1 id=&#34;數據庫與redis如何進行同步雙寫一致&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#數據庫與redis如何進行同步雙寫一致&#34;&gt;#&lt;/a&gt; 數據庫與 redis 如何進行同步 (雙寫一致)&lt;/h1&gt;
&lt;p&gt;改數據庫的數據時，同時更新緩存，讓數據庫和緩存保持一致&lt;br&gt;
強一致時，可以用排他鎖阻塞其他線程寫操作&lt;br&gt;
高可用時，可以利用 MQ, 讓數據最終一致&lt;/p&gt;
&lt;h1 id=&#34;緩存持久化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#緩存持久化&#34;&gt;#&lt;/a&gt; 緩存持久化&lt;/h1&gt;
&lt;p&gt;有 AOF 和 RDB 兩種方法，通常兩種一起使用&lt;/p&gt;
&lt;p&gt;AOF:redis 每一個寫入命令都被記錄在 AOF 文件，修改 redis.com 配置文件開啟，因為記錄命令所以文件較大&lt;br&gt;
 RDB:background save 時主進程 fork 到子進程，複製頁表給子進程，頁表就是虛擬機與內存之間的映射關係，而子進程會將新數據寫入磁盤。&lt;/p&gt;
&lt;h1 id=&#34;緩存過期策略&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#緩存過期策略&#34;&gt;#&lt;/a&gt; 緩存過期策略&lt;/h1&gt;
&lt;p&gt;定期刪除：每隔一段時間，查詢一些 KEY 刪除里面過期的 KEY, 可以修改配置文件調整清理模式，對 CPU 和內存較好，但刪除時間和頻率難以確定&lt;br&gt;
惰性刪除：當我們查詢 KEY 時，會檢查其是否過期，過期就刪除，反之返回 KEY, 對 CPU 友好，但對內存不友好&lt;/p&gt;
&lt;h1 id=&#34;淘汰策略&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#淘汰策略&#34;&gt;#&lt;/a&gt; 淘汰策略&lt;/h1&gt;
&lt;p&gt;當 redis 中的內存不夠時，此時又有新的 KEY 添加，redis 會以某種規則將內存中的數據刪除&lt;br&gt;
有 8 種不同的策略，最常用的有 2 種:&lt;br&gt;
LRU: 最近最少使用，用當前時間減去最後一次訪問時間，值愈大則淘汰優先愈高&lt;br&gt;
 LFU: 最少頻率使用，會統計每個 KEY 的訪問頻率，值愈小淘汰優先愈高&lt;/p&gt;
&lt;p&gt;1. 優先使用 allkeys-lru, 把最近常訪問的數據留在緩存&lt;br&gt;
 2. 訪問頻率差不多，可以用 allkeys-random&lt;br&gt;
3. 業務有置頂需求，可以用 volatile-lru&lt;br&gt;
4. 如果數據庫有 1000 萬數據，Redis 只能緩存 20 萬數據，如何保證 Redis 中都是熱點數據？&lt;br&gt;
 使用 allkeys-lru 淘汰策略，留下來的都是熱點數據。&lt;br&gt;
5.Redis 的內存用完會發生什麼事？&lt;br&gt;
 要看數據淘汰策略是什麼，如果是默認配置 (noeviction), 不允許存入新數據，會報錯&lt;/p&gt;
&lt;h1 id=&#34;如何實現分布式鎖&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#如何實現分布式鎖&#34;&gt;#&lt;/a&gt; 如何實現分布式鎖&lt;/h1&gt;
&lt;p&gt;使用場景：定時任務，搶單，冪等性場景&lt;br&gt;
問題：因為在集群下鎖在自己的 JVM 虛擬機上，只能鎖住自己的服務，所以集群下鎖會失效，導致數據不一致&lt;br&gt;
解決：利用 redissonClient, 讓多台服務器搶同一把鎖，而且有 WatchDog 監聽，確保業務成功，同一線程下鎖可以重入&lt;/p&gt;
&lt;h1 id=&#34;主從同步&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#主從同步&#34;&gt;#&lt;/a&gt; 主從同步&lt;/h1&gt;
&lt;p&gt;好處：提高併發，讀寫分離&lt;/p&gt;
&lt;p&gt;全量同步：從會向主請求數據同步，主會檢查從有沒有 replId, 沒有則說明第一次同步，返回數據信息 replId、offset, 執行 BgSave 生成 RDB 文&lt;br&gt;
增量同步：如果主檢查從不是第一次同步，會查看 offset 值，根據主與從的 offset 差值，同步後期變化的數據&lt;/p&gt;
&lt;h1 id=&#34;哨兵機制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#哨兵機制&#34;&gt;#&lt;/a&gt; 哨兵機制&lt;/h1&gt;
&lt;p&gt;1️⃣監控：哨兵會向 redis 集群發送 PING 命令，如果配置發現實例未定時間響應 PONG, 則認為該實例主觀下線，或者超過指定數量的 sentinel 都認為該實例下線，則客觀下線。&lt;br&gt;
主節點上線後，哨兵會根據 offset 愈大的從節點成為主，因為 offset 值愈大說明數據愈完整&lt;/p&gt;
&lt;p&gt;2️⃣自動故障恢復：如果主節點故障，Sentinel 會將一個 slave 提升為 master。&lt;/p&gt;
&lt;p&gt;3️⃣通知：Sentinel 充當 Redis 客戶端的服務發現來源，當集群發生故障轉移時，會將最新信息推送給 redis 的客戶端&lt;/p&gt;
&lt;p&gt;4️⃣哨兵腦裂：集群腦裂是由於主節點和從節點和 sentinel 處於不同的網路分區，使得 sentinel 沒有能夠心跳感知到主節點，所以通過選舉的方式提升了一個從節點為主，這樣就存在兩個 master, 就像大腦分裂一樣，會導致客戶端還在舊的主節點那寫入數據，新節點無法同步數據，當網路恢復後，sentinel 會將舊的主節點降為從節點，這時再從新的 master 同步數據，就會導致數據掉失&lt;/p&gt;
&lt;p&gt;解決：可以修改 redis 的配置，可以設置最少的從節點數量以及縮短主從數據同步的延遲時間，達不到要求就拒絕請求，可以避免大量數據掉失&lt;/p&gt;
&lt;h1 id=&#34;分片集群&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分片集群&#34;&gt;#&lt;/a&gt; 分片集群&lt;/h1&gt;
&lt;p&gt;主從和哨兵解決了高可用和高併發，但沒有解決:&lt;br&gt;
1️⃣海量數據存儲問題&lt;br&gt;
2️⃣高併發寫的問題&lt;/p&gt;
&lt;p&gt;使用分片集群可以解決上述問題:&lt;br&gt;
1️⃣集群中有多個 master, 每個 master 可以保存不同數據，假設一個主保存 20W 數據，3 個就可以保存 60W 數據&lt;/p&gt;
&lt;p&gt;2️⃣每個主節點可以有多個從節點&lt;/p&gt;
&lt;p&gt;3️⃣主節點之間可以通過 ping 監聽彼此&lt;/p&gt;
&lt;p&gt;4️⃣客戶端請求可以訪問集群任意節點，最終都會被轉發到正確節點&lt;/p&gt;
&lt;p&gt;5️⃣分片集群引入了 hash 槽概念，redis 集群有 16384 個哈希槽，每個 key 通過算法後對 16384 取餘數，如果想將一類 KEY 放在一起提升性能，key 的命名可以這樣 set {F1A} name john&lt;/p&gt;
&lt;h1 id=&#34;redis的io多路複用模型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redis的io多路複用模型&#34;&gt;#&lt;/a&gt; Redis 的 IO 多路複用模型&lt;/h1&gt;
&lt;p&gt;1️⃣redis 是單程線，但為什麼那麼快？因為 redis 是純內存操作，執行速度非常快&lt;/p&gt;
&lt;p&gt;2️⃣採用單線程，避免不必要的上下文切換，多程線還要考慮線程安全&lt;/p&gt;
&lt;p&gt;3️⃣使用 IO 多路複用模型&lt;/p&gt;
&lt;p&gt;所以 redis 是純內存操作，它的性能瓶頸是網路延遲而不是執行速度。&lt;/p&gt;
&lt;p&gt;而 Redis 網路模型通過 IO 多路複用提高性能，而且支持各種不同的多路複用實現，將這些實現進行封裝，提供了統一的高性能事件庫&lt;/p&gt;
&lt;p&gt;所以 redis 在 IO 多路複用的基礎下，添加了自己的事件派發，將寫數據和讀數據改為多程線接收數據，增加命令轉換速度，命令執行時是依然是單線程&lt;/p&gt;
&lt;img data-src=&#34;https://usagif.com/wp-content/uploads/gifs/thanks-for-watching-9.gif&#34; class=&#34;abc&#34; width=&#34;600&#34; height=&#34;350&#34;&gt;</content>
        <category term="Radis" />
        <updated>2023-11-07T14:59:14.136Z</updated>
    </entry>
    <entry>
        <id>https://superrjohn.github.io/John/2023/10/26/java/rabbitmq/rabbitmq</id>
        <title>Hello RabbitMq!</title>
        <link rel="alternate" href="https://superrjohn.github.io/John/2023/10/26/java/rabbitmq/rabbitmq"/>
        <content type="html">&lt;p&gt;ToDo: 待做&lt;/p&gt;
</content>
        <category term="RabbitMQ" />
        <updated>2023-10-26T14:18:33.325Z</updated>
    </entry>
    <entry>
        <id>https://superrjohn.github.io/John/2023/10/26/java/radis/radis</id>
        <title>Redis 緩存優化</title>
        <link rel="alternate" href="https://superrjohn.github.io/John/2023/10/26/java/radis/radis"/>
        <content type="html">&lt;p&gt;在此特别感謝黑馬程序員提供的課程: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWo4NDExTjdCbS8=&#34;&gt;學成在線&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;前言&lt;br&gt;
於由實習項目快做完才做記錄，而且項目模塊較多，故挑部份來記錄&lt;br&gt;
&lt;span class=&#34;rainbow&#34;&gt;完整项目地址&lt;/span&gt;：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3N1cGVycmpvaG4vamF2YV93ZWI=&#34;&gt;https://github.com/superrjohn/java_web&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;緩存優化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#緩存優化&#34;&gt;#&lt;/a&gt; 緩存優化&lt;/h1&gt;
&lt;h2 id=&#34;redis緩存&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redis緩存&#34;&gt;#&lt;/a&gt; redis 緩存&lt;/h2&gt;
&lt;p&gt;測試案例是根據 id 查詢課程信息，這裡不存在複雜的 SQL，也不存在資料庫連線不釋放的問題，暫時不考慮資料庫方面的最佳化。&lt;br&gt;
課程發布資訊的特點的是查詢較多，修改很少，這裡考慮將課程發布資訊進行緩存，白名單數據的內容也可以考慮進行緩存。&lt;br&gt;
課程資訊緩存的流程如下：&lt;/p&gt;
&lt;img data-src=&#34;/John/img/java/redis/1.png&#34; class=&#34;abc&#34;&gt;
&lt;p&gt;1️⃣在 nacos 配置 redis-dev.yaml（group=xuecheng-plus-common）&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption&gt;&lt;span&gt;java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;spring:  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  redis: &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    host: &lt;span class=&#34;number&#34;&gt;192.168&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.101&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.65&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    port: &lt;span class=&#34;number&#34;&gt;6379&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    password: redis &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    database: &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    lettuce: &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      pool: &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        max-active: &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        max-idle: &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        min-idle: &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    timeout: &lt;span class=&#34;number&#34;&gt;10000&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2️⃣在 content-api 微服務加載 redis-dev.yaml&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption&gt;&lt;span&gt;java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;shared-configs: &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    - data-id: redis-$&amp;#123;spring.profiles.active&amp;#125;.yaml &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      group: xuecheng-plus-common &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      refresh: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;3️⃣在 content-service 微服務中添加依賴&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption&gt;&lt;span&gt;java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;dependency&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;artifactId&amp;gt;spring-boot-starter-data-redis&amp;lt;/artifactId&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/dependency&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;dependency&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;groupId&amp;gt;org.apache.commons&amp;lt;/groupId&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;artifactId&amp;gt;commons-pool2&amp;lt;/artifactId&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;version&amp;gt;&lt;span class=&#34;number&#34;&gt;2.6&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.2&lt;/span&gt;&amp;lt;/version&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/dependency&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;4️⃣定義查詢緩存介面：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption&gt;&lt;span&gt;java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/** &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;span class=&#34;doctag&#34;&gt;@description&lt;/span&gt; 查询缓存中的课程信息 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; courseId  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; com.xuecheng.content.model.po.CoursePublish &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;span class=&#34;doctag&#34;&gt;@author&lt;/span&gt; Mr.M &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;span class=&#34;doctag&#34;&gt;@date&lt;/span&gt; 2022/10/22 16:15 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;*/&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CoursePublish &lt;span class=&#34;title function_&#34;&gt;getCoursePublishCache&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Long courseId)&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;5️⃣介面實作如下，key 的命名以 course 為前綴加上 courseId&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption&gt;&lt;span&gt;java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CoursePublish &lt;span class=&#34;title function_&#34;&gt;getCoursePublishCache&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Long courseId)&lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//查询缓存 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;type&#34;&gt;Object&lt;/span&gt;  &lt;span class=&#34;variable&#34;&gt;jsonObj&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; redisTemplate.opsForValue().get(&lt;span class=&#34;string&#34;&gt;&amp;quot;course:&amp;quot;&lt;/span&gt; + courseId); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(jsonObj!=&lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;)&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;jsonString&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; jsonObj.toString(); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;=================从缓存查=================&amp;quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;CoursePublish&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;coursePublish&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; JSON.parseObject(jsonString, CoursePublish.class); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; coursePublish; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;从数据库查询...&amp;quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//从数据库查询 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;CoursePublish&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;coursePublish&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; getCoursePublish(courseId); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(coursePublish!=&lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;)&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            redisTemplate.opsForValue().set(&lt;span class=&#34;string&#34;&gt;&amp;quot;course:&amp;quot;&lt;/span&gt; + courseId, JSON.toJSONString(coursePublish)); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; coursePublish; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;6️⃣修改 controller 接口調用代碼&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption&gt;&lt;span&gt;java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@ApiOperation(&amp;quot;获取课程发布信息&amp;quot;)&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@ResponseBody&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@GetMapping(&amp;quot;/course/whole/&amp;#123;courseId&amp;#125;&amp;quot;)&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CoursePreviewDto &lt;span class=&#34;title function_&#34;&gt;getCoursePublish&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;meta&#34;&gt;@PathVariable(&amp;quot;courseId&amp;quot;)&lt;/span&gt; Long courseId)&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//查询课程发布信息 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;CoursePublish&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;coursePublish&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; coursePublishService.getCoursePublishCache(courseId); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//        CoursePublish coursePublish = coursePublishService.getCoursePublish(courseId); &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(coursePublish==&lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;)&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CoursePreviewDto&lt;/span&gt;(); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//课程基本信息 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;CourseBaseInfoDto&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;courseBase&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CourseBaseInfoDto&lt;/span&gt;(); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        BeanUtils.copyProperties(coursePublish, courseBase); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//课程计划 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        List&amp;lt;TeachplanDto&amp;gt; teachplans = JSON.parseArray(coursePublish.getTeachplan(), TeachplanDto.class); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;CoursePreviewDto&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;coursePreviewInfo&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CoursePreviewDto&lt;/span&gt;(); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        coursePreviewInfo.setCourseBase(courseBase); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        coursePreviewInfo.setTeachplans(teachplans); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; coursePreviewInfo; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;重新測試請求內容管理服務課程查詢介面，吞吐量達到 2700 左右，增加了近一倍。&lt;/p&gt;
&lt;img data-src=&#34;/John/img/java/redis/2.png&#34; class=&#34;abc&#34;&gt;
&lt;h1 id=&#34;緩存穿透問題&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#緩存穿透問題&#34;&gt;#&lt;/a&gt; 緩存穿透問題&lt;/h1&gt;
&lt;h2 id=&#34;什麼是緩存穿透&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什麼是緩存穿透&#34;&gt;#&lt;/a&gt; 什麼是緩存穿透&lt;/h2&gt;
&lt;p&gt;我們分析下程式碼:&lt;/p&gt;
&lt;img data-src=&#34;/John/img/java/redis/3.png&#34; class=&#34;abc&#34;&gt;
&lt;p&gt;如果有惡意攻擊的可能，如果有大量並發去查詢一個不存在的課程資訊會出現什麼問題呢？&lt;br&gt;
例如去請求 /content/course/whole/181，查詢 181 號課程，該課程並不在課程發布表中。&lt;br&gt;
進行壓力測試發現會去請求資料庫。&lt;br&gt;
大量並發去存取一個資料庫不存在的數據，由於緩存中沒有該數據導致大量並發查詢資料庫，這個現像要緩存穿透。&lt;/p&gt;
&lt;img data-src=&#34;/John/img/java/redis/4.png&#34; class=&#34;abc&#34;&gt;
&lt;p&gt;緩存穿透可以造成資料庫瞬間壓力過大，連線數等資源用完，最後資料庫拒絕連線不可用。&lt;/p&gt;
&lt;h2 id=&#34;解決緩存穿透&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解決緩存穿透&#34;&gt;#&lt;/a&gt; 解決緩存穿透&lt;/h2&gt;
&lt;p&gt;如何解決緩存穿透？&lt;br&gt;
1️⃣對請求增加校驗機制&lt;/p&gt;
&lt;p&gt;例如：課程 Id 是長整型，如果發來的不是長整型則直接回傳，但要有規矩才可以&lt;/p&gt;
&lt;p&gt;2️⃣使用布隆過濾器&lt;/p&gt;
&lt;p&gt;布隆過濾器的特點是，高效地插入和查詢，佔用空間少；查詢結果有不確定性，如果查詢結果是存在則元素不一定存在，如果不存在則一定不存在；另外它只能添加元素 不能刪除元素，因為刪除元素會增加誤判率。&lt;br&gt;
例如：將商品 id 寫入布隆過濾器，如果分 3 次 hash 此時在布隆過濾器有 3 個點，當從布隆過濾器查詢該商品 id，透過 hash 找到了該商品 id 在過濾器 中的點，此時回傳 1，如果找不到一定會回傳 0。&lt;br&gt;
所以，為了避免緩存穿透我們需要緩存預熱將要查詢的課程或商品資訊的 id 提前存入布隆過濾器，添加資料時將資訊的 id 也存入過濾器，當去查詢一個資料時先在 布隆過濾器中找一下如果沒有到到就表示不存在，此時直接返回。&lt;br&gt;
實作方法有：1.Google 工具包 Guava 實作 2.redisson&lt;/p&gt;
&lt;p&gt;3️⃣緩存空值或特殊值&lt;/p&gt;
&lt;p&gt;請求通過了第一步的校驗，查詢資料庫得到的資料不存在，此時我們仍然去緩存數據，緩存一個空值或一個特殊值的資料。&lt;br&gt;
但是要注意：如果緩存了空值或特殊值要設定一個短暫的過期時間。&lt;/p&gt;
&lt;p&gt;本項本採用返回空值的解決方法&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption&gt;&lt;span&gt;java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CoursePublish &lt;span class=&#34;title function_&#34;&gt;getCoursePublishCache&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Long courseId)&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//查询缓存 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;type&#34;&gt;Object&lt;/span&gt;  &lt;span class=&#34;variable&#34;&gt;jsonObj&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; redisTemplate.opsForValue().get(&lt;span class=&#34;string&#34;&gt;&amp;quot;course:&amp;quot;&lt;/span&gt; + courseId); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(jsonObj!=&lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;)&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;jsonString&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; jsonObj.toString(); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(jsonString.equals(&lt;span class=&#34;string&#34;&gt;&amp;quot;null&amp;quot;&lt;/span&gt;)) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;CoursePublish&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;coursePublish&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; JSON.parseObject(jsonString, CoursePublish.class); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; coursePublish; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//从数据库查询 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;从数据库查询数据...&amp;quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;CoursePublish&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;coursePublish&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; getCoursePublish(courseId); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//设置过期时间300秒 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        redisTemplate.opsForValue().set(&lt;span class=&#34;string&#34;&gt;&amp;quot;course:&amp;quot;&lt;/span&gt; + courseId, JSON.toJSONString(coursePublish),&lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;, TimeUnit.SECONDS); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; coursePublish; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;緩存雪崩&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#緩存雪崩&#34;&gt;#&lt;/a&gt; 緩存雪崩&lt;/h1&gt;
&lt;h2 id=&#34;什麼是緩存雪崩&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什麼是緩存雪崩&#34;&gt;#&lt;/a&gt; 什麼是緩存雪崩&lt;/h2&gt;
&lt;p&gt;緩存雪崩是緩存中大量 key 失效後當高並發到來時導致大量請求到資料庫，瞬間耗盡資料庫資源，導致資料庫無法使用。&lt;/p&gt;
&lt;p&gt;造成緩存雪崩問題的原因是大量 key 擁有了相同的過期時間，例如對課程資訊設定緩存過期時間為 10 分鐘，在大量請求同時查詢大量的課程資訊時，此時就會有大量的課程存在相同 的過期時間，一旦失效將同時失效，造成雪崩問題。&lt;/p&gt;
&lt;h2 id=&#34;解決緩存雪崩&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解決緩存雪崩&#34;&gt;#&lt;/a&gt; 解決緩存雪崩&lt;/h2&gt;
&lt;p&gt;1️⃣使用同步鎖定控制查詢資料庫的線程&lt;br&gt;
使用同步鎖定控制查詢資料庫的線程，只允許有一個線程去查詢資料庫，查詢得到資料後存入緩存。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption&gt;&lt;span&gt;java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;synchronized&lt;/span&gt;(obj)&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;//查询数据库 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;//存入缓存 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2️⃣對同一類型資訊的 key 設定不同的過期時間&lt;br&gt;
通常對一類資訊的 key 設定的過期時間是相同的，這裡可以在原有固定時間的基礎上加上一個隨機時間使它們的過期時間都不相同。&lt;br&gt;
範例程式碼如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption&gt;&lt;span&gt;java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;comment&#34;&gt;//设置过期时间300秒 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;redisTemplate.opsForValue().set(&lt;span class=&#34;string&#34;&gt;&amp;quot;course:&amp;quot;&lt;/span&gt; + courseId, JSON.toJSONString(coursePublish),&lt;span class=&#34;number&#34;&gt;300&lt;/span&gt;+&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Random&lt;/span&gt;().nextInt(&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;), TimeUnit.SECONDS); &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;3️⃣緩存預熱&lt;br&gt;
不用等到請求到來再去查詢資料庫存入緩存，可以提前將資料存入緩存。 使用緩存預熱機制通常有專門的後台程式將資料庫的資料同步到緩存。&lt;/p&gt;
&lt;h1 id=&#34;緩存擊穿&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#緩存擊穿&#34;&gt;#&lt;/a&gt; 緩存擊穿&lt;/h1&gt;
&lt;h2 id=&#34;什麼是緩存擊穿&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什麼是緩存擊穿&#34;&gt;#&lt;/a&gt; 什麼是緩存擊穿&lt;/h2&gt;
&lt;p&gt;緩存擊穿是指大量並發存取同一個熱點數據，當熱點資料失效後同時去請求資料庫，瞬間耗盡資料庫資源，導致資料庫無法使用。&lt;br&gt;
例如某手機新品發布，當緩存失效時有大量並發到來導致同時去存取資料庫。&lt;/p&gt;
&lt;h2 id=&#34;解决緩存擊穿&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解决緩存擊穿&#34;&gt;#&lt;/a&gt; 解决緩存擊穿&lt;/h2&gt;
&lt;p&gt;如何解決緩存擊穿？&lt;/p&gt;
&lt;p&gt;1. 使用同步鎖定控制查詢資料庫的線程&lt;/p&gt;
&lt;p&gt;使用同步鎖定控制查詢資料庫的程式碼，只允許有一個執行緒去查詢資料庫，查詢得到資料庫存入緩存。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption&gt;&lt;span&gt;java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;synchronized&lt;/span&gt;(obj)&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;//查询数据库 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;//存入缓存 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2. 熱點數據不過期&lt;/p&gt;
&lt;p&gt;可以由後台程式提前將熱點資料加入緩存，緩存過期時間不過期，由後台程式做好緩存同步。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption&gt;&lt;span&gt;java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;  CoursePublish &lt;span class=&#34;title function_&#34;&gt;getCoursePublishCache&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Long courseId)&lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;synchronized&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;)&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//查询缓存 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;jsonString&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; (String) redisTemplate.opsForValue().get(&lt;span class=&#34;string&#34;&gt;&amp;quot;course:&amp;quot;&lt;/span&gt; + courseId); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(StringUtils.isNotEmpty(jsonString))&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(jsonString.equals(&lt;span class=&#34;string&#34;&gt;&amp;quot;null&amp;quot;&lt;/span&gt;)) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;CoursePublish&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;coursePublish&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; JSON.parseObject(jsonString, CoursePublish.class); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; coursePublish; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;=========从数据库查询==========&amp;quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;//从数据库查询 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;CoursePublish&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;coursePublish&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; getCoursePublish(courseId); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &lt;span class=&#34;comment&#34;&gt;//设置过期时间300秒 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        redisTemplate.opsForValue().set(&lt;span class=&#34;string&#34;&gt;&amp;quot;course:&amp;quot;&lt;/span&gt; + courseId, JSON.toJSONString(coursePublish),&lt;span class=&#34;number&#34;&gt;300&lt;/span&gt;, TimeUnit.SECONDS); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; coursePublish; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;測試，吞吐量有 1300 左右&lt;/p&gt;
&lt;img data-src=&#34;/John/img/java/redis/5.png&#34; class=&#34;abc&#34;&gt;
&lt;p&gt;將上邊的程式碼進行最佳化，查詢緩存的程式碼不用 synchronized 加鎖控制，只對查詢資料庫加鎖，如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption&gt;&lt;span&gt;java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;  CoursePublish &lt;span class=&#34;title function_&#34;&gt;getCoursePublishCache&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Long courseId)&lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//查询缓存 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         &lt;span class=&#34;type&#34;&gt;Object&lt;/span&gt;  &lt;span class=&#34;variable&#34;&gt;jsonObj&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; redisTemplate.opsForValue().get(&lt;span class=&#34;string&#34;&gt;&amp;quot;course:&amp;quot;&lt;/span&gt; + courseId); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(jsonObj!=&lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;)&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;jsonString&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; jsonObj.toString(); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;CoursePublish&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;coursePublish&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; JSON.parseObject(jsonString, CoursePublish.class); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; coursePublish; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;synchronized&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;)&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;type&#34;&gt;Object&lt;/span&gt;  &lt;span class=&#34;variable&#34;&gt;jsonObj&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; redisTemplate.opsForValue().get(&lt;span class=&#34;string&#34;&gt;&amp;quot;course:&amp;quot;&lt;/span&gt; + courseId); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(jsonObj!=&lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;)&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                   &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;jsonString&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; jsonObj.toString(); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;type&#34;&gt;CoursePublish&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;coursePublish&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; JSON.parseObject(jsonString, CoursePublish.class); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; coursePublish; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                 System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;=========从数据库查询==========&amp;quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;//从数据库查询 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;type&#34;&gt;CoursePublish&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;coursePublish&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; getCoursePublish(courseId); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;              &lt;span class=&#34;comment&#34;&gt;//设置过期时间300秒 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                redisTemplate.opsForValue().set(&lt;span class=&#34;string&#34;&gt;&amp;quot;course:&amp;quot;&lt;/span&gt; + courseId, JSON.toJSONString(coursePublish),&lt;span class=&#34;number&#34;&gt;300&lt;/span&gt;, TimeUnit.SECONDS); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; coursePublish; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;測試，查詢資料庫只發生一次，整個測試過程的吞吐量約 3800。&lt;/p&gt;
&lt;img data-src=&#34;/John/img/java/redis/6.png&#34; class=&#34;abc&#34;&gt;
&lt;h1 id=&#34;分布式鎖&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分布式鎖&#34;&gt;#&lt;/a&gt; 分布式鎖&lt;/h1&gt;
&lt;h2 id=&#34;本地鎖的問題&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#本地鎖的問題&#34;&gt;#&lt;/a&gt; 本地鎖的問題&lt;/h2&gt;
&lt;p&gt;上邊的程式使用了同步鎖定解決了緩存擊穿、緩存雪崩的問題，並保證同一個 key 過期後只會查詢一次資料庫。&lt;/p&gt;
&lt;p&gt;如果將同步鎖定的程式分散部署在多個虛擬機器上則無法保證同一個 key 只會查詢一次資料庫，如下圖：&lt;/p&gt;
&lt;img data-src=&#34;/John/img/java/redis/7.png&#34; class=&#34;abc&#34;&gt;
&lt;p&gt;一個同步鎖定程式只能保證同一個虛擬機中多個執行緒只有一個執行緒去資料庫，如果高並發透過網關負載平衡轉送給各個虛擬機，此時就會存在多個執行緒去查詢資料庫情況，因為虛擬機 中的鎖只能保證該虛擬機器自己的執行緒去同步執行，無法跨虛擬機器保證同步執行。&lt;/p&gt;
&lt;p&gt;我們將虛擬機器內部的鎖叫本地鎖，本地鎖只能確保所在虛擬機器的執行緒同步執行。&lt;/p&gt;
&lt;h2 id=&#34;什么是分布鎖&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是分布鎖&#34;&gt;#&lt;/a&gt; 什么是分布鎖&lt;/h2&gt;
&lt;p&gt;本機鎖只能控制所在虛擬機器中的執行緒同步執行，現在要實現分散式環境下所有虛擬機器中的執行緒去同步執行就需要讓多個虛擬機器去共用一個鎖，虛擬機器可以分散部署，鎖 也可以分散部署，如下圖：&lt;/p&gt;
&lt;img data-src=&#34;/John/img/java/redis/8.png&#34; class=&#34;abc&#34;&gt;
&lt;p&gt;虛擬機器都去搶佔同一個鎖，鎖是一個單獨的程式提供加鎖、解鎖服務，誰搶到鎖誰去查詢資料庫。&lt;/p&gt;
&lt;p&gt;該鎖已不屬於某個虛擬機，而是分散式部署，由多個虛擬機所共享，這種鎖叫做分散式鎖。&lt;/p&gt;
&lt;h2 id=&#34;分布式鎖的實現方案&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分布式鎖的實現方案&#34;&gt;#&lt;/a&gt; 分布式鎖的實現方案&lt;/h2&gt;
&lt;p&gt;實作分散式鎖的方案很多，常用的如下：&lt;/p&gt;
&lt;p&gt;1️⃣基於資料庫實現分佈鎖&lt;/p&gt;
&lt;p&gt;利用資料庫主鍵唯一性的特點，或利用資料庫唯一索引的特點，多個執行緒同時去插入相同的記錄，誰插入成功誰就搶到鎖。&lt;/p&gt;
&lt;p&gt;2️⃣基於 redis 實現鎖&lt;/p&gt;
&lt;p&gt;redis 提供了分散式鎖定的實作方案，例如：SETNX、set nx、redisson 等。&lt;/p&gt;
&lt;p&gt;拿 SETNX 舉例說明，SETNX 指令的工作過程是去 set 一個不存在的 key，多個執行緒去設定同一個 key 只會有一個執行緒設定成功，設定成功的執行緒拿到鎖定。&lt;/p&gt;
&lt;p&gt;3️⃣使用 zookeeper 實現&lt;/p&gt;
&lt;p&gt;zookeeper 是一個分散式協調服務，主要解決分散式程式之間的同步的問題。 zookeeper 的結構類似的檔案目錄，多執行緒向 zookeeper 建立一個子目錄 (節點) 只會有一個創建成功，利用此特點可以實現分散式鎖，誰創建該結點成功誰就獲得鎖。&lt;/p&gt;
&lt;h1 id=&#34;redisson實現分布式鎖&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redisson實現分布式鎖&#34;&gt;#&lt;/a&gt; Redisson 實現分布式鎖&lt;/h1&gt;
&lt;h2 id=&#34;什么是redisson&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是redisson&#34;&gt;#&lt;/a&gt; 什么是 Redisson&lt;/h2&gt;
&lt;p&gt;查閱 文檔&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5yZWRpcy5jbi9jb21tYW5kcy9zZXQuaHRtbA==&#34;&gt; http://www.redis.cn/commands/set.html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;我們選用 Java 的實作方案 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3JlZGlzc29uL3JlZGlzc29u&#34;&gt;https://github.com/redisson/redisson&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Redisson 的文件網址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3JlZGlzc29uL3JlZGlzc29uL3dpa2kvVGFibGUtb2YtQ29udGVudA==&#34;&gt;https://github.com/redisson/redisson/wiki/Table-of-Content&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Redisson 底層採用的是 Netty 框架。 支援 Redis 2.8 以上版本，支援 Java1.6 + 以上版本。 Redisson 是一個在 Redis 的基礎上實現的 Java 駐記憶體資料網格（In-Memory Data Grid）。 它不僅提供了一系列的分散式的 Java 常用對象，還提供了許多分散式服務。&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;使用 Redisson 可以非常方便將 Java 本地記憶體中的常用資料結構的物件移到分散式緩存 redis 中。&lt;br&gt;
也可以將常用的並發程式設計工具如：AtomicLong、CountDownLatch、Semaphore 等支援分散式。&lt;br&gt;
使用 RScheduledExecutorService 實現分散式調度服務。&lt;br&gt;
支援資料分片，將資料分片儲存到不同的 redis 實例中。&lt;br&gt;
支援分散式鎖，基於 Java 的 Lock 介面實現分散式鎖，方便開發。&lt;br&gt;
下邊使用 Redisson 將 Queue 隊列的資料存入 Redis，實作一個排隊及出隊的介面。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img data-src=&#34;/John/img/java/redis/9.png&#34; class=&#34;abc&#34;&gt;
&lt;p&gt;添加 redisson 的依赖&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption&gt;&lt;span&gt;java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;dependency&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;groupId&amp;gt;org.redisson&amp;lt;/groupId&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;artifactId&amp;gt;redisson-spring-boot-starter&amp;lt;/artifactId&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;version&amp;gt;&lt;span class=&#34;number&#34;&gt;3.11&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.2&lt;/span&gt;&amp;lt;/version&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/dependency&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从课程资料目录拷贝 singleServerConfig.yaml 到 config 工程下&lt;/p&gt;
&lt;p&gt;在 redis 配置文件中添加：&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;figcaption&gt;&lt;span&gt;YAML&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;spring:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;redis:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;redisson:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;#配置文件目录 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;config:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;classpath:singleServerConfig.yaml&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;#config: classpath:clusterServersConfig.yaml &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;redis 叢集配置 clusterServersConfig.yaml.&lt;/p&gt;
&lt;p&gt;Redisson 相比 set nx 實作分散式鎖要簡單的多，工作原理如下：&lt;/p&gt;
&lt;img data-src=&#34;/John/img/java/redis/10.png&#34; class=&#34;abc&#34;&gt;
&lt;p&gt;1️⃣加鎖機制:&lt;/p&gt;
&lt;p&gt;執行緒去取得鎖，取得成功：執行 lua 腳本，儲存資料到 redis 資料庫。&lt;/p&gt;
&lt;p&gt;執行緒去取得鎖，取得失敗：一直透過 while 循環嘗試取得鎖，取得成功後，執行 lua 腳本，儲存資料到 redis&lt;/p&gt;
&lt;p&gt;2️⃣WatchDog 自動延期看門狗機制:&lt;/p&gt;
&lt;p&gt;第一種情況：在一個分散式環境下，假如一個線程獲得鎖後，突然伺服器宕機了，那麼這個時候在一定時間後這個鎖會自動釋放，你也可以設定鎖的有效時間 (當不設置 預設 30 秒時），這樣的目的主要是防止死鎖的發生&lt;/p&gt;
&lt;p&gt;第二種情況：線程 A 業務還沒執行完，時間就過了，線程 A 還想持有鎖的話，就會啟動一個 watch dog 後台線程，不斷的延長鎖 key 的生存時間。&lt;/p&gt;
&lt;p&gt;3️⃣lua 腳本 - 保證原子性操作:&lt;/p&gt;
&lt;p&gt;主要是如果你的業務邏輯複雜的話，透過封裝在 lua 腳本中發送給 redis，而且 redis 是單線程的，這樣就保證這段複雜業務邏輯執行的原子性&lt;/p&gt;
&lt;p&gt;具體使用 RLock 操作分佈鎖，RLock 繼承 JDK 的 Lock 接口，所以他有 Lock 接口的所有特性，比如 lock、unlock、trylock 等特性，同時它還有很多新特性：強制鎖釋放，帶有效期的鎖，。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption&gt;&lt;span&gt;java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;RLock&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;comment&#34;&gt;//----------------------Lock接口方法----------------------- &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/** &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 加锁 锁的有效期默认30秒 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;comment&#34;&gt;/** &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 加锁 可以手动设置锁的有效时间 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; leaseTime 锁有效时间 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; unit      时间单位 小时、分、秒、毫秒等 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; leaseTime, TimeUnit unit)&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/** &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * tryLock()方法是有返回值的，用来尝试获取锁， &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 如果获取成功，则返回true，如果获取失败（即锁已被其他线程获取），则返回false . &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;tryLock&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/** &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * tryLock(long time, TimeUnit unit)方法和tryLock()方法是类似的， &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 只不过区别在于这个方法在拿不到锁时会等待一定的时间， &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 在时间期限之内如果还拿不到锁，就返回false。如果如果一开始拿到锁或者在等待期间内拿到了锁，则返回true。 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; time 等待时间 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; unit 时间单位 小时、分、秒、毫秒等 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;tryLock&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; time, TimeUnit unit)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; InterruptedException; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/** &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 比上面多一个参数，多添加一个锁的有效时间 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; waitTime  等待时间 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; leaseTime 锁有效时间 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; unit      时间单位 小时、分、秒、毫秒等 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * waitTime 大于 leaseTime &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;tryLock&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; waitTime, &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; leaseTime, TimeUnit unit)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; InterruptedException; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/** &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 解锁 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;unlock&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;lock()：&lt;/p&gt;
&lt;p&gt;1️⃣此方法為加鎖，但是鎖的有效期限採用預設 30 秒&lt;/p&gt;
&lt;p&gt;2️⃣如果主執行緒未釋放，且目前鎖定未呼叫 unlock 方法，則進入到 watchDog 機制&lt;/p&gt;
&lt;p&gt;3️⃣如果主執行緒未釋放，且目前鎖定呼叫 unlock 方法，則直接釋放鎖定&lt;/p&gt;
&lt;h2 id=&#34;分布式鎖避免缓存擊穿&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分布式鎖避免缓存擊穿&#34;&gt;#&lt;/a&gt; 分布式鎖避免缓存擊穿&lt;/h2&gt;
&lt;p&gt;使用分布式鎖修改查詢課程資訊的介面。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption&gt;&lt;span&gt;java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//Redisson分布式锁 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;  CoursePublish &lt;span class=&#34;title function_&#34;&gt;getCoursePublishCache&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Long courseId)&lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//查询缓存 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;jsonString&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; (String) redisTemplate.opsForValue().get(&lt;span class=&#34;string&#34;&gt;&amp;quot;course:&amp;quot;&lt;/span&gt; + courseId); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(StringUtils.isNotEmpty(jsonString))&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(jsonString.equals(&lt;span class=&#34;string&#34;&gt;&amp;quot;null&amp;quot;&lt;/span&gt;))&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;CoursePublish&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;coursePublish&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; JSON.parseObject(jsonString, CoursePublish.class); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; coursePublish; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;//每门课程设置一个锁 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;type&#34;&gt;RLock&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;lock&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; redissonClient.getLock(&lt;span class=&#34;string&#34;&gt;&amp;quot;coursequerylock:&amp;quot;&lt;/span&gt;+courseId); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;//获取锁 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            lock.lock(); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                jsonString = (String) redisTemplate.opsForValue().get(&lt;span class=&#34;string&#34;&gt;&amp;quot;course:&amp;quot;&lt;/span&gt; + courseId); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(StringUtils.isNotEmpty(jsonString))&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;type&#34;&gt;CoursePublish&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;coursePublish&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; JSON.parseObject(jsonString, CoursePublish.class); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; coursePublish; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;=========从数据库查询==========&amp;quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;//从数据库查询 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;type&#34;&gt;CoursePublish&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;coursePublish&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; getCoursePublish(courseId); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                redisTemplate.opsForValue().set(&lt;span class=&#34;string&#34;&gt;&amp;quot;course:&amp;quot;&lt;/span&gt; + courseId, JSON.toJSONString(coursePublish),&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,TimeUnit.DAYS); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; coursePublish; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;span class=&#34;keyword&#34;&gt;finally&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;//释放锁 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                lock.unlock(); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;分布式鎖避免缓存擊穿流程:&lt;br&gt;
1️⃣注入 RedissonClient&lt;br&gt;
2️⃣生成以課程 ID 命名的鎖&lt;br&gt;
3️⃣獲得鎖&lt;br&gt;
4️⃣如果主線程未執行完，但已超過期時效，會進入 WatchDog 機制，再一次計算過期時間&lt;br&gt;
5️⃣主線程執行完&lt;br&gt;
6️⃣釋放鎖&lt;/p&gt;
&lt;img data-src=&#34;https://usagif.com/wp-content/uploads/gifs/thanks-for-watching-9.gif&#34; class=&#34;abc&#34; width=&#34;600&#34; height=&#34;350&#34;&gt;</content>
        <category term="Radis" />
        <updated>2023-10-26T14:15:36.096Z</updated>
    </entry>
</feed>
