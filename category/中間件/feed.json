{
    "version": "https://jsonfeed.org/version/1",
    "title": "一切都是過程 • All posts by \"中間件\" category",
    "description": "",
    "home_page_url": "https://superrjohn.github.io/John",
    "items": [
        {
            "id": "https://superrjohn.github.io/John/2023/11/07/java/radis/redis_interview",
            "url": "https://superrjohn.github.io/John/2023/11/07/java/radis/redis_interview",
            "title": "Redis面試題整理",
            "date_published": "2023-11-07T14:59:14.136Z",
            "content_html": "<p>前言:<br>\n 內容出自<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXlUNDExSDdZSy8/dmRfc291cmNlPTA5ZDY2YTFmMDcyNWM1NDU5MzQ4OTJmMDhlZjZjYmE1\">黑馬高頻面試題</span><br>\n經消化整理內容後再作出記錄</p>\n<h1 id=\"緩存穿透\"><a class=\"markdownIt-Anchor\" href=\"#緩存穿透\">#</a> 緩存穿透</h1>\n<p>緩存穿透：查詢一個不存在的數據，因 MySQL 查不到數據導致緩存也沒有數據，所以每次都會請求數據庫<br>\n解決方法一：查詢 MYSQL 也沒有數據時，返回空值到緩存，這方法簡單，但會消耗內存，有可能發生不一致問題<br>\n解決方法二：布隆過濾器，實現模複雜，但查詢空間和時間都大幅提升</p>\n<h1 id=\"緩存擊穿\"><a class=\"markdownIt-Anchor\" href=\"#緩存擊穿\">#</a> 緩存擊穿</h1>\n<p>緩存擊穿：某一個熱門 KEY 的過期時間過期時，剛好對這 KEY 有大量的請求，因為沒有緩存阻擋所以直接到達數據庫，可能會把 DB 壓垮<br>\n解決一：在強一致場景用互斥鎖，因為在線程加上鎖後，獲得鎖的線程才能查數據庫，防止高併發場景下請求數據庫，使用鎖的關係性能較差<br>\n解決二：在高可用的場景用邏輯過期，因為這個 KEY 是熱門 KEY 所以不設過期時間手動維護，但設邏輯過期值，當重置邏輯過期時間更新數據時，用戶還是可以查詢到緩存，但不保證數據絕對一致</p>\n<h1 id=\"緩存雪崩\"><a class=\"markdownIt-Anchor\" href=\"#緩存雪崩\">#</a> 緩存雪崩</h1>\n<p>緩存雪崩：指同一時間大量的 KEY 同時過期或者 redis 服務宕機，導致大量請求到數據庫，造成壓力<br>\n解決 KEY 失效：給 key 設失效時間為隨機值<br>\n解決宕機：集群、降級限流、多級緩存</p>\n<h1 id=\"數據庫與redis如何進行同步雙寫一致\"><a class=\"markdownIt-Anchor\" href=\"#數據庫與redis如何進行同步雙寫一致\">#</a> 數據庫與 redis 如何進行同步 (雙寫一致)</h1>\n<p>改數據庫的數據時，同時更新緩存，讓數據庫和緩存保持一致<br>\n強一致時，可以用排他鎖阻塞其他線程寫操作<br>\n高可用時，可以利用 MQ, 讓數據最終一致</p>\n<h1 id=\"緩存持久化\"><a class=\"markdownIt-Anchor\" href=\"#緩存持久化\">#</a> 緩存持久化</h1>\n<p>有 AOF 和 RDB 兩種方法，通常兩種一起使用</p>\n<p>AOF:redis 每一個寫入命令都被記錄在 AOF 文件，修改 redis.com 配置文件開啟，因為記錄命令所以文件較大<br>\n RDB:background save 時主進程 fork 到子進程，複製頁表給子進程，頁表就是虛擬機與內存之間的映射關係，而子進程會將新數據寫入磁盤。</p>\n<h1 id=\"緩存過期策略\"><a class=\"markdownIt-Anchor\" href=\"#緩存過期策略\">#</a> 緩存過期策略</h1>\n<p>定期刪除：每隔一段時間，查詢一些 KEY 刪除里面過期的 KEY, 可以修改配置文件調整清理模式，對 CPU 和內存較好，但刪除時間和頻率難以確定<br>\n惰性刪除：當我們查詢 KEY 時，會檢查其是否過期，過期就刪除，反之返回 KEY, 對 CPU 友好，但對內存不友好</p>\n<h1 id=\"淘汰策略\"><a class=\"markdownIt-Anchor\" href=\"#淘汰策略\">#</a> 淘汰策略</h1>\n<p>當 redis 中的內存不夠時，此時又有新的 KEY 添加，redis 會以某種規則將內存中的數據刪除<br>\n有 8 種不同的策略，最常用的有 2 種:<br>\nLRU: 最近最少使用，用當前時間減去最後一次訪問時間，值愈大則淘汰優先愈高<br>\n LFU: 最少頻率使用，會統計每個 KEY 的訪問頻率，值愈小淘汰優先愈高</p>\n<p>1. 優先使用 allkeys-lru, 把最近常訪問的數據留在緩存<br>\n 2. 訪問頻率差不多，可以用 allkeys-random<br>\n3. 業務有置頂需求，可以用 volatile-lru<br>\n4. 如果數據庫有 1000 萬數據，Redis 只能緩存 20 萬數據，如何保證 Redis 中都是熱點數據？<br>\n 使用 allkeys-lru 淘汰策略，留下來的都是熱點數據。<br>\n5.Redis 的內存用完會發生什麼事？<br>\n 要看數據淘汰策略是什麼，如果是默認配置 (noeviction), 不允許存入新數據，會報錯</p>\n<h1 id=\"如何實現分布式鎖\"><a class=\"markdownIt-Anchor\" href=\"#如何實現分布式鎖\">#</a> 如何實現分布式鎖</h1>\n<p>使用場景：定時任務，搶單，冪等性場景<br>\n問題：因為在集群下鎖在自己的 JVM 虛擬機上，只能鎖住自己的服務，所以集群下鎖會失效，導致數據不一致<br>\n解決：利用 redissonClient, 讓多台服務器搶同一把鎖，而且有 WatchDog 監聽，確保業務成功，同一線程下鎖可以重入</p>\n<h1 id=\"主從同步\"><a class=\"markdownIt-Anchor\" href=\"#主從同步\">#</a> 主從同步</h1>\n<p>好處：提高併發，讀寫分離</p>\n<p>全量同步：從會向主請求數據同步，主會檢查從有沒有 replId, 沒有則說明第一次同步，返回數據信息 replId、offset, 執行 BgSave 生成 RDB 文<br>\n增量同步：如果主檢查從不是第一次同步，會查看 offset 值，根據主與從的 offset 差值，同步後期變化的數據</p>\n<h1 id=\"哨兵機制\"><a class=\"markdownIt-Anchor\" href=\"#哨兵機制\">#</a> 哨兵機制</h1>\n<p>1️⃣監控：哨兵會向 redis 集群發送 PING 命令，如果配置發現實例未定時間響應 PONG, 則認為該實例主觀下線，或者超過指定數量的 sentinel 都認為該實例下線，則客觀下線。<br>\n主節點上線後，哨兵會根據 offset 愈大的從節點成為主，因為 offset 值愈大說明數據愈完整</p>\n<p>2️⃣自動故障恢復：如果主節點故障，Sentinel 會將一個 slave 提升為 master。</p>\n<p>3️⃣通知：Sentinel 充當 Redis 客戶端的服務發現來源，當集群發生故障轉移時，會將最新信息推送給 redis 的客戶端</p>\n<p>4️⃣哨兵腦裂：集群腦裂是由於主節點和從節點和 sentinel 處於不同的網路分區，使得 sentinel 沒有能夠心跳感知到主節點，所以通過選舉的方式提升了一個從節點為主，這樣就存在兩個 master, 就像大腦分裂一樣，會導致客戶端還在舊的主節點那寫入數據，新節點無法同步數據，當網路恢復後，sentinel 會將舊的主節點降為從節點，這時再從新的 master 同步數據，就會導致數據掉失</p>\n<p>解決：可以修改 redis 的配置，可以設置最少的從節點數量以及縮短主從數據同步的延遲時間，達不到要求就拒絕請求，可以避免大量數據掉失</p>\n<h1 id=\"分片集群\"><a class=\"markdownIt-Anchor\" href=\"#分片集群\">#</a> 分片集群</h1>\n<p>主從和哨兵解決了高可用和高併發，但沒有解決:<br>\n1️⃣海量數據存儲問題<br>\n2️⃣高併發寫的問題</p>\n<p>使用分片集群可以解決上述問題:<br>\n1️⃣集群中有多個 master, 每個 master 可以保存不同數據，假設一個主保存 20W 數據，3 個就可以保存 60W 數據</p>\n<p>2️⃣每個主節點可以有多個從節點</p>\n<p>3️⃣主節點之間可以通過 ping 監聽彼此</p>\n<p>4️⃣客戶端請求可以訪問集群任意節點，最終都會被轉發到正確節點</p>\n<p>5️⃣分片集群引入了 hash 槽概念，redis 集群有 16384 個哈希槽，每個 key 通過算法後對 16384 取餘數，如果想將一類 KEY 放在一起提升性能，key 的命名可以這樣 set {F1A} name john</p>\n<h1 id=\"redis的io多路複用模型\"><a class=\"markdownIt-Anchor\" href=\"#redis的io多路複用模型\">#</a> Redis 的 IO 多路複用模型</h1>\n<p>1️⃣redis 是單程線，但為什麼那麼快？因為 redis 是純內存操作，執行速度非常快</p>\n<p>2️⃣採用單線程，避免不必要的上下文切換，多程線還要考慮線程安全</p>\n<p>3️⃣使用 IO 多路複用模型</p>\n<p>所以 redis 是純內存操作，它的性能瓶頸是網路延遲而不是執行速度。</p>\n<p>而 Redis 網路模型通過 IO 多路複用提高性能，而且支持各種不同的多路複用實現，將這些實現進行封裝，提供了統一的高性能事件庫</p>\n<p>所以 redis 在 IO 多路複用的基礎下，添加了自己的事件派發，將寫數據和讀數據改為多程線接收數據，增加命令轉換速度，命令執行時是依然是單線程</p>\n<img data-src=\"https://usagif.com/wp-content/uploads/gifs/thanks-for-watching-9.gif\" class=\"abc\" width=\"600\" height=\"350\">",
            "tags": [
                "Radis"
            ]
        },
        {
            "id": "https://superrjohn.github.io/John/2023/10/26/java/rabbitmq/rabbitmq",
            "url": "https://superrjohn.github.io/John/2023/10/26/java/rabbitmq/rabbitmq",
            "title": "Hello RabbitMq!",
            "date_published": "2023-10-26T14:18:33.325Z",
            "content_html": "<p>ToDo</p>\n",
            "tags": [
                "RabbitMQ"
            ]
        },
        {
            "id": "https://superrjohn.github.io/John/2023/10/26/java/radis/radis",
            "url": "https://superrjohn.github.io/John/2023/10/26/java/radis/radis",
            "title": "Redis 緩存優化",
            "date_published": "2023-10-26T14:15:36.096Z",
            "content_html": "<p>在此特别感謝黑馬程序員提供的課程: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWo4NDExTjdCbS8=\">學成在線</span></p>\n<p>前言<br>\n於由實習項目快做完才做記錄，而且項目模塊較多，故挑部份來記錄<br>\n<span class=\"rainbow\">完整项目地址</span>：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3N1cGVycmpvaG4vamF2YV93ZWI=\">https://github.com/superrjohn/java_web</span></p>\n<h1 id=\"緩存優化\"><a class=\"markdownIt-Anchor\" href=\"#緩存優化\">#</a> 緩存優化</h1>\n<h2 id=\"redis緩存\"><a class=\"markdownIt-Anchor\" href=\"#redis緩存\">#</a> redis 緩存</h2>\n<p>測試案例是根據 id 查詢課程信息，這裡不存在複雜的 SQL，也不存在資料庫連線不釋放的問題，暫時不考慮資料庫方面的最佳化。<br>\n課程發布資訊的特點的是查詢較多，修改很少，這裡考慮將課程發布資訊進行緩存，白名單數據的內容也可以考慮進行緩存。<br>\n課程資訊緩存的流程如下：</p>\n<img data-src=\"/John/img/java/redis/1.png\" class=\"abc\">\n<p>1️⃣在 nacos 配置 redis-dev.yaml（group=xuecheng-plus-common）</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:  </span><br><span class=\"line\">  redis: </span><br><span class=\"line\">    host: <span class=\"number\">192.168</span><span class=\"number\">.101</span><span class=\"number\">.65</span> </span><br><span class=\"line\">    port: <span class=\"number\">6379</span> </span><br><span class=\"line\">    password: redis </span><br><span class=\"line\">    database: <span class=\"number\">0</span> </span><br><span class=\"line\">    lettuce: </span><br><span class=\"line\">      pool: </span><br><span class=\"line\">        max-active: <span class=\"number\">20</span> </span><br><span class=\"line\">        max-idle: <span class=\"number\">10</span> </span><br><span class=\"line\">        min-idle: <span class=\"number\">0</span> </span><br><span class=\"line\">    timeout: <span class=\"number\">10000</span> </span><br></pre></td></tr></table></figure>\n<p>2️⃣在 content-api 微服務加載 redis-dev.yaml</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shared-configs: </span><br><span class=\"line\">    - data-id: redis-$&#123;spring.profiles.active&#125;.yaml </span><br><span class=\"line\">      group: xuecheng-plus-common </span><br><span class=\"line\">      refresh: <span class=\"literal\">true</span> </span><br></pre></td></tr></table></figure>\n<p>3️⃣在 content-service 微服務中添加依賴</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt; </span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; </span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt; </span><br><span class=\"line\">&lt;/dependency&gt; </span><br><span class=\"line\">&lt;dependency&gt; </span><br><span class=\"line\">    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt; </span><br><span class=\"line\">    &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt; </span><br><span class=\"line\">    &lt;version&gt;<span class=\"number\">2.6</span><span class=\"number\">.2</span>&lt;/version&gt; </span><br><span class=\"line\">&lt;/dependency&gt; </span><br></pre></td></tr></table></figure>\n<p>4️⃣定義查詢緩存介面：</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span> 查询缓存中的课程信息 </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> courseId  </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> com.xuecheng.content.model.po.CoursePublish </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Mr.M </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2022/10/22 16:15 </span></span><br><span class=\"line\"><span class=\"comment\">*/</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> CoursePublish <span class=\"title function_\">getCoursePublishCache</span><span class=\"params\">(Long courseId)</span>; </span><br></pre></td></tr></table></figure>\n<p>5️⃣介面實作如下，key 的命名以 course 為前綴加上 courseId</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> CoursePublish <span class=\"title function_\">getCoursePublishCache</span><span class=\"params\">(Long courseId)</span>&#123; </span><br><span class=\"line\">    <span class=\"comment\">//查询缓存 </span></span><br><span class=\"line\">   <span class=\"type\">Object</span>  <span class=\"variable\">jsonObj</span> <span class=\"operator\">=</span> redisTemplate.opsForValue().get(<span class=\"string\">&quot;course:&quot;</span> + courseId); </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(jsonObj!=<span class=\"literal\">null</span>)&#123; </span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">jsonString</span> <span class=\"operator\">=</span> jsonObj.toString(); </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;=================从缓存查=================&quot;</span>); </span><br><span class=\"line\">        <span class=\"type\">CoursePublish</span> <span class=\"variable\">coursePublish</span> <span class=\"operator\">=</span> JSON.parseObject(jsonString, CoursePublish.class); </span><br><span class=\"line\">        <span class=\"keyword\">return</span> coursePublish; </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;从数据库查询...&quot;</span>); </span><br><span class=\"line\">        <span class=\"comment\">//从数据库查询 </span></span><br><span class=\"line\">        <span class=\"type\">CoursePublish</span> <span class=\"variable\">coursePublish</span> <span class=\"operator\">=</span> getCoursePublish(courseId); </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(coursePublish!=<span class=\"literal\">null</span>)&#123; </span><br><span class=\"line\">            redisTemplate.opsForValue().set(<span class=\"string\">&quot;course:&quot;</span> + courseId, JSON.toJSONString(coursePublish)); </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> coursePublish; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>6️⃣修改 controller 接口調用代碼</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ApiOperation(&quot;获取课程发布信息&quot;)</span> </span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span> </span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/course/whole/&#123;courseId&#125;&quot;)</span> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> CoursePreviewDto <span class=\"title function_\">getCoursePublish</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;courseId&quot;)</span> Long courseId)</span> &#123; </span><br><span class=\"line\">        <span class=\"comment\">//查询课程发布信息 </span></span><br><span class=\"line\">        <span class=\"type\">CoursePublish</span> <span class=\"variable\">coursePublish</span> <span class=\"operator\">=</span> coursePublishService.getCoursePublishCache(courseId); </span><br><span class=\"line\"><span class=\"comment\">//        CoursePublish coursePublish = coursePublishService.getCoursePublish(courseId); </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(coursePublish==<span class=\"literal\">null</span>)&#123; </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CoursePreviewDto</span>(); </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">//课程基本信息 </span></span><br><span class=\"line\">        <span class=\"type\">CourseBaseInfoDto</span> <span class=\"variable\">courseBase</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CourseBaseInfoDto</span>(); </span><br><span class=\"line\">        BeanUtils.copyProperties(coursePublish, courseBase); </span><br><span class=\"line\">        <span class=\"comment\">//课程计划 </span></span><br><span class=\"line\">        List&lt;TeachplanDto&gt; teachplans = JSON.parseArray(coursePublish.getTeachplan(), TeachplanDto.class); </span><br><span class=\"line\">        <span class=\"type\">CoursePreviewDto</span> <span class=\"variable\">coursePreviewInfo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CoursePreviewDto</span>(); </span><br><span class=\"line\">        coursePreviewInfo.setCourseBase(courseBase); </span><br><span class=\"line\">        coursePreviewInfo.setTeachplans(teachplans); </span><br><span class=\"line\">        <span class=\"keyword\">return</span> coursePreviewInfo; </span><br><span class=\"line\">    &#125; </span><br></pre></td></tr></table></figure>\n<p>重新測試請求內容管理服務課程查詢介面，吞吐量達到 2700 左右，增加了近一倍。</p>\n<img data-src=\"/John/img/java/redis/2.png\" class=\"abc\">\n<h1 id=\"緩存穿透問題\"><a class=\"markdownIt-Anchor\" href=\"#緩存穿透問題\">#</a> 緩存穿透問題</h1>\n<h2 id=\"什麼是緩存穿透\"><a class=\"markdownIt-Anchor\" href=\"#什麼是緩存穿透\">#</a> 什麼是緩存穿透</h2>\n<p>我們分析下程式碼:</p>\n<img data-src=\"/John/img/java/redis/3.png\" class=\"abc\">\n<p>如果有惡意攻擊的可能，如果有大量並發去查詢一個不存在的課程資訊會出現什麼問題呢？<br>\n例如去請求 /content/course/whole/181，查詢 181 號課程，該課程並不在課程發布表中。<br>\n進行壓力測試發現會去請求資料庫。<br>\n大量並發去存取一個資料庫不存在的數據，由於緩存中沒有該數據導致大量並發查詢資料庫，這個現像要緩存穿透。</p>\n<img data-src=\"/John/img/java/redis/4.png\" class=\"abc\">\n<p>緩存穿透可以造成資料庫瞬間壓力過大，連線數等資源用完，最後資料庫拒絕連線不可用。</p>\n<h2 id=\"解決緩存穿透\"><a class=\"markdownIt-Anchor\" href=\"#解決緩存穿透\">#</a> 解決緩存穿透</h2>\n<p>如何解決緩存穿透？<br>\n1️⃣對請求增加校驗機制</p>\n<p>例如：課程 Id 是長整型，如果發來的不是長整型則直接回傳，但要有規矩才可以</p>\n<p>2️⃣使用布隆過濾器</p>\n<p>布隆過濾器的特點是，高效地插入和查詢，佔用空間少；查詢結果有不確定性，如果查詢結果是存在則元素不一定存在，如果不存在則一定不存在；另外它只能添加元素 不能刪除元素，因為刪除元素會增加誤判率。<br>\n例如：將商品 id 寫入布隆過濾器，如果分 3 次 hash 此時在布隆過濾器有 3 個點，當從布隆過濾器查詢該商品 id，透過 hash 找到了該商品 id 在過濾器 中的點，此時回傳 1，如果找不到一定會回傳 0。<br>\n所以，為了避免緩存穿透我們需要緩存預熱將要查詢的課程或商品資訊的 id 提前存入布隆過濾器，添加資料時將資訊的 id 也存入過濾器，當去查詢一個資料時先在 布隆過濾器中找一下如果沒有到到就表示不存在，此時直接返回。<br>\n實作方法有：1.Google 工具包 Guava 實作 2.redisson</p>\n<p>3️⃣緩存空值或特殊值</p>\n<p>請求通過了第一步的校驗，查詢資料庫得到的資料不存在，此時我們仍然去緩存數據，緩存一個空值或一個特殊值的資料。<br>\n但是要注意：如果緩存了空值或特殊值要設定一個短暫的過期時間。</p>\n<p>本項本採用返回空值的解決方法</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> CoursePublish <span class=\"title function_\">getCoursePublishCache</span><span class=\"params\">(Long courseId)</span> &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//查询缓存 </span></span><br><span class=\"line\">   <span class=\"type\">Object</span>  <span class=\"variable\">jsonObj</span> <span class=\"operator\">=</span> redisTemplate.opsForValue().get(<span class=\"string\">&quot;course:&quot;</span> + courseId); </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(jsonObj!=<span class=\"literal\">null</span>)&#123; </span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">jsonString</span> <span class=\"operator\">=</span> jsonObj.toString(); </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(jsonString.equals(<span class=\"string\">&quot;null&quot;</span>)) </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>; </span><br><span class=\"line\">        <span class=\"type\">CoursePublish</span> <span class=\"variable\">coursePublish</span> <span class=\"operator\">=</span> JSON.parseObject(jsonString, CoursePublish.class); </span><br><span class=\"line\">        <span class=\"keyword\">return</span> coursePublish; </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\">        <span class=\"comment\">//从数据库查询 </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;从数据库查询数据...&quot;</span>); </span><br><span class=\"line\">        <span class=\"type\">CoursePublish</span> <span class=\"variable\">coursePublish</span> <span class=\"operator\">=</span> getCoursePublish(courseId); </span><br><span class=\"line\">        <span class=\"comment\">//设置过期时间300秒 </span></span><br><span class=\"line\">        redisTemplate.opsForValue().set(<span class=\"string\">&quot;course:&quot;</span> + courseId, JSON.toJSONString(coursePublish),<span class=\"number\">30</span>, TimeUnit.SECONDS); </span><br><span class=\"line\">        <span class=\"keyword\">return</span> coursePublish; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h1 id=\"緩存雪崩\"><a class=\"markdownIt-Anchor\" href=\"#緩存雪崩\">#</a> 緩存雪崩</h1>\n<h2 id=\"什麼是緩存雪崩\"><a class=\"markdownIt-Anchor\" href=\"#什麼是緩存雪崩\">#</a> 什麼是緩存雪崩</h2>\n<p>緩存雪崩是緩存中大量 key 失效後當高並發到來時導致大量請求到資料庫，瞬間耗盡資料庫資源，導致資料庫無法使用。</p>\n<p>造成緩存雪崩問題的原因是大量 key 擁有了相同的過期時間，例如對課程資訊設定緩存過期時間為 10 分鐘，在大量請求同時查詢大量的課程資訊時，此時就會有大量的課程存在相同 的過期時間，一旦失效將同時失效，造成雪崩問題。</p>\n<h2 id=\"解決緩存雪崩\"><a class=\"markdownIt-Anchor\" href=\"#解決緩存雪崩\">#</a> 解決緩存雪崩</h2>\n<p>1️⃣使用同步鎖定控制查詢資料庫的線程<br>\n使用同步鎖定控制查詢資料庫的線程，只允許有一個線程去查詢資料庫，查詢得到資料後存入緩存。</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span>(obj)&#123; </span><br><span class=\"line\">  <span class=\"comment\">//查询数据库 </span></span><br><span class=\"line\">  <span class=\"comment\">//存入缓存 </span></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>2️⃣對同一類型資訊的 key 設定不同的過期時間<br>\n通常對一類資訊的 key 設定的過期時間是相同的，這裡可以在原有固定時間的基礎上加上一個隨機時間使它們的過期時間都不相同。<br>\n範例程式碼如下：</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">//设置过期时间300秒 </span></span><br><span class=\"line\">redisTemplate.opsForValue().set(<span class=\"string\">&quot;course:&quot;</span> + courseId, JSON.toJSONString(coursePublish),<span class=\"number\">300</span>+<span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>().nextInt(<span class=\"number\">100</span>), TimeUnit.SECONDS); </span><br></pre></td></tr></table></figure>\n<p>3️⃣緩存預熱<br>\n不用等到請求到來再去查詢資料庫存入緩存，可以提前將資料存入緩存。 使用緩存預熱機制通常有專門的後台程式將資料庫的資料同步到緩存。</p>\n<h1 id=\"緩存擊穿\"><a class=\"markdownIt-Anchor\" href=\"#緩存擊穿\">#</a> 緩存擊穿</h1>\n<h2 id=\"什麼是緩存擊穿\"><a class=\"markdownIt-Anchor\" href=\"#什麼是緩存擊穿\">#</a> 什麼是緩存擊穿</h2>\n<p>緩存擊穿是指大量並發存取同一個熱點數據，當熱點資料失效後同時去請求資料庫，瞬間耗盡資料庫資源，導致資料庫無法使用。<br>\n例如某手機新品發布，當緩存失效時有大量並發到來導致同時去存取資料庫。</p>\n<h2 id=\"解决緩存擊穿\"><a class=\"markdownIt-Anchor\" href=\"#解决緩存擊穿\">#</a> 解决緩存擊穿</h2>\n<p>如何解決緩存擊穿？</p>\n<p>1. 使用同步鎖定控制查詢資料庫的線程</p>\n<p>使用同步鎖定控制查詢資料庫的程式碼，只允許有一個執行緒去查詢資料庫，查詢得到資料庫存入緩存。</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span>(obj)&#123; </span><br><span class=\"line\">  <span class=\"comment\">//查询数据库 </span></span><br><span class=\"line\">  <span class=\"comment\">//存入缓存 </span></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>2. 熱點數據不過期</p>\n<p>可以由後台程式提前將熱點資料加入緩存，緩存過期時間不過期，由後台程式做好緩存同步。</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span>  CoursePublish <span class=\"title function_\">getCoursePublishCache</span><span class=\"params\">(Long courseId)</span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(<span class=\"built_in\">this</span>)&#123; </span><br><span class=\"line\">        <span class=\"comment\">//查询缓存 </span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">jsonString</span> <span class=\"operator\">=</span> (String) redisTemplate.opsForValue().get(<span class=\"string\">&quot;course:&quot;</span> + courseId); </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(StringUtils.isNotEmpty(jsonString))&#123; </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(jsonString.equals(<span class=\"string\">&quot;null&quot;</span>)) </span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">null</span>; </span><br><span class=\"line\">            <span class=\"type\">CoursePublish</span> <span class=\"variable\">coursePublish</span> <span class=\"operator\">=</span> JSON.parseObject(jsonString, CoursePublish.class); </span><br><span class=\"line\">            <span class=\"keyword\">return</span> coursePublish; </span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123; </span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;=========从数据库查询==========&quot;</span>); </span><br><span class=\"line\">            <span class=\"comment\">//从数据库查询 </span></span><br><span class=\"line\">            <span class=\"type\">CoursePublish</span> <span class=\"variable\">coursePublish</span> <span class=\"operator\">=</span> getCoursePublish(courseId); </span><br><span class=\"line\">           <span class=\"comment\">//设置过期时间300秒 </span></span><br><span class=\"line\">        redisTemplate.opsForValue().set(<span class=\"string\">&quot;course:&quot;</span> + courseId, JSON.toJSONString(coursePublish),<span class=\"number\">300</span>, TimeUnit.SECONDS); </span><br><span class=\"line\">            <span class=\"keyword\">return</span> coursePublish; </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>測試，吞吐量有 1300 左右</p>\n<img data-src=\"/John/img/java/redis/5.png\" class=\"abc\">\n<p>將上邊的程式碼進行最佳化，查詢緩存的程式碼不用 synchronized 加鎖控制，只對查詢資料庫加鎖，如下：</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span>  CoursePublish <span class=\"title function_\">getCoursePublishCache</span><span class=\"params\">(Long courseId)</span>&#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">//查询缓存 </span></span><br><span class=\"line\">         <span class=\"type\">Object</span>  <span class=\"variable\">jsonObj</span> <span class=\"operator\">=</span> redisTemplate.opsForValue().get(<span class=\"string\">&quot;course:&quot;</span> + courseId); </span><br><span class=\"line\">         <span class=\"keyword\">if</span>(jsonObj!=<span class=\"literal\">null</span>)&#123; </span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">jsonString</span> <span class=\"operator\">=</span> jsonObj.toString(); </span><br><span class=\"line\">            <span class=\"type\">CoursePublish</span> <span class=\"variable\">coursePublish</span> <span class=\"operator\">=</span> JSON.parseObject(jsonString, CoursePublish.class); </span><br><span class=\"line\">            <span class=\"keyword\">return</span> coursePublish; </span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123; </span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span>(<span class=\"built_in\">this</span>)&#123; </span><br><span class=\"line\">                <span class=\"type\">Object</span>  <span class=\"variable\">jsonObj</span> <span class=\"operator\">=</span> redisTemplate.opsForValue().get(<span class=\"string\">&quot;course:&quot;</span> + courseId); </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(jsonObj!=<span class=\"literal\">null</span>)&#123; </span><br><span class=\"line\">                   <span class=\"type\">String</span> <span class=\"variable\">jsonString</span> <span class=\"operator\">=</span> jsonObj.toString(); </span><br><span class=\"line\">                    <span class=\"type\">CoursePublish</span> <span class=\"variable\">coursePublish</span> <span class=\"operator\">=</span> JSON.parseObject(jsonString, CoursePublish.class); </span><br><span class=\"line\">                    <span class=\"keyword\">return</span> coursePublish; </span><br><span class=\"line\">                &#125; </span><br><span class=\"line\">                 System.out.println(<span class=\"string\">&quot;=========从数据库查询==========&quot;</span>); </span><br><span class=\"line\">                <span class=\"comment\">//从数据库查询 </span></span><br><span class=\"line\">                <span class=\"type\">CoursePublish</span> <span class=\"variable\">coursePublish</span> <span class=\"operator\">=</span> getCoursePublish(courseId); </span><br><span class=\"line\">              <span class=\"comment\">//设置过期时间300秒 </span></span><br><span class=\"line\">                redisTemplate.opsForValue().set(<span class=\"string\">&quot;course:&quot;</span> + courseId, JSON.toJSONString(coursePublish),<span class=\"number\">300</span>, TimeUnit.SECONDS); </span><br><span class=\"line\">                <span class=\"keyword\">return</span> coursePublish; </span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>測試，查詢資料庫只發生一次，整個測試過程的吞吐量約 3800。</p>\n<img data-src=\"/John/img/java/redis/6.png\" class=\"abc\">\n<h1 id=\"分布式鎖\"><a class=\"markdownIt-Anchor\" href=\"#分布式鎖\">#</a> 分布式鎖</h1>\n<h2 id=\"本地鎖的問題\"><a class=\"markdownIt-Anchor\" href=\"#本地鎖的問題\">#</a> 本地鎖的問題</h2>\n<p>上邊的程式使用了同步鎖定解決了緩存擊穿、緩存雪崩的問題，並保證同一個 key 過期後只會查詢一次資料庫。</p>\n<p>如果將同步鎖定的程式分散部署在多個虛擬機器上則無法保證同一個 key 只會查詢一次資料庫，如下圖：</p>\n<img data-src=\"/John/img/java/redis/7.png\" class=\"abc\">\n<p>一個同步鎖定程式只能保證同一個虛擬機中多個執行緒只有一個執行緒去資料庫，如果高並發透過網關負載平衡轉送給各個虛擬機，此時就會存在多個執行緒去查詢資料庫情況，因為虛擬機 中的鎖只能保證該虛擬機器自己的執行緒去同步執行，無法跨虛擬機器保證同步執行。</p>\n<p>我們將虛擬機器內部的鎖叫本地鎖，本地鎖只能確保所在虛擬機器的執行緒同步執行。</p>\n<h2 id=\"什么是分布鎖\"><a class=\"markdownIt-Anchor\" href=\"#什么是分布鎖\">#</a> 什么是分布鎖</h2>\n<p>本機鎖只能控制所在虛擬機器中的執行緒同步執行，現在要實現分散式環境下所有虛擬機器中的執行緒去同步執行就需要讓多個虛擬機器去共用一個鎖，虛擬機器可以分散部署，鎖 也可以分散部署，如下圖：</p>\n<img data-src=\"/John/img/java/redis/8.png\" class=\"abc\">\n<p>虛擬機器都去搶佔同一個鎖，鎖是一個單獨的程式提供加鎖、解鎖服務，誰搶到鎖誰去查詢資料庫。</p>\n<p>該鎖已不屬於某個虛擬機，而是分散式部署，由多個虛擬機所共享，這種鎖叫做分散式鎖。</p>\n<h2 id=\"分布式鎖的實現方案\"><a class=\"markdownIt-Anchor\" href=\"#分布式鎖的實現方案\">#</a> 分布式鎖的實現方案</h2>\n<p>實作分散式鎖的方案很多，常用的如下：</p>\n<p>1️⃣基於資料庫實現分佈鎖</p>\n<p>利用資料庫主鍵唯一性的特點，或利用資料庫唯一索引的特點，多個執行緒同時去插入相同的記錄，誰插入成功誰就搶到鎖。</p>\n<p>2️⃣基於 redis 實現鎖</p>\n<p>redis 提供了分散式鎖定的實作方案，例如：SETNX、set nx、redisson 等。</p>\n<p>拿 SETNX 舉例說明，SETNX 指令的工作過程是去 set 一個不存在的 key，多個執行緒去設定同一個 key 只會有一個執行緒設定成功，設定成功的執行緒拿到鎖定。</p>\n<p>3️⃣使用 zookeeper 實現</p>\n<p>zookeeper 是一個分散式協調服務，主要解決分散式程式之間的同步的問題。 zookeeper 的結構類似的檔案目錄，多執行緒向 zookeeper 建立一個子目錄 (節點) 只會有一個創建成功，利用此特點可以實現分散式鎖，誰創建該結點成功誰就獲得鎖。</p>\n<h1 id=\"redisson實現分布式鎖\"><a class=\"markdownIt-Anchor\" href=\"#redisson實現分布式鎖\">#</a> Redisson 實現分布式鎖</h1>\n<h2 id=\"什么是redisson\"><a class=\"markdownIt-Anchor\" href=\"#什么是redisson\">#</a> 什么是 Redisson</h2>\n<p>查閱 文檔<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5yZWRpcy5jbi9jb21tYW5kcy9zZXQuaHRtbA==\"> http://www.redis.cn/commands/set.html</span></p>\n<p>我們選用 Java 的實作方案 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3JlZGlzc29uL3JlZGlzc29u\">https://github.com/redisson/redisson</span></p>\n<p>Redisson 的文件網址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3JlZGlzc29uL3JlZGlzc29uL3dpa2kvVGFibGUtb2YtQ29udGVudA==\">https://github.com/redisson/redisson/wiki/Table-of-Content</span></p>\n<p>Redisson 底層採用的是 Netty 框架。 支援 Redis 2.8 以上版本，支援 Java1.6 + 以上版本。 Redisson 是一個在 Redis 的基礎上實現的 Java 駐記憶體資料網格（In-Memory Data Grid）。 它不僅提供了一系列的分散式的 Java 常用對象，還提供了許多分散式服務。</p>\n<blockquote><p>使用 Redisson 可以非常方便將 Java 本地記憶體中的常用資料結構的物件移到分散式緩存 redis 中。<br>\n也可以將常用的並發程式設計工具如：AtomicLong、CountDownLatch、Semaphore 等支援分散式。<br>\n使用 RScheduledExecutorService 實現分散式調度服務。<br>\n支援資料分片，將資料分片儲存到不同的 redis 實例中。<br>\n支援分散式鎖，基於 Java 的 Lock 介面實現分散式鎖，方便開發。<br>\n下邊使用 Redisson 將 Queue 隊列的資料存入 Redis，實作一個排隊及出隊的介面。</p>\n</blockquote>\n<img data-src=\"/John/img/java/redis/9.png\" class=\"abc\">\n<p>添加 redisson 的依赖</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt; </span><br><span class=\"line\">    &lt;groupId&gt;org.redisson&lt;/groupId&gt; </span><br><span class=\"line\">    &lt;artifactId&gt;redisson-spring-boot-starter&lt;/artifactId&gt; </span><br><span class=\"line\">    &lt;version&gt;<span class=\"number\">3.11</span><span class=\"number\">.2</span>&lt;/version&gt; </span><br><span class=\"line\">&lt;/dependency&gt; </span><br></pre></td></tr></table></figure>\n<p>从课程资料目录拷贝 singleServerConfig.yaml 到 config 工程下</p>\n<p>在 redis 配置文件中添加：</p>\n<figure class=\"highlight yaml\"><figcaption><span>YAML</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span> </span><br><span class=\"line\">  <span class=\"attr\">redis:</span> </span><br><span class=\"line\">    <span class=\"attr\">redisson:</span> </span><br><span class=\"line\">      <span class=\"comment\">#配置文件目录 </span></span><br><span class=\"line\">      <span class=\"attr\">config:</span> <span class=\"string\">classpath:singleServerConfig.yaml</span> </span><br><span class=\"line\">      <span class=\"comment\">#config: classpath:clusterServersConfig.yaml </span></span><br></pre></td></tr></table></figure>\n<p>redis 叢集配置 clusterServersConfig.yaml.</p>\n<p>Redisson 相比 set nx 實作分散式鎖要簡單的多，工作原理如下：</p>\n<img data-src=\"/John/img/java/redis/10.png\" class=\"abc\">\n<p>1️⃣加鎖機制:</p>\n<p>執行緒去取得鎖，取得成功：執行 lua 腳本，儲存資料到 redis 資料庫。</p>\n<p>執行緒去取得鎖，取得失敗：一直透過 while 循環嘗試取得鎖，取得成功後，執行 lua 腳本，儲存資料到 redis</p>\n<p>2️⃣WatchDog 自動延期看門狗機制:</p>\n<p>第一種情況：在一個分散式環境下，假如一個線程獲得鎖後，突然伺服器宕機了，那麼這個時候在一定時間後這個鎖會自動釋放，你也可以設定鎖的有效時間 (當不設置 預設 30 秒時），這樣的目的主要是防止死鎖的發生</p>\n<p>第二種情況：線程 A 業務還沒執行完，時間就過了，線程 A 還想持有鎖的話，就會啟動一個 watch dog 後台線程，不斷的延長鎖 key 的生存時間。</p>\n<p>3️⃣lua 腳本 - 保證原子性操作:</p>\n<p>主要是如果你的業務邏輯複雜的話，透過封裝在 lua 腳本中發送給 redis，而且 redis 是單線程的，這樣就保證這段複雜業務邏輯執行的原子性</p>\n<p>具體使用 RLock 操作分佈鎖，RLock 繼承 JDK 的 Lock 接口，所以他有 Lock 接口的所有特性，比如 lock、unlock、trylock 等特性，同時它還有很多新特性：強制鎖釋放，帶有效期的鎖，。</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">RLock</span> &#123; </span><br><span class=\"line\">     </span><br><span class=\"line\">   <span class=\"comment\">//----------------------Lock接口方法----------------------- </span></span><br><span class=\"line\">    <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">     * 加锁 锁的有效期默认30秒 </span></span><br><span class=\"line\"><span class=\"comment\">     */</span> </span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">lock</span><span class=\"params\">()</span>; </span><br><span class=\"line\">     </span><br><span class=\"line\">     <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">     * 加锁 可以手动设置锁的有效时间 </span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> leaseTime 锁有效时间 </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> unit      时间单位 小时、分、秒、毫秒等 </span></span><br><span class=\"line\"><span class=\"comment\">     */</span> </span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">lock</span><span class=\"params\">(<span class=\"type\">long</span> leaseTime, TimeUnit unit)</span>; </span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">     * tryLock()方法是有返回值的，用来尝试获取锁， </span></span><br><span class=\"line\"><span class=\"comment\">     * 如果获取成功，则返回true，如果获取失败（即锁已被其他线程获取），则返回false . </span></span><br><span class=\"line\"><span class=\"comment\">     */</span> </span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">tryLock</span><span class=\"params\">()</span>; </span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">     * tryLock(long time, TimeUnit unit)方法和tryLock()方法是类似的， </span></span><br><span class=\"line\"><span class=\"comment\">     * 只不过区别在于这个方法在拿不到锁时会等待一定的时间， </span></span><br><span class=\"line\"><span class=\"comment\">     * 在时间期限之内如果还拿不到锁，就返回false。如果如果一开始拿到锁或者在等待期间内拿到了锁，则返回true。 </span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> time 等待时间 </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> unit 时间单位 小时、分、秒、毫秒等 </span></span><br><span class=\"line\"><span class=\"comment\">     */</span> </span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">tryLock</span><span class=\"params\">(<span class=\"type\">long</span> time, TimeUnit unit)</span> <span class=\"keyword\">throws</span> InterruptedException; </span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">     * 比上面多一个参数，多添加一个锁的有效时间 </span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> waitTime  等待时间 </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> leaseTime 锁有效时间 </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> unit      时间单位 小时、分、秒、毫秒等 </span></span><br><span class=\"line\"><span class=\"comment\">     * waitTime 大于 leaseTime </span></span><br><span class=\"line\"><span class=\"comment\">     */</span> </span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">tryLock</span><span class=\"params\">(<span class=\"type\">long</span> waitTime, <span class=\"type\">long</span> leaseTime, TimeUnit unit)</span> <span class=\"keyword\">throws</span> InterruptedException; </span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">     * 解锁 </span></span><br><span class=\"line\"><span class=\"comment\">     */</span> </span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">unlock</span><span class=\"params\">()</span>; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>lock()：</p>\n<p>1️⃣此方法為加鎖，但是鎖的有效期限採用預設 30 秒</p>\n<p>2️⃣如果主執行緒未釋放，且目前鎖定未呼叫 unlock 方法，則進入到 watchDog 機制</p>\n<p>3️⃣如果主執行緒未釋放，且目前鎖定呼叫 unlock 方法，則直接釋放鎖定</p>\n<h2 id=\"分布式鎖避免缓存擊穿\"><a class=\"markdownIt-Anchor\" href=\"#分布式鎖避免缓存擊穿\">#</a> 分布式鎖避免缓存擊穿</h2>\n<p>使用分布式鎖修改查詢課程資訊的介面。</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Redisson分布式锁 </span></span><br><span class=\"line\"><span class=\"keyword\">public</span>  CoursePublish <span class=\"title function_\">getCoursePublishCache</span><span class=\"params\">(Long courseId)</span>&#123; </span><br><span class=\"line\">        <span class=\"comment\">//查询缓存 </span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">jsonString</span> <span class=\"operator\">=</span> (String) redisTemplate.opsForValue().get(<span class=\"string\">&quot;course:&quot;</span> + courseId); </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(StringUtils.isNotEmpty(jsonString))&#123; </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(jsonString.equals(<span class=\"string\">&quot;null&quot;</span>))&#123; </span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">null</span>; </span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">            <span class=\"type\">CoursePublish</span> <span class=\"variable\">coursePublish</span> <span class=\"operator\">=</span> JSON.parseObject(jsonString, CoursePublish.class); </span><br><span class=\"line\">            <span class=\"keyword\">return</span> coursePublish; </span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123; </span><br><span class=\"line\">            <span class=\"comment\">//每门课程设置一个锁 </span></span><br><span class=\"line\">            <span class=\"type\">RLock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> redissonClient.getLock(<span class=\"string\">&quot;coursequerylock:&quot;</span>+courseId); </span><br><span class=\"line\">            <span class=\"comment\">//获取锁 </span></span><br><span class=\"line\">            lock.lock(); </span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123; </span><br><span class=\"line\">                jsonString = (String) redisTemplate.opsForValue().get(<span class=\"string\">&quot;course:&quot;</span> + courseId); </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(StringUtils.isNotEmpty(jsonString))&#123; </span><br><span class=\"line\">                    <span class=\"type\">CoursePublish</span> <span class=\"variable\">coursePublish</span> <span class=\"operator\">=</span> JSON.parseObject(jsonString, CoursePublish.class); </span><br><span class=\"line\">                    <span class=\"keyword\">return</span> coursePublish; </span><br><span class=\"line\">                &#125; </span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;=========从数据库查询==========&quot;</span>); </span><br><span class=\"line\">                <span class=\"comment\">//从数据库查询 </span></span><br><span class=\"line\">                <span class=\"type\">CoursePublish</span> <span class=\"variable\">coursePublish</span> <span class=\"operator\">=</span> getCoursePublish(courseId); </span><br><span class=\"line\">                redisTemplate.opsForValue().set(<span class=\"string\">&quot;course:&quot;</span> + courseId, JSON.toJSONString(coursePublish),<span class=\"number\">1</span>,TimeUnit.DAYS); </span><br><span class=\"line\">                <span class=\"keyword\">return</span> coursePublish; </span><br><span class=\"line\">            &#125;<span class=\"keyword\">finally</span> &#123; </span><br><span class=\"line\">                <span class=\"comment\">//释放锁 </span></span><br><span class=\"line\">                lock.unlock(); </span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>分布式鎖避免缓存擊穿流程:<br>\n1️⃣注入 RedissonClient<br>\n2️⃣生成以課程 ID 命名的鎖<br>\n3️⃣獲得鎖<br>\n4️⃣如果主線程未執行完，但已超過期時效，會進入 WatchDog 機制，再一次計算過期時間<br>\n5️⃣主線程執行完<br>\n6️⃣釋放鎖</p>\n<img data-src=\"https://usagif.com/wp-content/uploads/gifs/thanks-for-watching-9.gif\" class=\"abc\" width=\"600\" height=\"350\">",
            "tags": [
                "Radis"
            ]
        }
    ]
}