<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://superrjohn.github.io/John</id>
    <title>一切都是過程 • Posts by &#34;docker&#34; tag</title>
    <link href="https://superrjohn.github.io/John" />
    <updated>2023-11-30T10:25:29.553Z</updated>
    <category term="code" />
    <category term="SpringSecurity" />
    <category term="docker" />
    <category term="hexo" />
    <category term="支付" />
    <category term="RabbitMQ" />
    <category term="Radis" />
    <category term="SpringMVC" />
    <category term="Pinia" />
    <category term="Vue2" />
    <category term="SpringBoot" />
    <entry>
        <id>https://superrjohn.github.io/John/2023/11/30/java/docker/docker</id>
        <title>Docker</title>
        <link rel="alternate" href="https://superrjohn.github.io/John/2023/11/30/java/docker/docker"/>
        <content type="html">&lt;p&gt;前言：感謝黑馬提供的課程:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUhQNDExODc5Ny8/cD0zJmFtcDtzcG1faWRfZnJvbT1wYWdlRHJpdmVyJmFtcDt2ZF9zb3VyY2U9MDlkNjZhMWYwNzI1YzU0NTkzNDg5MmYwOGVmNmNiYTU=&#34;&gt;docker 教學&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;安裝docker所需的前置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#安裝docker所需的前置&#34;&gt;#&lt;/a&gt; 安裝 Docker 所需的前置&lt;/h1&gt;
&lt;h2 id=&#34;准备linux环境&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#准备linux环境&#34;&gt;#&lt;/a&gt; 准备 Linux 环境&lt;/h2&gt;
&lt;p&gt;首先，我们要准备一个 Linux 的系统，成本最低的方式就是在本地安装一台虚拟机。为了统一学习环境，不管是使用 MacOS 还是 Windows 系统的同学，都建议安装一台虚拟机。&lt;br&gt;
windows 采用 VMware，Mac 则采用 Fusion,&lt;span class=&#34;rainbow&#34;&gt; 安裝前置請參考黑馬課程中的文檔&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;1️⃣安装 VMware&lt;br&gt;
2️⃣创建虚拟机，Centos7 是比较常用的一个 Linux 发行版本，首先要下载一个 Centos7 的 iso 文件，下載 mini 版即可。&lt;br&gt;
3️⃣安装 Centos7&lt;br&gt;
4️⃣SSH 客户端，使用 Finshell 或其他也可&lt;/p&gt;
&lt;h3 id=&#34;安裝docker&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#安裝docker&#34;&gt;#&lt;/a&gt; 安裝 docker&lt;/h3&gt;
&lt;p&gt;1. 卸载旧版&lt;br&gt;
首先如果系统中已经存在旧的 Docker，则先卸载：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption&gt;&lt;span&gt;shell&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;yum remove docker \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    docker-client \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    docker-client-latest \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    docker-common \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    docker-latest \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    docker-latest-logrotate \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    docker-logrotate \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    docker-engine&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2. 配置 Docker 的 yum 库&lt;br&gt;
首先要安装一个 yum 工具&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption&gt;&lt;span&gt;shell&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;yum install -y yum-utils&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;安装成功后，执行命令，配置 Docker 的 yum 源：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption&gt;&lt;span&gt;bash&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;3. 安装 Docker&lt;br&gt;
 最后，执行命令，安装 Docker&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption&gt;&lt;span&gt;bash&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;4. 启动和校验&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption&gt;&lt;span&gt;bash&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 启动Docker&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;systemctl start docker&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 停止Docker&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;systemctl stop docker&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 重启&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;systemctl restart docker&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 设置开机自启&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;systemctl &lt;span class=&#34;built_in&#34;&gt;enable&lt;/span&gt; docker&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 执行docker ps命令，如果不报错，说明安装启动成功&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;docker ps&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;5. 配置镜像加速 (將 yum 源改為其他，例如阿里云，騰信云等)&lt;/p&gt;
&lt;h1 id=&#34;快速入門&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#快速入門&#34;&gt;#&lt;/a&gt; 快速入門&lt;/h1&gt;
&lt;h2 id=&#34;部署mysql&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#部署mysql&#34;&gt;#&lt;/a&gt; 部署 MySQL&lt;/h2&gt;
&lt;p&gt;首先，我们利用 Docker 来安装一个 MySQL 软件，大家可以对比一下之前传统的安装方式，看看哪个效率更高一些。&lt;br&gt;
如果是利用传统方式部署 MySQL，大概的步骤有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;搜索并下载 MySQL 安装包&lt;/li&gt;
&lt;li&gt;上传至 Linux 环境&lt;/li&gt;
&lt;li&gt;编译和配置环境&lt;/li&gt;
&lt;li&gt;安装&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而使用 Docker 安装，仅仅需要一步即可，在命令行输入下面的命令（建议采用 CV 大法）：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption&gt;&lt;span&gt;shell&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;docker run -d \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  --name mysql \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  -p 3306:3306 \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  -e TZ=Asia/Shanghai \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  -e MYSQL_ROOT_PASSWORD=123 \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  mysql&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行效果如图：&lt;/p&gt;
&lt;img data-src=&#34;/John/img/java/docker/1.png&#34; class=&#34;abc&#34;&gt;
&lt;p&gt;MySQL 安装完毕！通过任意客户端工具即可连接到 MySQL.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;重點 1:&lt;/span&gt;docker 安裝好後，以下載 MYSQL 為例，安裝好後不用進行各種環境配置，這是為什麼？是因為 docker 會自動下載 MYSQL 的鏡像，鏡像包括應用本身、運行所需的環境、配置、系統函數庫，而且 docker 會在運行鏡像時創建一個隔離環境，免受其他進程的影響，稱為容器，所以 docker 中安裝不同的應用，不會因為應用本身所需的環境配置不同，發生應用和應用之間的衝突，因為應用是隔離環境的。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;重點 2:&lt;/span&gt;docker 的應用源在哪裡搜尋和下載？在鏡像倉庫，存儲和管理鏡像的平台，docker 官方維護了一個公共倉庫:docker hub, 不過事實上上載到平台的應用基本上都是軟件公司自己上載到公共倉庫。&lt;/p&gt;
&lt;img data-src=&#34;/John/img/java/docker/2.png&#34; class=&#34;abc&#34;&gt;
&lt;h1 id=&#34;命令解讀&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#命令解讀&#34;&gt;#&lt;/a&gt; 命令解讀&lt;/h1&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption&gt;&lt;span&gt;shell&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;docker run -d \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  --name mysql \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  -p 3306:3306 \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  -e TZ=Asia/Shanghai \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  -e MYSQL_ROOT_PASSWORD=123 \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  mysql&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;span class=&#34;rainbow&#34;&gt;命令解讀:&lt;/span&gt;docker run -d,docker 是前綴，run 是其中一個子命令，docker run 是創建并運行一個容器，-d 是讓容器在後台運行&lt;br&gt;
–name mysql 是給容器起一個名字，必須唯一&lt;br&gt;
 - p 3306:3306, 是設置端口映射，第一個 3306 是映射到虛擬機 (宿者機) 的端口，第二個 3306 是容器的端口，因為 docker 內的應用是隔離環境的，別人沒辦法訪問，但我們可以讓容器的端口映射到虛擬機的端口，然後我們通過訪問虛擬機加映射端口就能訪問到容器。&lt;br&gt;
-e KEY=VALUE 是設置環境變量，這個要查看 docker hub 的應用中，作者讓我們可以配置什麼。-e TZ=Asia/Shangha 是上海時區，-e MYSQL_ROOT_PASSWORD=123 是 MYSQL 的密碼設置為 123&lt;br&gt;
mysql 是指定運行的鏡像名字，指定 docker 要下載誰，搜尋誰下載誰就在這指定，如果想指定 mysql 的版本就需要這樣寫 mysql:5.7, 沒有指定版本默認安裝最新版&lt;/p&gt;
&lt;h2 id=&#34;dokcer常見命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#dokcer常見命令&#34;&gt;#&lt;/a&gt; Dokcer 常見命令&lt;/h2&gt;
&lt;p&gt;不用背命令，用到再查即可&lt;/p&gt;
&lt;img data-src=&#34;/John/img/java/docker/3.png&#34; class=&#34;abc&#34;&gt;
&lt;h2 id=&#34;用nginx演示&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#用nginx演示&#34;&gt;#&lt;/a&gt; 用 nginx 演示&lt;/h2&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption&gt;&lt;span&gt;shell&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;第1步，去DockerHub查看nginx镜像仓库及相关信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;第2步，拉取Nginx镜像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;docker pull nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;第3步，查看镜像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;docker images&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;结果如下：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;REPOSITORY   TAG       IMAGE ID       CREATED         SIZE&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;nginx        latest    605c77e624dd   16 months ago   141MB&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mysql        latest    3218b38490ce   17 months ago   516MB&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;第4步，创建并允许Nginx容器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;docker run -d --name nginx -p 80:80 nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;第5步，查看运行中容器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;docker ps&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;也可以加格式化方式访问，格式会更加清爽&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;docker ps --format &amp;quot;table &amp;#123;&amp;#123;.ID&amp;#125;&amp;#125;\t&amp;#123;&amp;#123;.Image&amp;#125;&amp;#125;\t&amp;#123;&amp;#123;.Ports&amp;#125;&amp;#125;\t&amp;#123;&amp;#123;.Status&amp;#125;&amp;#125;\t&amp;#123;&amp;#123;.Names&amp;#125;&amp;#125;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;第6步，访问网页，地址：http://虚拟机地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;第7步，停止容器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;docker stop nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;第8步，查看所有容器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;docker ps -a --format &amp;quot;table &amp;#123;&amp;#123;.ID&amp;#125;&amp;#125;\t&amp;#123;&amp;#123;.Image&amp;#125;&amp;#125;\t&amp;#123;&amp;#123;.Ports&amp;#125;&amp;#125;\t&amp;#123;&amp;#123;.Status&amp;#125;&amp;#125;\t&amp;#123;&amp;#123;.Names&amp;#125;&amp;#125;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;第9步，再次启动nginx容器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;docker start nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;第10步，再次查看容器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;docker ps --format &amp;quot;table &amp;#123;&amp;#123;.ID&amp;#125;&amp;#125;\t&amp;#123;&amp;#123;.Image&amp;#125;&amp;#125;\t&amp;#123;&amp;#123;.Ports&amp;#125;&amp;#125;\t&amp;#123;&amp;#123;.Status&amp;#125;&amp;#125;\t&amp;#123;&amp;#123;.Names&amp;#125;&amp;#125;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;第11步，查看容器详细信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;docker inspect nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;第12步，进入容器,查看容器内目录,-it是可輸入的總端,因為要指令跟容器交互,進入容器後&lt;span class=&#34;built_in&#34;&gt;exit&lt;/span&gt;退出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;docker exec -it nginx bash&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;或者，可以进入MySQL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;docker exec -it mysql mysql -uroot -p&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;第13步，删除容器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;docker rm nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;发现无法删除，因为容器运行中，强制删除容器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;docker rm -f nginx&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;起別名&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#起別名&#34;&gt;#&lt;/a&gt; 起別名&lt;/h2&gt;
&lt;p&gt;因為有些見用的命令很長，所以我們可以為命令起別名，在 docker 根下進入 vi ~/.bashrc 文件，文件內容有一些默認的別名，像是 alias rm=‘rm -i’,rm 是要起的別名，= 號右邊是原本的命令。&lt;/p&gt;
&lt;p&gt;因為原本 docker ps 返回的內容有些不需要，所以我們用 format 命令指定返回內容，現在我們為這個命令起別名，方便之後工作。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption&gt;&lt;span&gt;shell&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;alias dps=&amp;#x27;docker ps --format &amp;quot;table &amp;#123;&amp;#123;.ID&amp;#125;&amp;#125;\t&amp;#123;&amp;#123;.Image&amp;#125;&amp;#125;\t&amp;#123;&amp;#123;.Ports&amp;#125;&amp;#125;\t&amp;#123;&amp;#123;.Status&amp;#125;&amp;#125;\t&amp;#123;&amp;#123;.Names&amp;#125;&amp;#125;&amp;quot;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;alias dis=&amp;#x27;docker images&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;添加後退出保存，添加後需要再輸入 source ~/.bashrc, 找到這文件才會起效&lt;/p&gt;
&lt;h1 id=&#34;數據卷&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#數據卷&#34;&gt;#&lt;/a&gt; 數據卷&lt;/h1&gt;
&lt;h2 id=&#34;以nginx為例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#以nginx為例&#34;&gt;#&lt;/a&gt; 以 nginx 為例&lt;/h2&gt;
&lt;p&gt;修改 nginx 容器中的 html 目錄下的 index 文件，並將靜態資源部署到 nginx, 但發現用 vi 進入不到容器，因為鏡像只配置能運行的環境，所以我們要修改容器內的東西很困難，所以我們使用數據卷。&lt;/p&gt;
&lt;p&gt;數據卷是一個虛擬目錄，是容器內目錄與宿主機目錄之間映射的橋粱，利用 docker 命令創建數據卷，就會在宿主機文系統創建對應文件，然後讓容器與宿主機目錄掛載，我們修改宿主機文件的內容會映射到容器中。&lt;/p&gt;
&lt;img data-src=&#34;/John/img/java/docker/4.png&#34; class=&#34;abc&#34;&gt;
&lt;p&gt;提示：在執行 docker run 命令時，使用 - v 數據卷：容器目錄可以完成數據卷掛載，當創建容器時，如果掛載了數據卷且數據卷不存在，會自動創建數據卷&lt;/p&gt;
&lt;img data-src=&#34;/John/img/java/docker/5.png&#34; class=&#34;abc&#34;&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption&gt;&lt;span&gt;shell&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;docker rm -f nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;docker run -d --name nginx -p 80:80 -v html:/usr/share/nginx/html nginx&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再輸入 docker volume ls 查看有沒有創成功數據卷，可以再查看數據卷位置 docker volume inspect html, 如下圖數據卷映射流程。&lt;/p&gt;
&lt;img data-src=&#34;/John/img/java/docker/6.png&#34; class=&#34;abc&#34;&gt;
&lt;p&gt;現在我們可以修改數據卷了，在 FinalShell 中找到數據卷位置，修改當中的 nginx 的 index 文件 title&lt;/p&gt;
&lt;img data-src=&#34;/John/img/java/docker/7.png&#34; class=&#34;abc&#34;&gt;
&lt;h2 id=&#34;容器創建後再掛載數據卷&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#容器創建後再掛載數據卷&#34;&gt;#&lt;/a&gt; 容器創建後再掛載數據卷&lt;/h2&gt;
&lt;p&gt;docker inspect nginx 命令，可以查看 nginx 容器詳細信息，其中 Mounts 可以看到數據卷的信息。&lt;/p&gt;
&lt;img data-src=&#34;/John/img/java/docker/8.png&#34; class=&#34;abc&#34;&gt;
&lt;p&gt;以下再查看 MYSQL 容器詳細信息，發現在我們沒有為容器創建數據卷情況下，docker 為我們自動生成了&lt;br&gt;
這種數據卷是匿名卷，名字會自動生成，這會有些問題存在，把容器刪了，但其實匿名卷還在，所以再創一個容器就會把舊的匿名卷覆蓋，可以把匿名卷 copy, 但不實際&lt;/p&gt;
&lt;img data-src=&#34;/John/img/java/docker/9.png&#34; class=&#34;abc&#34;&gt;
&lt;p&gt;現在我們要在 root 建創 mysql 目錄並進行掛載，先 mkdir mysql 創建 mysql 目錄，cd mysql,mkdir data,mkdir conf,mkdir init, 然後把課程資源對應 mysql 的文件放進去，&lt;br&gt;
 然後刪除並重新建立 mysql 容器，並完成本機目錄掛載:&lt;br&gt;
・掛載 /root/mysql/data 到容器內的 /var/lib/mysql 目錄&lt;br&gt;
・掛載 /root/mysql/init 到容器內的 /docker-entrypoint-initdb.d 目錄 (初始化的 SQL 腳本目錄)&lt;br&gt;
・掛載 /root/mysql/conf 到容器內的 /etc/mysql/conf.d 目錄 (這個是 MySQL 設定檔目錄)&lt;/p&gt;
&lt;p&gt;本地掛載注意:&lt;/p&gt;
&lt;img data-src=&#34;/John/img/java/docker/10.png&#34; class=&#34;abc&#34;&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption&gt;&lt;span&gt;shell&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;docker run -d \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;--name mysql \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-p 3306:3306 \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-e MYSQL_ROOT_PASSWORD=123 \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-v /root......[自行輸入] \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-v /root......[自行輸入] \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-v /root......[自行輸入] \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mysql&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;這樣就可以成功掛載，這種方法掛載，以後做升級需要刪了 mysql, 只要 root 中的 mysql 目錄還在，就能重新掛載。&lt;/p&gt;
&lt;h1 id=&#34;自定義鏡像&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#自定義鏡像&#34;&gt;#&lt;/a&gt; 自定義鏡像&lt;/h1&gt;
&lt;h2 id=&#34;dockerfile&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#dockerfile&#34;&gt;#&lt;/a&gt; Dockerfile&lt;/h2&gt;
&lt;img data-src=&#34;/John/img/java/docker/11.png&#34; class=&#34;abc&#34;&gt;
&lt;p&gt;1. 基礎鏡像是應用所依賴的文件，而這個文件是各文件都互通的，像是已安裝 mysql 後，再安裝 redis, 會發現基礎鏡像已存在。&lt;br&gt;
2. 層是應用的操作，每次操作都伯形成新的一層&lt;br&gt;
 3. 入口是程式啟動的腳本和參數&lt;/p&gt;
&lt;img data-src=&#34;/John/img/java/docker/12.png&#34; class=&#34;abc&#34;&gt;
&lt;p&gt;我們可以用 Dockerfile 來簡化鏡像構建，也可以直表接基於 JDK 為基礎鏡像，省略前面的步驟&lt;/p&gt;
&lt;img data-src=&#34;/John/img/java/docker/13.png&#34; class=&#34;abc&#34;&gt;
&lt;p&gt;找到課程資料 demo 文件中關於 dockerfile 的文件，和在 images 文件中的 jdk.tar 包上傳，在 root 中加入 jdk.tar 文件，如何把 tar 包變成自己的鏡像，要輸入指令 docker load -i jdk.tar, 其中 - i 是插入的意思，插入後用 dis 查看 openjdk 存在不，然後在 root 中加入 demo 文件，內容把課程資料的 dockerfile 放入，放入後同樣要用 docker build -t docker-demo ., 因為目前在 /root/demo/ 文件中所以用。即可不用指定文件名，它會找到 Dockerfile 文件。&lt;/p&gt;
&lt;p&gt;之後我們再用 dis 查看，發現 docker-demo 存在，說明構建成功，docker run -d --name dd -p 8090:8090 docker-demo:1.0, 現在把容器運行後就可以訪問了&lt;/p&gt;
&lt;h1 id=&#34;網絡&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#網絡&#34;&gt;#&lt;/a&gt; 網絡&lt;/h1&gt;
&lt;p&gt;上节课我们创建了一个 Java 项目的容器，而 Java 项目往往需要访问其它各种中间件，例如 MySQL、Redis 等。现在，我们的容器之间能否互相访问呢？我们来测试一下&lt;/p&gt;
&lt;p&gt;首先，我们查看下 MySQL 容器的详细信息，重点关注其中的网络 IP 地址：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption&gt;&lt;span&gt;shell&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;1.用基本命令，寻找Networks.bridge.IPAddress属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;docker inspect mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;也可以使用format过滤结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;docker inspect --format=&amp;#x27;&amp;#123;&amp;#123;range .NetworkSettings.Networks&amp;#125;&amp;#125;&amp;#123;&amp;#123;println .IPAddress&amp;#125;&amp;#125;&amp;#123;&amp;#123;end&amp;#125;&amp;#125;&amp;#x27; mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;得到IP地址如下：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;172.17.0.2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;2.然后通过命令进入&lt;span class=&#34;built_in&#34;&gt;dd&lt;/span&gt;容器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;docker exec -it dd bash&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;3.在容器内，通过ping命令测试网络&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ping 172.17.0.2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.053 ms&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.059 ms&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64 bytes from 172.17.0.2: icmp_seq=3 ttl=64 time=0.058 ms&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;发现可以互联，没有问题。&lt;/p&gt;
&lt;p&gt;但是，容器的网络 IP 其实是一个虚拟的 IP，其值并不固定与某一个容器绑定，如果我们在开发时写死某个 IP，而在部署时很可能 MySQL 容器的 IP 会发生变化，连接会失败。&lt;/p&gt;
&lt;p&gt;教学演示：自定义网络&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption&gt;&lt;span&gt;shell&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;1.首先通过命令创建一个网络&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;docker network create hmall&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;2.然后查看网络&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;docker network ls&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;结果：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;NETWORK ID     NAME      DRIVER    SCOPE&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;639bc44d0a87   bridge    bridge    local&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;403f16ec62a2   hmall     bridge    local&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0dc0f72a0fbb   host      host      local&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cd8d3e8df47b   none      null      local&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;其中，除了hmall以外，其它都是默认的网络&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;3.让&lt;span class=&#34;built_in&#34;&gt;dd&lt;/span&gt;和mysql都加入该网络，注意，在加入网络时可以通过--&lt;span class=&#34;built_in&#34;&gt;alias&lt;/span&gt;给容器起别名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;这样该网络内的其它容器可以用别名互相访问！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;3.1.mysql容器，指定别名为db，另外每一个容器都有一个别名是容器名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;docker network connect hmall mysql --alias db&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;3.2.db容器，也就是我们的java项目&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;docker network connect hmall dd&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;4.进入&lt;span class=&#34;built_in&#34;&gt;dd&lt;/span&gt;容器，尝试利用别名访问db&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;4.1.进入容器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;docker exec -it dd bash&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;4.2.用db别名访问&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ping db&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PING db (172.18.0.2) 56(84) bytes of data.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64 bytes from mysql.hmall (172.18.0.2): icmp_seq=1 ttl=64 time=0.070 ms&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64 bytes from mysql.hmall (172.18.0.2): icmp_seq=2 ttl=64 time=0.056 ms&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;4.3.用容器名访问&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ping mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;结果：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PING mysql (172.18.0.2) 56(84) bytes of data.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64 bytes from mysql.hmall (172.18.0.2): icmp_seq=1 ttl=64 time=0.044 ms&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64 bytes from mysql.hmall (172.18.0.2): icmp_seq=2 ttl=64 time=0.054 ms&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;OK，现在无需记住 IP 地址也可以实现容器互联了。&lt;/p&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在自定义网络中，可以给容器起多个别名，默认的别名是容器名本身&lt;/li&gt;
&lt;li&gt;在同一个自定义网络中的容器，可以通过别名互相访问&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;手動部署java應用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#手動部署java應用&#34;&gt;#&lt;/a&gt; 手動部署 JAVA 應用&lt;/h1&gt;
&lt;p&gt;好了，我们已经熟悉了 Docker 的基本用法，接下来可以尝试部署项目了。&lt;br&gt;
在课前资料中已经提供了一个黑马商城项目给大家，如图：&lt;/p&gt;
&lt;p&gt;项目说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hmall：商城的后端代码&lt;/li&gt;
&lt;li&gt;hmall-portal：商城用户端的前端代码&lt;/li&gt;
&lt;li&gt;hmall-admin：商城管理端的前端代码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;部署的容器及端口说明：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;容器名&lt;/th&gt;
&lt;th&gt;端口&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;hmall&lt;/td&gt;
&lt;td&gt;hmall&lt;/td&gt;
&lt;td&gt;8080&lt;/td&gt;
&lt;td&gt;黑马商城后端 API 入口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hmall-portal&lt;/td&gt;
&lt;td&gt;nginx&lt;/td&gt;
&lt;td&gt;18080&lt;/td&gt;
&lt;td&gt;黑马商城用户端入口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hmall-admin&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;18081&lt;/td&gt;
&lt;td&gt;黑马商城管理端入口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mysql&lt;/td&gt;
&lt;td&gt;mysql&lt;/td&gt;
&lt;td&gt;3306&lt;/td&gt;
&lt;td&gt;数据库&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;在正式部署前，我们先删除之前的 nginx、dd 两个容器：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption&gt;&lt;span&gt;shell&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;docker rm -f nginx dd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;mysql 容器中已经准备好了商城的数据，所以就不再删除了。&lt;/p&gt;
&lt;p&gt;hmall 项目是一个 maven 聚合项目，使用 IDEA 打开 hmall 项目，查看项目结构如图&lt;/p&gt;
&lt;p&gt;我们要部署的就是其中的 hm-service，其中的配置文件采用了多环境的方式&lt;/p&gt;
&lt;p&gt;我们将项目打包，将 hm-service 目录下的 Dockerfile 和 hm-service/target 目录下的 hm-service.jar 一起上传到虚拟机的 root 目录&lt;/p&gt;
&lt;p&gt;部署项目：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption&gt;&lt;span&gt;shell&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;1.构建项目镜像，不指定tag，则默认为latest&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;docker build -t hmall .&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;2.查看镜像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;docker images&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;REPOSITORY    TAG       IMAGE ID       CREATED          SIZE&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;hmall         latest    0bb07b2c34b9   43 seconds ago   362MB&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;docker-demo   1.0       49743484da68   24 hours ago     327MB&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;nginx         latest    605c77e624dd   16 months ago    141MB&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mysql         latest    3218b38490ce   17 months ago    516MB&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;3.创建并运行容器，并通过--network将其加入hmall网络，这样才能通过容器名访问mysql&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;docker run -d --name hmall --network hmall -p 8080:8080 hmall&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;测试，通过浏览器访问：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS02cXE1M3FuYjA2NWVramY2dTBhMmt6OjgwODAvc2VhcmNoL2xpc3Q=&#34;&gt;http:// 你的虚拟机地址：8080/search/list&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;hmall-portal 和 hmall-admin 是前端代码，需要基于 nginx 部署。在课前资料中已经给大家提供了 nginx 的部署目录：&lt;/p&gt;
&lt;p&gt;我们现在要做的就是把整个 nginx 目录上传到虚拟机的 /root 目录下：&lt;/p&gt;
&lt;p&gt;然后创建 nginx 容器并完成两个挂载：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把 /root/nginx/nginx.conf 挂载到 /etc/nginx/nginx.conf&lt;/li&gt;
&lt;li&gt;把 /root/nginx/html 挂载到 /usr/share/nginx/html&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于需要让 nginx 同时代理 hmall-portal 和 hmall-admin 两套前端资源，因此我们需要暴露两个端口：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;18080：对应 hmall-portal&lt;/li&gt;
&lt;li&gt;18081：对应 hmall-admin&lt;br&gt;
 命令如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption&gt;&lt;span&gt;shell&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;docker run -d \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  --name nginx \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  -p 18080:18080 \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  -p 18081:18081 \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  -v /root/nginx/html:/usr/share/nginx/html \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  -v /root/nginx/nginx.conf:/etc/nginx/nginx.conf \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  --network hmall \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  nginx&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;测试，通过浏览器访问：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS1pcC0wcDNjbDM1ZWs1ZTZ1MGEya3o6MTgwODA=&#34;&gt;http:// 你的虚拟机 ip:18080&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;自動部署dockercompose&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#自動部署dockercompose&#34;&gt;#&lt;/a&gt; 自動部署 DockerCompose&lt;/h1&gt;
&lt;h1 id=&#34;dockercompose&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#dockercompose&#34;&gt;#&lt;/a&gt; DockerCompose&lt;/h1&gt;
&lt;p&gt;大家可以看到，我们部署一个简单的 java 项目，其中包含 3 个容器：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MySQL&lt;/li&gt;
&lt;li&gt;Nginx&lt;/li&gt;
&lt;li&gt;Java 项目&lt;br&gt;
而稍微复杂的项目，其中还会有各种各样的其它中间件，需要部署的东西远不止 3 个。如果还像之前那样手动的逐一部署，就太麻烦了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而 Docker Compose 就可以帮助我们实现多个相互关联的 Docker 容器的快速部署。它允许用户通过一个单独的 docker-compose.yml 模板文件（YAML 格式）来定义一组相关联的应用容器。&lt;/p&gt;
&lt;p&gt;docker-compose 文件中可以定义多个相互关联的应用容器，每一个应用容器被称为一个服务（service）。由于 service 就是在定义某个应用的运行时参数，因此与 docker run 参数非常相似。&lt;br&gt;
举例来说，用 docker run 部署 MySQL 的命令如下：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption&gt;&lt;span&gt;shell&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;docker run -d \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  --name mysql \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  -p 3306:3306 \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  -e TZ=Asia/Shanghai \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  -e MYSQL_ROOT_PASSWORD=123 \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  -v ./mysql/data:/var/lib/mysql \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  -v ./mysql/conf:/etc/mysql/conf.d \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  -v ./mysql/init:/docker-entrypoint-initdb.d \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  --network hmall&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  mysql&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果用 docker-compose.yml 文件来定义，就是这样：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption&gt;&lt;span&gt;shell&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;version: &amp;quot;3.8&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;services:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  mysql:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    image: mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    container_name: mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ports:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - &amp;quot;3306:3306&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    environment:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      TZ: Asia/Shanghai&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      MYSQL_ROOT_PASSWORD: 123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    volumes:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - &amp;quot;./mysql/conf:/etc/mysql/conf.d&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - &amp;quot;./mysql/data:/var/lib/mysql&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    networks:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - new&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;networks:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  new:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    name: hmall&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对比如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;docker run 参数&lt;/th&gt;
&lt;th&gt;docker compose 指令&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;–name&lt;/td&gt;
&lt;td&gt;container_name&lt;/td&gt;
&lt;td&gt;容器名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-p&lt;/td&gt;
&lt;td&gt;ports&lt;/td&gt;
&lt;td&gt;端口映射&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-e&lt;/td&gt;
&lt;td&gt;environment&lt;/td&gt;
&lt;td&gt;环境变量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-v&lt;/td&gt;
&lt;td&gt;volumes&lt;/td&gt;
&lt;td&gt;数据卷配置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;–network&lt;/td&gt;
&lt;td&gt;networks&lt;/td&gt;
&lt;td&gt;网络&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;明白了其中的对应关系，相信编写 docker-compose 文件应该难不倒大家。&lt;/p&gt;
&lt;p&gt;黑马商城部署文件：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption&gt;&lt;span&gt;shell&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;version: &amp;quot;3.8&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;services:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  mysql:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    image: mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    container_name: mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ports:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - &amp;quot;3306:3306&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    environment:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      TZ: Asia/Shanghai&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      MYSQL_ROOT_PASSWORD: 123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    volumes:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - &amp;quot;./mysql/conf:/etc/mysql/conf.d&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - &amp;quot;./mysql/data:/var/lib/mysql&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - &amp;quot;./mysql/init:/docker-entrypoint-initdb.d&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    networks:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - hm-net&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  hmall:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    build: &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      context: .&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      dockerfile: Dockerfile&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    container_name: hmall&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ports:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - &amp;quot;8080:8080&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    networks:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - hm-net&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    depends_on:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  nginx:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    image: nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    container_name: nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ports:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - &amp;quot;18080:18080&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - &amp;quot;18081:18081&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    volumes:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - &amp;quot;./nginx/nginx.conf:/etc/nginx/nginx.conf&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - &amp;quot;./nginx/html:/usr/share/nginx/html&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    depends_on:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - hmall&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    networks:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      - hm-net&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;networks:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  hm-net:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    name: hmall&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编写好 docker-compose.yml 文件，就可以部署项目了。常见的命令：&lt;br&gt;
基本语法如下：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption&gt;&lt;span&gt;shell&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;docker compose [OPTIONS] [COMMAND]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中，OPTIONS 和 COMMAND 都是可选参数，比较常见的有：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;参数或指令&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Options&lt;/td&gt;
&lt;td&gt;-f&lt;/td&gt;
&lt;td&gt;指定 compose 文件的路径和名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;-p&lt;/td&gt;
&lt;td&gt;指定 project 名称。project 就是当前 compose 文件中设置的多个 service 的集合，是逻辑概念&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Commands&lt;/td&gt;
&lt;td&gt;up&lt;/td&gt;
&lt;td&gt;创建并启动所有 service 容器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;down&lt;/td&gt;
&lt;td&gt;停止并移除所有容器、网络&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;ps&lt;/td&gt;
&lt;td&gt;列出所有启动的容器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;logs&lt;/td&gt;
&lt;td&gt;查看指定容器的日志&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;stop&lt;/td&gt;
&lt;td&gt;停止容器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;start&lt;/td&gt;
&lt;td&gt;启动容器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;restart&lt;/td&gt;
&lt;td&gt;重启容器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;top&lt;/td&gt;
&lt;td&gt;查看运行的进程&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;exec&lt;/td&gt;
&lt;td&gt;在指定的运行中容器中执行命令&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption&gt;&lt;span&gt;shell&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;1.进入root目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cd /root&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;2.删除旧容器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;docker rm -f $(docker ps -qa)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;3.删除hmall镜像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;docker rmi hmall&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;4.清空MySQL数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rm -rf mysql/data&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;5.启动所有, -d 参数是后台启动&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;docker compose up -d&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;结果：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[+] Building 15.5s (8/8) FINISHED&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; =&amp;gt; [internal] load build definition from Dockerfile                                    0.0s&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; =&amp;gt; =&amp;gt; transferring dockerfile: 358B                                                    0.0s&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; =&amp;gt; [internal] load .dockerignore                                                       0.0s&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; =&amp;gt; =&amp;gt; transferring context: 2B                                                         0.0s&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; =&amp;gt; [internal] load metadata for docker.io/library/openjdk:11.0-jre-buster             15.4s&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; =&amp;gt; [1/3] FROM docker.io/library/openjdk:11.0-jre-buster@sha256:3546a17e6fb4ff4fa681c3  0.0s&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; =&amp;gt; [internal] load build context                                                       0.0s&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; =&amp;gt; =&amp;gt; transferring context: 98B                                                        0.0s&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; =&amp;gt; CACHED [2/3] RUN ln -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;amp;&amp;amp; echo   0.0s&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; =&amp;gt; CACHED [3/3] COPY hm-service.jar /app.jar                                           0.0s&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; =&amp;gt; exporting to image                                                                  0.0s&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; =&amp;gt; =&amp;gt; exporting layers                                                                 0.0s&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; =&amp;gt; =&amp;gt; writing image sha256:32eebee16acde22550232f2eb80c69d2ce813ed099640e4cfed2193f71  0.0s&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; =&amp;gt; =&amp;gt; naming to docker.io/library/root-hmall                                           0.0s&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[+] Running 4/4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; ✔ Network hmall    Created                                                             0.2s&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; ✔ Container mysql  Started                                                             0.5s&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; ✔ Container hmall  Started                                                             0.9s&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; ✔ Container nginx  Started                                                             1.5s&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;6.查看镜像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;docker compose images&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CONTAINER           REPOSITORY          TAG                 IMAGE ID            SIZE&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;hmall               root-hmall          latest              32eebee16acd        362MB&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mysql               mysql               latest              3218b38490ce        516MB&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;nginx               nginx               latest              605c77e624dd        141MB&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;7.查看容器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;docker compose ps&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;NAME                IMAGE               COMMAND                  SERVICE             CREATED             STATUS              PORTS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;hmall               root-hmall          &amp;quot;java -jar /app.jar&amp;quot;     hmall               54 seconds ago      Up 52 seconds       0.0.0.0:8080-&amp;gt;8080/tcp, :::8080-&amp;gt;8080/tcp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mysql               mysql               &amp;quot;docker-entrypoint.s…&amp;quot;   mysql               54 seconds ago      Up 53 seconds       0.0.0.0:3306-&amp;gt;3306/tcp, :::3306-&amp;gt;3306/tcp, 33060/tcp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;nginx               nginx               &amp;quot;/docker-entrypoint.…&amp;quot;   nginx               54 seconds ago      Up 52 seconds       80/tcp, 0.0.0.0:18080-18081-&amp;gt;18080-18081/tcp, :::18080-18081-&amp;gt;18080-18081/tcp&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;打开浏览器，访问：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3lvdXJJcDo4MDgw&#34;&gt;http://yourIp:8080&lt;/span&gt;&lt;/p&gt;
&lt;img data-src=&#34;https://i.makeagif.com/media/9-15-2015/bQkqor.gif&#34; class=&#34;abc&#34; width=&#34;600&#34; height=&#34;350&#34;&gt;</content>
        <category term="docker" />
        <updated>2023-11-30T10:25:29.553Z</updated>
    </entry>
</feed>
