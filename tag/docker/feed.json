{
    "version": "https://jsonfeed.org/version/1",
    "title": "一切都是過程 • All posts by \"docker\" tag",
    "description": "",
    "home_page_url": "https://superrjohn.github.io/John",
    "items": [
        {
            "id": "https://superrjohn.github.io/John/2023/11/30/java/docker/docker",
            "url": "https://superrjohn.github.io/John/2023/11/30/java/docker/docker",
            "title": "Docker",
            "date_published": "2023-11-30T10:25:29.553Z",
            "content_html": "<p>前言：感謝黑馬提供的課程:<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUhQNDExODc5Ny8/cD0zJmFtcDtzcG1faWRfZnJvbT1wYWdlRHJpdmVyJmFtcDt2ZF9zb3VyY2U9MDlkNjZhMWYwNzI1YzU0NTkzNDg5MmYwOGVmNmNiYTU=\">docker 教學</span></p>\n<h1 id=\"安裝docker所需的前置\"><a class=\"markdownIt-Anchor\" href=\"#安裝docker所需的前置\">#</a> 安裝 Docker 所需的前置</h1>\n<h2 id=\"准备linux环境\"><a class=\"markdownIt-Anchor\" href=\"#准备linux环境\">#</a> 准备 Linux 环境</h2>\n<p>首先，我们要准备一个 Linux 的系统，成本最低的方式就是在本地安装一台虚拟机。为了统一学习环境，不管是使用 MacOS 还是 Windows 系统的同学，都建议安装一台虚拟机。<br>\nwindows 采用 VMware，Mac 则采用 Fusion,<span class=\"rainbow\"> 安裝前置請參考黑馬課程中的文檔</span>。</p>\n<p>1️⃣安装 VMware<br>\n2️⃣创建虚拟机，Centos7 是比较常用的一个 Linux 发行版本，首先要下载一个 Centos7 的 iso 文件，下載 mini 版即可。<br>\n3️⃣安装 Centos7<br>\n4️⃣SSH 客户端，使用 Finshell 或其他也可</p>\n<h3 id=\"安裝docker\"><a class=\"markdownIt-Anchor\" href=\"#安裝docker\">#</a> 安裝 docker</h3>\n<p>1. 卸载旧版<br>\n首先如果系统中已经存在旧的 Docker，则先卸载：</p>\n<figure class=\"highlight shell\"><figcaption><span>shell</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum remove docker \\</span><br><span class=\"line\">    docker-client \\</span><br><span class=\"line\">    docker-client-latest \\</span><br><span class=\"line\">    docker-common \\</span><br><span class=\"line\">    docker-latest \\</span><br><span class=\"line\">    docker-latest-logrotate \\</span><br><span class=\"line\">    docker-logrotate \\</span><br><span class=\"line\">    docker-engine</span><br></pre></td></tr></table></figure>\n<p>2. 配置 Docker 的 yum 库<br>\n首先要安装一个 yum 工具</p>\n<figure class=\"highlight shell\"><figcaption><span>shell</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y yum-utils</span><br></pre></td></tr></table></figure>\n<p>安装成功后，执行命令，配置 Docker 的 yum 源：</p>\n<figure class=\"highlight bash\"><figcaption><span>bash</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n<p>3. 安装 Docker<br>\n 最后，执行命令，安装 Docker</p>\n<figure class=\"highlight bash\"><figcaption><span>bash</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure>\n<p>4. 启动和校验</p>\n<figure class=\"highlight bash\"><figcaption><span>bash</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动Docker</span></span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止Docker</span></span><br><span class=\"line\">systemctl stop docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\">systemctl restart docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置开机自启</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行docker ps命令，如果不报错，说明安装启动成功</span></span><br><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure>\n<p>5. 配置镜像加速 (將 yum 源改為其他，例如阿里云，騰信云等)</p>\n<h1 id=\"快速入門\"><a class=\"markdownIt-Anchor\" href=\"#快速入門\">#</a> 快速入門</h1>\n<h2 id=\"部署mysql\"><a class=\"markdownIt-Anchor\" href=\"#部署mysql\">#</a> 部署 MySQL</h2>\n<p>首先，我们利用 Docker 来安装一个 MySQL 软件，大家可以对比一下之前传统的安装方式，看看哪个效率更高一些。<br>\n如果是利用传统方式部署 MySQL，大概的步骤有：</p>\n<ul>\n<li>搜索并下载 MySQL 安装包</li>\n<li>上传至 Linux 环境</li>\n<li>编译和配置环境</li>\n<li>安装</li>\n</ul>\n<p>而使用 Docker 安装，仅仅需要一步即可，在命令行输入下面的命令（建议采用 CV 大法）：</p>\n<figure class=\"highlight shell\"><figcaption><span>shell</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  --name mysql \\</span><br><span class=\"line\">  -p 3306:3306 \\</span><br><span class=\"line\">  -e TZ=Asia/Shanghai \\</span><br><span class=\"line\">  -e MYSQL_ROOT_PASSWORD=123 \\</span><br><span class=\"line\">  mysql</span><br></pre></td></tr></table></figure>\n<p>运行效果如图：</p>\n<img data-src=\"/John/img/java/docker/1.png\" class=\"abc\">\n<p>MySQL 安装完毕！通过任意客户端工具即可连接到 MySQL.</p>\n<p><span class=\"rainbow\">重點 1:</span>docker 安裝好後，以下載 MYSQL 為例，安裝好後不用進行各種環境配置，這是為什麼？是因為 docker 會自動下載 MYSQL 的鏡像，鏡像包括應用本身、運行所需的環境、配置、系統函數庫，而且 docker 會在運行鏡像時創建一個隔離環境，免受其他進程的影響，稱為容器，所以 docker 中安裝不同的應用，不會因為應用本身所需的環境配置不同，發生應用和應用之間的衝突，因為應用是隔離環境的。</p>\n<p><span class=\"rainbow\">重點 2:</span>docker 的應用源在哪裡搜尋和下載？在鏡像倉庫，存儲和管理鏡像的平台，docker 官方維護了一個公共倉庫:docker hub, 不過事實上上載到平台的應用基本上都是軟件公司自己上載到公共倉庫。</p>\n<img data-src=\"/John/img/java/docker/2.png\" class=\"abc\">\n<h1 id=\"命令解讀\"><a class=\"markdownIt-Anchor\" href=\"#命令解讀\">#</a> 命令解讀</h1>\n<figure class=\"highlight shell\"><figcaption><span>shell</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  --name mysql \\</span><br><span class=\"line\">  -p 3306:3306 \\</span><br><span class=\"line\">  -e TZ=Asia/Shanghai \\</span><br><span class=\"line\">  -e MYSQL_ROOT_PASSWORD=123 \\</span><br><span class=\"line\">  mysql</span><br></pre></td></tr></table></figure>\n<p><span class=\"rainbow\">命令解讀:</span>docker run -d,docker 是前綴，run 是其中一個子命令，docker run 是創建并運行一個容器，-d 是讓容器在後台運行<br>\n–name mysql 是給容器起一個名字，必須唯一<br>\n - p 3306:3306, 是設置端口映射，第一個 3306 是映射到虛擬機 (宿者機) 的端口，第二個 3306 是容器的端口，因為 docker 內的應用是隔離環境的，別人沒辦法訪問，但我們可以讓容器的端口映射到虛擬機的端口，然後我們通過訪問虛擬機加映射端口就能訪問到容器。<br>\n-e KEY=VALUE 是設置環境變量，這個要查看 docker hub 的應用中，作者讓我們可以配置什麼。-e TZ=Asia/Shangha 是上海時區，-e MYSQL_ROOT_PASSWORD=123 是 MYSQL 的密碼設置為 123<br>\nmysql 是指定運行的鏡像名字，指定 docker 要下載誰，搜尋誰下載誰就在這指定，如果想指定 mysql 的版本就需要這樣寫 mysql:5.7, 沒有指定版本默認安裝最新版</p>\n<h2 id=\"dokcer常見命令\"><a class=\"markdownIt-Anchor\" href=\"#dokcer常見命令\">#</a> Dokcer 常見命令</h2>\n<p>不用背命令，用到再查即可</p>\n<img data-src=\"/John/img/java/docker/3.png\" class=\"abc\">\n<h2 id=\"用nginx演示\"><a class=\"markdownIt-Anchor\" href=\"#用nginx演示\">#</a> 用 nginx 演示</h2>\n<figure class=\"highlight shell\"><figcaption><span>shell</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第1步，去DockerHub查看nginx镜像仓库及相关信息</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第2步，拉取Nginx镜像</span></span><br><span class=\"line\">docker pull nginx</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第3步，查看镜像</span></span><br><span class=\"line\">docker images</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">结果如下：</span></span><br><span class=\"line\">REPOSITORY   TAG       IMAGE ID       CREATED         SIZE</span><br><span class=\"line\">nginx        latest    605c77e624dd   16 months ago   141MB</span><br><span class=\"line\">mysql        latest    3218b38490ce   17 months ago   516MB</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第4步，创建并允许Nginx容器</span></span><br><span class=\"line\">docker run -d --name nginx -p 80:80 nginx</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第5步，查看运行中容器</span></span><br><span class=\"line\">docker ps</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">也可以加格式化方式访问，格式会更加清爽</span></span><br><span class=\"line\">docker ps --format &quot;table &#123;&#123;.ID&#125;&#125;\\t&#123;&#123;.Image&#125;&#125;\\t&#123;&#123;.Ports&#125;&#125;\\t&#123;&#123;.Status&#125;&#125;\\t&#123;&#123;.Names&#125;&#125;&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第6步，访问网页，地址：http://虚拟机地址</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第7步，停止容器</span></span><br><span class=\"line\">docker stop nginx</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第8步，查看所有容器</span></span><br><span class=\"line\">docker ps -a --format &quot;table &#123;&#123;.ID&#125;&#125;\\t&#123;&#123;.Image&#125;&#125;\\t&#123;&#123;.Ports&#125;&#125;\\t&#123;&#123;.Status&#125;&#125;\\t&#123;&#123;.Names&#125;&#125;&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第9步，再次启动nginx容器</span></span><br><span class=\"line\">docker start nginx</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第10步，再次查看容器</span></span><br><span class=\"line\">docker ps --format &quot;table &#123;&#123;.ID&#125;&#125;\\t&#123;&#123;.Image&#125;&#125;\\t&#123;&#123;.Ports&#125;&#125;\\t&#123;&#123;.Status&#125;&#125;\\t&#123;&#123;.Names&#125;&#125;&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第11步，查看容器详细信息</span></span><br><span class=\"line\">docker inspect nginx</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第12步，进入容器,查看容器内目录,-it是可輸入的總端,因為要指令跟容器交互,進入容器後<span class=\"built_in\">exit</span>退出</span></span><br><span class=\"line\">docker exec -it nginx bash</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">或者，可以进入MySQL</span></span><br><span class=\"line\">docker exec -it mysql mysql -uroot -p</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第13步，删除容器</span></span><br><span class=\"line\">docker rm nginx</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">发现无法删除，因为容器运行中，强制删除容器</span></span><br><span class=\"line\">docker rm -f nginx</span><br></pre></td></tr></table></figure>\n<h2 id=\"起別名\"><a class=\"markdownIt-Anchor\" href=\"#起別名\">#</a> 起別名</h2>\n<p>因為有些見用的命令很長，所以我們可以為命令起別名，在 docker 根下進入 vi ~/.bashrc 文件，文件內容有一些默認的別名，像是 alias rm=‘rm -i’,rm 是要起的別名，= 號右邊是原本的命令。</p>\n<p>因為原本 docker ps 返回的內容有些不需要，所以我們用 format 命令指定返回內容，現在我們為這個命令起別名，方便之後工作。</p>\n<figure class=\"highlight shell\"><figcaption><span>shell</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias dps=&#x27;docker ps --format &quot;table &#123;&#123;.ID&#125;&#125;\\t&#123;&#123;.Image&#125;&#125;\\t&#123;&#123;.Ports&#125;&#125;\\t&#123;&#123;.Status&#125;&#125;\\t&#123;&#123;.Names&#125;&#125;&quot;&#x27;</span><br><span class=\"line\">alias dis=&#x27;docker images&#x27;</span><br></pre></td></tr></table></figure>\n<p>添加後退出保存，添加後需要再輸入 source ~/.bashrc, 找到這文件才會起效</p>\n<h1 id=\"數據卷\"><a class=\"markdownIt-Anchor\" href=\"#數據卷\">#</a> 數據卷</h1>\n<h2 id=\"以nginx為例\"><a class=\"markdownIt-Anchor\" href=\"#以nginx為例\">#</a> 以 nginx 為例</h2>\n<p>修改 nginx 容器中的 html 目錄下的 index 文件，並將靜態資源部署到 nginx, 但發現用 vi 進入不到容器，因為鏡像只配置能運行的環境，所以我們要修改容器內的東西很困難，所以我們使用數據卷。</p>\n<p>數據卷是一個虛擬目錄，是容器內目錄與宿主機目錄之間映射的橋粱，利用 docker 命令創建數據卷，就會在宿主機文系統創建對應文件，然後讓容器與宿主機目錄掛載，我們修改宿主機文件的內容會映射到容器中。</p>\n<img data-src=\"/John/img/java/docker/4.png\" class=\"abc\">\n<p>提示：在執行 docker run 命令時，使用 - v 數據卷：容器目錄可以完成數據卷掛載，當創建容器時，如果掛載了數據卷且數據卷不存在，會自動創建數據卷</p>\n<img data-src=\"/John/img/java/docker/5.png\" class=\"abc\">\n<figure class=\"highlight shell\"><figcaption><span>shell</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm -f nginx</span><br><span class=\"line\">docker run -d --name nginx -p 80:80 -v html:/usr/share/nginx/html nginx</span><br></pre></td></tr></table></figure>\n<p>再輸入 docker volume ls 查看有沒有創成功數據卷，可以再查看數據卷位置 docker volume inspect html, 如下圖數據卷映射流程。</p>\n<img data-src=\"/John/img/java/docker/6.png\" class=\"abc\">\n<p>現在我們可以修改數據卷了，在 FinalShell 中找到數據卷位置，修改當中的 nginx 的 index 文件 title</p>\n<img data-src=\"/John/img/java/docker/7.png\" class=\"abc\">\n<h2 id=\"容器創建後再掛載數據卷\"><a class=\"markdownIt-Anchor\" href=\"#容器創建後再掛載數據卷\">#</a> 容器創建後再掛載數據卷</h2>\n<p>docker inspect nginx 命令，可以查看 nginx 容器詳細信息，其中 Mounts 可以看到數據卷的信息。</p>\n<img data-src=\"/John/img/java/docker/8.png\" class=\"abc\">\n<p>以下再查看 MYSQL 容器詳細信息，發現在我們沒有為容器創建數據卷情況下，docker 為我們自動生成了<br>\n這種數據卷是匿名卷，名字會自動生成，這會有些問題存在，把容器刪了，但其實匿名卷還在，所以再創一個容器就會把舊的匿名卷覆蓋，可以把匿名卷 copy, 但不實際</p>\n<img data-src=\"/John/img/java/docker/9.png\" class=\"abc\">\n<p>現在我們要在 root 建創 mysql 目錄並進行掛載，先 mkdir mysql 創建 mysql 目錄，cd mysql,mkdir data,mkdir conf,mkdir init, 然後把課程資源對應 mysql 的文件放進去，<br>\n 然後刪除並重新建立 mysql 容器，並完成本機目錄掛載:<br>\n・掛載 /root/mysql/data 到容器內的 /var/lib/mysql 目錄<br>\n・掛載 /root/mysql/init 到容器內的 /docker-entrypoint-initdb.d 目錄 (初始化的 SQL 腳本目錄)<br>\n・掛載 /root/mysql/conf 到容器內的 /etc/mysql/conf.d 目錄 (這個是 MySQL 設定檔目錄)</p>\n<p>本地掛載注意:</p>\n<img data-src=\"/John/img/java/docker/10.png\" class=\"abc\">\n<figure class=\"highlight shell\"><figcaption><span>shell</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">--name mysql \\</span><br><span class=\"line\">-p 3306:3306 \\</span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=123 \\</span><br><span class=\"line\">-v /root......[自行輸入] \\</span><br><span class=\"line\">-v /root......[自行輸入] \\</span><br><span class=\"line\">-v /root......[自行輸入] \\</span><br><span class=\"line\">mysql</span><br></pre></td></tr></table></figure>\n<p>這樣就可以成功掛載，這種方法掛載，以後做升級需要刪了 mysql, 只要 root 中的 mysql 目錄還在，就能重新掛載。</p>\n<h1 id=\"自定義鏡像\"><a class=\"markdownIt-Anchor\" href=\"#自定義鏡像\">#</a> 自定義鏡像</h1>\n<h2 id=\"dockerfile\"><a class=\"markdownIt-Anchor\" href=\"#dockerfile\">#</a> Dockerfile</h2>\n<img data-src=\"/John/img/java/docker/11.png\" class=\"abc\">\n<p>1. 基礎鏡像是應用所依賴的文件，而這個文件是各文件都互通的，像是已安裝 mysql 後，再安裝 redis, 會發現基礎鏡像已存在。<br>\n2. 層是應用的操作，每次操作都伯形成新的一層<br>\n 3. 入口是程式啟動的腳本和參數</p>\n<img data-src=\"/John/img/java/docker/12.png\" class=\"abc\">\n<p>我們可以用 Dockerfile 來簡化鏡像構建，也可以直表接基於 JDK 為基礎鏡像，省略前面的步驟</p>\n<img data-src=\"/John/img/java/docker/13.png\" class=\"abc\">\n<p>找到課程資料 demo 文件中關於 dockerfile 的文件，和在 images 文件中的 jdk.tar 包上傳，在 root 中加入 jdk.tar 文件，如何把 tar 包變成自己的鏡像，要輸入指令 docker load -i jdk.tar, 其中 - i 是插入的意思，插入後用 dis 查看 openjdk 存在不，然後在 root 中加入 demo 文件，內容把課程資料的 dockerfile 放入，放入後同樣要用 docker build -t docker-demo ., 因為目前在 /root/demo/ 文件中所以用。即可不用指定文件名，它會找到 Dockerfile 文件。</p>\n<p>之後我們再用 dis 查看，發現 docker-demo 存在，說明構建成功，docker run -d --name dd -p 8090:8090 docker-demo:1.0, 現在把容器運行後就可以訪問了</p>\n<h1 id=\"網絡\"><a class=\"markdownIt-Anchor\" href=\"#網絡\">#</a> 網絡</h1>\n<p>上节课我们创建了一个 Java 项目的容器，而 Java 项目往往需要访问其它各种中间件，例如 MySQL、Redis 等。现在，我们的容器之间能否互相访问呢？我们来测试一下</p>\n<p>首先，我们查看下 MySQL 容器的详细信息，重点关注其中的网络 IP 地址：</p>\n<figure class=\"highlight shell\"><figcaption><span>shell</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1.用基本命令，寻找Networks.bridge.IPAddress属性</span></span><br><span class=\"line\">docker inspect mysql</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">也可以使用format过滤结果</span></span><br><span class=\"line\">docker inspect --format=&#x27;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;println .IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27; mysql</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">得到IP地址如下：</span></span><br><span class=\"line\">172.17.0.2</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2.然后通过命令进入<span class=\"built_in\">dd</span>容器</span></span><br><span class=\"line\">docker exec -it dd bash</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">3.在容器内，通过ping命令测试网络</span></span><br><span class=\"line\">ping 172.17.0.2</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">结果</span></span><br><span class=\"line\">PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.</span><br><span class=\"line\">64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.053 ms</span><br><span class=\"line\">64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.059 ms</span><br><span class=\"line\">64 bytes from 172.17.0.2: icmp_seq=3 ttl=64 time=0.058 ms</span><br></pre></td></tr></table></figure>\n<p>发现可以互联，没有问题。</p>\n<p>但是，容器的网络 IP 其实是一个虚拟的 IP，其值并不固定与某一个容器绑定，如果我们在开发时写死某个 IP，而在部署时很可能 MySQL 容器的 IP 会发生变化，连接会失败。</p>\n<p>教学演示：自定义网络</p>\n<figure class=\"highlight shell\"><figcaption><span>shell</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1.首先通过命令创建一个网络</span></span><br><span class=\"line\">docker network create hmall</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2.然后查看网络</span></span><br><span class=\"line\">docker network ls</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">结果：</span></span><br><span class=\"line\">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class=\"line\">639bc44d0a87   bridge    bridge    local</span><br><span class=\"line\">403f16ec62a2   hmall     bridge    local</span><br><span class=\"line\">0dc0f72a0fbb   host      host      local</span><br><span class=\"line\">cd8d3e8df47b   none      null      local</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">其中，除了hmall以外，其它都是默认的网络</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">3.让<span class=\"built_in\">dd</span>和mysql都加入该网络，注意，在加入网络时可以通过--<span class=\"built_in\">alias</span>给容器起别名</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这样该网络内的其它容器可以用别名互相访问！</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">3.1.mysql容器，指定别名为db，另外每一个容器都有一个别名是容器名</span></span><br><span class=\"line\">docker network connect hmall mysql --alias db</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">3.2.db容器，也就是我们的java项目</span></span><br><span class=\"line\">docker network connect hmall dd</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">4.进入<span class=\"built_in\">dd</span>容器，尝试利用别名访问db</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">4.1.进入容器</span></span><br><span class=\"line\">docker exec -it dd bash</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">4.2.用db别名访问</span></span><br><span class=\"line\">ping db</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">结果</span></span><br><span class=\"line\">PING db (172.18.0.2) 56(84) bytes of data.</span><br><span class=\"line\">64 bytes from mysql.hmall (172.18.0.2): icmp_seq=1 ttl=64 time=0.070 ms</span><br><span class=\"line\">64 bytes from mysql.hmall (172.18.0.2): icmp_seq=2 ttl=64 time=0.056 ms</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">4.3.用容器名访问</span></span><br><span class=\"line\">ping mysql</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">结果：</span></span><br><span class=\"line\">PING mysql (172.18.0.2) 56(84) bytes of data.</span><br><span class=\"line\">64 bytes from mysql.hmall (172.18.0.2): icmp_seq=1 ttl=64 time=0.044 ms</span><br><span class=\"line\">64 bytes from mysql.hmall (172.18.0.2): icmp_seq=2 ttl=64 time=0.054 ms</span><br></pre></td></tr></table></figure>\n<p>OK，现在无需记住 IP 地址也可以实现容器互联了。</p>\n<p>总结：</p>\n<ul>\n<li>在自定义网络中，可以给容器起多个别名，默认的别名是容器名本身</li>\n<li>在同一个自定义网络中的容器，可以通过别名互相访问</li>\n</ul>\n<h1 id=\"手動部署java應用\"><a class=\"markdownIt-Anchor\" href=\"#手動部署java應用\">#</a> 手動部署 JAVA 應用</h1>\n<p>好了，我们已经熟悉了 Docker 的基本用法，接下来可以尝试部署项目了。<br>\n在课前资料中已经提供了一个黑马商城项目给大家，如图：</p>\n<p>项目说明：</p>\n<ul>\n<li>hmall：商城的后端代码</li>\n<li>hmall-portal：商城用户端的前端代码</li>\n<li>hmall-admin：商城管理端的前端代码</li>\n</ul>\n<p>部署的容器及端口说明：</p>\n<table>\n<thead>\n<tr>\n<th>项目</th>\n<th>容器名</th>\n<th>端口</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>hmall</td>\n<td>hmall</td>\n<td>8080</td>\n<td>黑马商城后端 API 入口</td>\n</tr>\n<tr>\n<td>hmall-portal</td>\n<td>nginx</td>\n<td>18080</td>\n<td>黑马商城用户端入口</td>\n</tr>\n<tr>\n<td>hmall-admin</td>\n<td></td>\n<td>18081</td>\n<td>黑马商城管理端入口</td>\n</tr>\n<tr>\n<td>mysql</td>\n<td>mysql</td>\n<td>3306</td>\n<td>数据库</td>\n</tr>\n</tbody>\n</table>\n<p>在正式部署前，我们先删除之前的 nginx、dd 两个容器：</p>\n<figure class=\"highlight shell\"><figcaption><span>shell</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm -f nginx dd</span><br></pre></td></tr></table></figure>\n<p>mysql 容器中已经准备好了商城的数据，所以就不再删除了。</p>\n<p>hmall 项目是一个 maven 聚合项目，使用 IDEA 打开 hmall 项目，查看项目结构如图</p>\n<p>我们要部署的就是其中的 hm-service，其中的配置文件采用了多环境的方式</p>\n<p>我们将项目打包，将 hm-service 目录下的 Dockerfile 和 hm-service/target 目录下的 hm-service.jar 一起上传到虚拟机的 root 目录</p>\n<p>部署项目：</p>\n<figure class=\"highlight shell\"><figcaption><span>shell</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1.构建项目镜像，不指定tag，则默认为latest</span></span><br><span class=\"line\">docker build -t hmall .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2.查看镜像</span></span><br><span class=\"line\">docker images</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">结果</span></span><br><span class=\"line\">REPOSITORY    TAG       IMAGE ID       CREATED          SIZE</span><br><span class=\"line\">hmall         latest    0bb07b2c34b9   43 seconds ago   362MB</span><br><span class=\"line\">docker-demo   1.0       49743484da68   24 hours ago     327MB</span><br><span class=\"line\">nginx         latest    605c77e624dd   16 months ago    141MB</span><br><span class=\"line\">mysql         latest    3218b38490ce   17 months ago    516MB</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">3.创建并运行容器，并通过--network将其加入hmall网络，这样才能通过容器名访问mysql</span></span><br><span class=\"line\">docker run -d --name hmall --network hmall -p 8080:8080 hmall</span><br></pre></td></tr></table></figure>\n<p>测试，通过浏览器访问：<span class=\"exturl\" data-url=\"aHR0cDovL3huLS02cXE1M3FuYjA2NWVramY2dTBhMmt6OjgwODAvc2VhcmNoL2xpc3Q=\">http:// 你的虚拟机地址：8080/search/list</span></p>\n<p>hmall-portal 和 hmall-admin 是前端代码，需要基于 nginx 部署。在课前资料中已经给大家提供了 nginx 的部署目录：</p>\n<p>我们现在要做的就是把整个 nginx 目录上传到虚拟机的 /root 目录下：</p>\n<p>然后创建 nginx 容器并完成两个挂载：</p>\n<ul>\n<li>把 /root/nginx/nginx.conf 挂载到 /etc/nginx/nginx.conf</li>\n<li>把 /root/nginx/html 挂载到 /usr/share/nginx/html</li>\n</ul>\n<p>由于需要让 nginx 同时代理 hmall-portal 和 hmall-admin 两套前端资源，因此我们需要暴露两个端口：</p>\n<ul>\n<li>18080：对应 hmall-portal</li>\n<li>18081：对应 hmall-admin<br>\n 命令如下：</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption><span>shell</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  --name nginx \\</span><br><span class=\"line\">  -p 18080:18080 \\</span><br><span class=\"line\">  -p 18081:18081 \\</span><br><span class=\"line\">  -v /root/nginx/html:/usr/share/nginx/html \\</span><br><span class=\"line\">  -v /root/nginx/nginx.conf:/etc/nginx/nginx.conf \\</span><br><span class=\"line\">  --network hmall \\</span><br><span class=\"line\">  nginx</span><br></pre></td></tr></table></figure>\n<p>测试，通过浏览器访问：<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1pcC0wcDNjbDM1ZWs1ZTZ1MGEya3o6MTgwODA=\">http:// 你的虚拟机 ip:18080</span></p>\n<h1 id=\"自動部署dockercompose\"><a class=\"markdownIt-Anchor\" href=\"#自動部署dockercompose\">#</a> 自動部署 DockerCompose</h1>\n<h1 id=\"dockercompose\"><a class=\"markdownIt-Anchor\" href=\"#dockercompose\">#</a> DockerCompose</h1>\n<p>大家可以看到，我们部署一个简单的 java 项目，其中包含 3 个容器：</p>\n<ul>\n<li>MySQL</li>\n<li>Nginx</li>\n<li>Java 项目<br>\n而稍微复杂的项目，其中还会有各种各样的其它中间件，需要部署的东西远不止 3 个。如果还像之前那样手动的逐一部署，就太麻烦了。</li>\n</ul>\n<p>而 Docker Compose 就可以帮助我们实现多个相互关联的 Docker 容器的快速部署。它允许用户通过一个单独的 docker-compose.yml 模板文件（YAML 格式）来定义一组相关联的应用容器。</p>\n<p>docker-compose 文件中可以定义多个相互关联的应用容器，每一个应用容器被称为一个服务（service）。由于 service 就是在定义某个应用的运行时参数，因此与 docker run 参数非常相似。<br>\n举例来说，用 docker run 部署 MySQL 的命令如下：</p>\n<figure class=\"highlight shell\"><figcaption><span>shell</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  --name mysql \\</span><br><span class=\"line\">  -p 3306:3306 \\</span><br><span class=\"line\">  -e TZ=Asia/Shanghai \\</span><br><span class=\"line\">  -e MYSQL_ROOT_PASSWORD=123 \\</span><br><span class=\"line\">  -v ./mysql/data:/var/lib/mysql \\</span><br><span class=\"line\">  -v ./mysql/conf:/etc/mysql/conf.d \\</span><br><span class=\"line\">  -v ./mysql/init:/docker-entrypoint-initdb.d \\</span><br><span class=\"line\">  --network hmall</span><br><span class=\"line\">  mysql</span><br></pre></td></tr></table></figure>\n<p>如果用 docker-compose.yml 文件来定义，就是这样：</p>\n<figure class=\"highlight shell\"><figcaption><span>shell</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &quot;3.8&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\">  mysql:</span><br><span class=\"line\">    image: mysql</span><br><span class=\"line\">    container_name: mysql</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;3306:3306&quot;</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      TZ: Asia/Shanghai</span><br><span class=\"line\">      MYSQL_ROOT_PASSWORD: 123</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - &quot;./mysql/conf:/etc/mysql/conf.d&quot;</span><br><span class=\"line\">      - &quot;./mysql/data:/var/lib/mysql&quot;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - new</span><br><span class=\"line\">networks:</span><br><span class=\"line\">  new:</span><br><span class=\"line\">    name: hmall</span><br></pre></td></tr></table></figure>\n<p>对比如下：</p>\n<table>\n<thead>\n<tr>\n<th>docker run 参数</th>\n<th>docker compose 指令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>–name</td>\n<td>container_name</td>\n<td>容器名称</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>ports</td>\n<td>端口映射</td>\n</tr>\n<tr>\n<td>-e</td>\n<td>environment</td>\n<td>环境变量</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>volumes</td>\n<td>数据卷配置</td>\n</tr>\n<tr>\n<td>–network</td>\n<td>networks</td>\n<td>网络</td>\n</tr>\n</tbody>\n</table>\n<p>明白了其中的对应关系，相信编写 docker-compose 文件应该难不倒大家。</p>\n<p>黑马商城部署文件：</p>\n<figure class=\"highlight shell\"><figcaption><span>shell</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &quot;3.8&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\">  mysql:</span><br><span class=\"line\">    image: mysql</span><br><span class=\"line\">    container_name: mysql</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;3306:3306&quot;</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      TZ: Asia/Shanghai</span><br><span class=\"line\">      MYSQL_ROOT_PASSWORD: 123</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - &quot;./mysql/conf:/etc/mysql/conf.d&quot;</span><br><span class=\"line\">      - &quot;./mysql/data:/var/lib/mysql&quot;</span><br><span class=\"line\">      - &quot;./mysql/init:/docker-entrypoint-initdb.d&quot;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - hm-net</span><br><span class=\"line\">  hmall:</span><br><span class=\"line\">    build: </span><br><span class=\"line\">      context: .</span><br><span class=\"line\">      dockerfile: Dockerfile</span><br><span class=\"line\">    container_name: hmall</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;8080:8080&quot;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - hm-net</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - mysql</span><br><span class=\"line\">  nginx:</span><br><span class=\"line\">    image: nginx</span><br><span class=\"line\">    container_name: nginx</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;18080:18080&quot;</span><br><span class=\"line\">      - &quot;18081:18081&quot;</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - &quot;./nginx/nginx.conf:/etc/nginx/nginx.conf&quot;</span><br><span class=\"line\">      - &quot;./nginx/html:/usr/share/nginx/html&quot;</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - hmall</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - hm-net</span><br><span class=\"line\">networks:</span><br><span class=\"line\">  hm-net:</span><br><span class=\"line\">    name: hmall</span><br></pre></td></tr></table></figure>\n<p>编写好 docker-compose.yml 文件，就可以部署项目了。常见的命令：<br>\n基本语法如下：</p>\n<figure class=\"highlight shell\"><figcaption><span>shell</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker compose [OPTIONS] [COMMAND]</span><br></pre></td></tr></table></figure>\n<p>其中，OPTIONS 和 COMMAND 都是可选参数，比较常见的有：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>参数或指令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Options</td>\n<td>-f</td>\n<td>指定 compose 文件的路径和名称</td>\n</tr>\n<tr>\n<td></td>\n<td>-p</td>\n<td>指定 project 名称。project 就是当前 compose 文件中设置的多个 service 的集合，是逻辑概念</td>\n</tr>\n<tr>\n<td>Commands</td>\n<td>up</td>\n<td>创建并启动所有 service 容器</td>\n</tr>\n<tr>\n<td></td>\n<td>down</td>\n<td>停止并移除所有容器、网络</td>\n</tr>\n<tr>\n<td></td>\n<td>ps</td>\n<td>列出所有启动的容器</td>\n</tr>\n<tr>\n<td></td>\n<td>logs</td>\n<td>查看指定容器的日志</td>\n</tr>\n<tr>\n<td></td>\n<td>stop</td>\n<td>停止容器</td>\n</tr>\n<tr>\n<td></td>\n<td>start</td>\n<td>启动容器</td>\n</tr>\n<tr>\n<td></td>\n<td>restart</td>\n<td>重启容器</td>\n</tr>\n<tr>\n<td></td>\n<td>top</td>\n<td>查看运行的进程</td>\n</tr>\n<tr>\n<td></td>\n<td>exec</td>\n<td>在指定的运行中容器中执行命令</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight shell\"><figcaption><span>shell</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1.进入root目录</span></span><br><span class=\"line\">cd /root</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2.删除旧容器</span></span><br><span class=\"line\">docker rm -f $(docker ps -qa)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">3.删除hmall镜像</span></span><br><span class=\"line\">docker rmi hmall</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">4.清空MySQL数据</span></span><br><span class=\"line\">rm -rf mysql/data</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">5.启动所有, -d 参数是后台启动</span></span><br><span class=\"line\">docker compose up -d</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">结果：</span></span><br><span class=\"line\">[+] Building 15.5s (8/8) FINISHED</span><br><span class=\"line\"> =&gt; [internal] load build definition from Dockerfile                                    0.0s</span><br><span class=\"line\"> =&gt; =&gt; transferring dockerfile: 358B                                                    0.0s</span><br><span class=\"line\"> =&gt; [internal] load .dockerignore                                                       0.0s</span><br><span class=\"line\"> =&gt; =&gt; transferring context: 2B                                                         0.0s</span><br><span class=\"line\"> =&gt; [internal] load metadata for docker.io/library/openjdk:11.0-jre-buster             15.4s</span><br><span class=\"line\"> =&gt; [1/3] FROM docker.io/library/openjdk:11.0-jre-buster@sha256:3546a17e6fb4ff4fa681c3  0.0s</span><br><span class=\"line\"> =&gt; [internal] load build context                                                       0.0s</span><br><span class=\"line\"> =&gt; =&gt; transferring context: 98B                                                        0.0s</span><br><span class=\"line\"> =&gt; CACHED [2/3] RUN ln -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; echo   0.0s</span><br><span class=\"line\"> =&gt; CACHED [3/3] COPY hm-service.jar /app.jar                                           0.0s</span><br><span class=\"line\"> =&gt; exporting to image                                                                  0.0s</span><br><span class=\"line\"> =&gt; =&gt; exporting layers                                                                 0.0s</span><br><span class=\"line\"> =&gt; =&gt; writing image sha256:32eebee16acde22550232f2eb80c69d2ce813ed099640e4cfed2193f71  0.0s</span><br><span class=\"line\"> =&gt; =&gt; naming to docker.io/library/root-hmall                                           0.0s</span><br><span class=\"line\">[+] Running 4/4</span><br><span class=\"line\"> ✔ Network hmall    Created                                                             0.2s</span><br><span class=\"line\"> ✔ Container mysql  Started                                                             0.5s</span><br><span class=\"line\"> ✔ Container hmall  Started                                                             0.9s</span><br><span class=\"line\"> ✔ Container nginx  Started                                                             1.5s</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">6.查看镜像</span></span><br><span class=\"line\">docker compose images</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">结果</span></span><br><span class=\"line\">CONTAINER           REPOSITORY          TAG                 IMAGE ID            SIZE</span><br><span class=\"line\">hmall               root-hmall          latest              32eebee16acd        362MB</span><br><span class=\"line\">mysql               mysql               latest              3218b38490ce        516MB</span><br><span class=\"line\">nginx               nginx               latest              605c77e624dd        141MB</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">7.查看容器</span></span><br><span class=\"line\">docker compose ps</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">结果</span></span><br><span class=\"line\">NAME                IMAGE               COMMAND                  SERVICE             CREATED             STATUS              PORTS</span><br><span class=\"line\">hmall               root-hmall          &quot;java -jar /app.jar&quot;     hmall               54 seconds ago      Up 52 seconds       0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp</span><br><span class=\"line\">mysql               mysql               &quot;docker-entrypoint.s…&quot;   mysql               54 seconds ago      Up 53 seconds       0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp</span><br><span class=\"line\">nginx               nginx               &quot;/docker-entrypoint.…&quot;   nginx               54 seconds ago      Up 52 seconds       80/tcp, 0.0.0.0:18080-18081-&gt;18080-18081/tcp, :::18080-18081-&gt;18080-18081/tcp</span><br></pre></td></tr></table></figure>\n<p>打开浏览器，访问：<span class=\"exturl\" data-url=\"aHR0cDovL3lvdXJJcDo4MDgw\">http://yourIp:8080</span></p>\n<img data-src=\"https://i.makeagif.com/media/9-15-2015/bQkqor.gif\" class=\"abc\" width=\"600\" height=\"350\">",
            "tags": [
                "docker"
            ]
        }
    ]
}