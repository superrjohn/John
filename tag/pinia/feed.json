{
    "version": "https://jsonfeed.org/version/1",
    "title": "一切都是過程 • All posts by \"pinia\" tag",
    "description": "",
    "home_page_url": "https://superrjohn.github.io/John",
    "items": [
        {
            "id": "https://superrjohn.github.io/John/2023/10/27/java/springMVC/UserBook-Web",
            "url": "https://superrjohn.github.io/John/2023/10/27/java/springMVC/UserBook-Web",
            "title": "手寫springMVC!",
            "date_published": "2023-10-27T09:24:46.659Z",
            "content_html": "<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>初學階段全端的一個項目，是一個簡單的用戶端圖書管理系統，登錄用 jwt 令牌實現。<br>\n前端是用 Vue2、Pinia 做狀態管理、bootstrap 5 (不推薦)、Axios。<br>\n後端用 SpringMVC、SpringBoot、Mybatis、MySQL。<br>\n於由就是一個很久之前的項目，而且項目結構很簡單只是練練手，現在只是補寫一個記錄，所以我就不每個步驟記錄，只記錄重點～<br>\n 項目地址:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3N1cGVycmpvaG4vVXNlckJvb2stV2Vi\">https://github.com/superrjohn/UserBook-Web</span></p>\n<h2 id=\"邏輯圖\"><a class=\"markdownIt-Anchor\" href=\"#邏輯圖\">#</a> 邏輯圖</h2>\n<p>做項目、模塊、業務功能一定要先寫邏輯圖，一來理清邏輯步驟，二來跟著步驟做開發。(雖然這圖寫得不太優)</p>\n<img data-src=\"/John/img/java/springMVC/logic_diagram.png\" class=\"abc\" width=\"400\" height=\"700\">\n<h2 id=\"前端\"><a class=\"markdownIt-Anchor\" href=\"#前端\">#</a> 前端</h2>\n<p>前端方面，我想記錄的是<span class=\"exturl\" data-url=\"aHR0cHM6Ly9waW5pYS52dWVqcy5vcmcvemgvaW50cm9kdWN0aW9uLmh0bWw=\"> Pinia</span> 狀態管理庫，會以 Vue2 做簡單說明。<br>\n1️⃣創一個 Pinia 實例并掛載到 Vue, 如果是 Vue 2 還需要安装一个插件 PiniaVuePlugin, 如果想擁有持久化，需要安裝 pinia-plugin-persistedstate 插件。</p>\n<img data-src=\"/John/img/java/springMVC/create_pinia.png\" class=\"abc\" width=\"600\" height=\"500\">\n<p>2️⃣Store 可以理解成要狀態管理的對象，它有三個重要的部份組成，分別是 state、getter 和 action, 本項目只用到 state、action,state 是屬性，而 action 是改變屬性的方法，我封裝了根據用戶 ID 發起查詢借書記錄的 API, 而 persist 為 true 開啟持久化。</p>\n<figure class=\"highlight java\"><figcaption><span>useBookStatus.js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineStore &#125; from <span class=\"string\">&#x27;pinia&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; userAPI &#125; from <span class=\"string\">&#x27;@/apis/user&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//個人借書記錄</span></span><br><span class=\"line\">export <span class=\"type\">const</span> <span class=\"variable\">useBookStatus</span> <span class=\"operator\">=</span> defineStore(<span class=\"string\">&#x27;bookStatus&#x27;</span>, &#123;</span><br><span class=\"line\">    state: () =&gt; (&#123;</span><br><span class=\"line\">        bookStatus: []</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    actions: &#123;</span><br><span class=\"line\">        async <span class=\"title function_\">getBookStatus</span><span class=\"params\">(id)</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">const</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> await <span class=\"title function_\">userAPI</span><span class=\"params\">(id)</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.bookStatus = res.data.data</span><br><span class=\"line\">            <span class=\"comment\">//console.log(this.bookStatus)</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        clearBookStatus() &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.bookStatus = []</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    persist: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>3️⃣個人頁的 JS 大概長這樣，用 mapActions () 輔助函數將 action 屬性映射到组件中，然後當頁面加載後根據 id 執行 getBookStatus 方法，查詢個人的借書記錄</p>\n<img data-src=\"/John/img/java/springMVC/status_action.png\" class=\"abc\" width=\"600\" height=\"500\">\n<h2 id=\"後端\"><a class=\"markdownIt-Anchor\" href=\"#後端\">#</a> 後端</h2>\n<p>項目結構簡單，主要是父工程，PO 類，工具類只有生成和解析 jwt 令牌，主要業務邏輯寫在 boot-web-management</p>\n<img data-src=\"/John/img/java/springMVC/boot-web-management.png\" class=\"abc\" width=\"300\" height=\"250\">\n<p>1️⃣首先是登錄功能，查詢用戶表，如果用戶存在剛獲得用戶對象後生成 jwt 令牌返回前端，沒有則返回登錄失敗信息給前端</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LoginController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/login&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Result <span class=\"title function_\">login</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> User user)</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;用戶登錄:&#123;&#125;&quot;</span>,user);</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">u</span> <span class=\"operator\">=</span> userService.login(user);</span><br><span class=\"line\">        <span class=\"comment\">//用戶登錄成功</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(u != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            Map&lt;String, Object&gt; claims = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">            claims.put(<span class=\"string\">&quot;id&quot;</span>, u.getId());</span><br><span class=\"line\">            claims.put(<span class=\"string\">&quot;username&quot;</span>, u.getUsername());</span><br><span class=\"line\">            claims.put(<span class=\"string\">&quot;name&quot;</span>, u.getName());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">jwt</span> <span class=\"operator\">=</span> JwtUtils.generateJwt(claims);<span class=\"comment\">//生成token令牌</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> Result.success(jwt);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//登錄失敗</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> Result.error(<span class=\"string\">&quot;密碼帳號有錯&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2️⃣之後都是對用戶的借書狀態和圖書狀態的增刪改查，使用了 interceptor 查詢令牌，沒有則攔截，還有全局異常配置等，沒什麼特別，值得說的是我用了 Spring AOP, 自定義註解來對重要的操作進行額外的日誌記錄。<br>\n首先要創一個自定義註解，說明在哪方法上運行</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//自定義註解,記錄修改用戶修改日誌</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span> <span class=\"comment\">//運行時生效</span></span><br><span class=\"line\"><span class=\"meta\">@Target(ElementType.METHOD)</span><span class=\"comment\">//註明方法上生效</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Log &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>這裡我使用了 @Around 做切入方法，因為我需要記錄原始方法的運行時間，annotation 則以自定義註解為切點。</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span><span class=\"comment\">//交給IOC管理</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span><span class=\"comment\">//切面類</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LogAspect</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HttpServletRequest request;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> OperateLogMapper operateLogMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Around(&quot;@annotation(com.itheima.anno.Log)&quot;)</span><span class=\"comment\">//以註解方式配備切入點方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">recordLog</span><span class=\"params\">(ProceedingJoinPoint joinPoint)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        <span class=\"comment\">//操作人ID,當前登錄員工的ID,獲最請求頭的JWT令牌,解析令牌</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">jwt</span> <span class=\"operator\">=</span> request.getHeader(<span class=\"string\">&quot;token&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Claims</span> <span class=\"variable\">claims</span> <span class=\"operator\">=</span> JwtUtils.parseJWT(jwt);</span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">operateUser</span> <span class=\"operator\">=</span> (Integer) claims.get(<span class=\"string\">&quot;id&quot;</span>);<span class=\"comment\">//Claims類為Object,所以要強轉</span></span><br><span class=\"line\">        <span class=\"comment\">//操作時間</span></span><br><span class=\"line\">        <span class=\"type\">LocalDateTime</span> <span class=\"variable\">operateTime</span> <span class=\"operator\">=</span> LocalDateTime.now();</span><br><span class=\"line\">        <span class=\"comment\">//操作類名</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">className</span> <span class=\"operator\">=</span> joinPoint.getTarget().getClass().getName();</span><br><span class=\"line\">        <span class=\"comment\">//操作方法名</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">methodName</span> <span class=\"operator\">=</span> joinPoint.getSignature().getName();</span><br><span class=\"line\">        <span class=\"comment\">//操作方法參數</span></span><br><span class=\"line\">        Object[] args = joinPoint.getArgs();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">methodParams</span> <span class=\"operator\">=</span> Arrays.toString(args);</span><br><span class=\"line\">        <span class=\"comment\">//開始調用原始方法時間</span></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">begin</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"comment\">//調用原始目標方法運行</span></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> joinPoint.proceed();</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"comment\">//方法返回值</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">returnValue</span> <span class=\"operator\">=</span> JSONObject.toJSONString(result);</span><br><span class=\"line\">        <span class=\"comment\">//操作時間</span></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">costTime</span> <span class=\"operator\">=</span> end - begin;</span><br><span class=\"line\">        <span class=\"comment\">//記錄操作日志</span></span><br><span class=\"line\">        <span class=\"type\">OperateLog</span> <span class=\"variable\">operateLog</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OperateLog</span>(<span class=\"literal\">null</span>,operateUser,operateTime,className,methodName,methodParams,returnValue,costTime);</span><br><span class=\"line\">        operateLogMapper.insert(operateLog);</span><br><span class=\"line\"></span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;AOP記錄日志:&#123;&#125;&quot;</span>, operateLog);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>然後在需要的 API 加上就完成了</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Log</span></span><br><span class=\"line\">   <span class=\"comment\">//修改書本出借狀態和新增用戶借書記錄</span></span><br><span class=\"line\">   <span class=\"meta\">@PutMapping</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> Result <span class=\"title function_\">updateStatus</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> UserBorrow userBorrow)</span>&#123;</span><br><span class=\"line\">       log.info(<span class=\"string\">&quot;借出書本資料:&#123;&#125;&quot;</span>,userBorrow);</span><br><span class=\"line\">       bookService.updateStatus(userBorrow);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> Result.success();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>3️⃣我對 AOP 的理解是，它是以動態代理的方式去增強功能，表達式則是要加強的方法 (切點), 切入方法則是什麼時候做加強，是代碼執行前還是後，要理解源碼還是蠻複雜的，幸好能理解並使用不難～</p>\n<img data-src=\"https://usagif.com/wp-content/uploads/gifs/thanks-for-watching-9.gif\" class=\"abc\" width=\"600\" height=\"350\">",
            "tags": [
                "SpringMVC",
                "Pinia",
                "Vue2",
                "SpringBoot"
            ]
        }
    ]
}