{
    "version": "https://jsonfeed.org/version/1",
    "title": "一切都是過程",
    "description": "",
    "home_page_url": "https://superrjohn.github.io/John",
    "items": [
        {
            "id": "https://superrjohn.github.io/John/2023/11/03/java/SpringSecurity/WeChat_login",
            "url": "https://superrjohn.github.io/John/2023/11/03/java/SpringSecurity/WeChat_login",
            "title": "SpringSecurity 微信登錄",
            "date_published": "2023-11-03T15:39:05.235Z",
            "content_html": "<p>在此特别感謝黑馬程序員提供的課程: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWo4NDExTjdCbS8=\">學成在線</span></p>\n<p>前言<br>\n於由實習項目快做完才做記錄，而且項目模塊較多，故挑部份來記錄，所以這遍主要是 SpringSecurity 內容。<br>\n<span class=\"rainbow\">完整项目地址</span>：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3N1cGVycmpvaG4vamF2YV93ZWI=\">https://github.com/superrjohn/java_web</span></p>\n<p><span class=\"green\">上篇:</span><a href=\"/John/2023/10/30/java/SpringSecurity/SpringSecurity\">認證授權</a></p>\n<h1 id=\"驗證碼服務\"><a class=\"markdownIt-Anchor\" href=\"#驗證碼服務\">#</a> 驗證碼服務</h1>\n<h2 id=\"部署驗證碼服務工程\"><a class=\"markdownIt-Anchor\" href=\"#部署驗證碼服務工程\">#</a> 部署驗證碼服務工程</h2>\n<p>🔴在認證時一般都需要輸入驗證碼，驗證碼有什麼用？</p>\n<blockquote><p>驗證碼可以防止惡性攻擊，例如：XSS 跨站腳本攻擊、CSRF 跨站請求偽造攻擊，一些比較複雜的圖形驗證碼可以有效的防止惡性攻擊。<br>\n為了保護系統的安全性在一些比較重要的操作都需要驗證碼。</p>\n</blockquote>\n<p>本專案建立單獨的驗證碼服務為各業務提供驗證碼的產生、校驗等服務。<br>\n拷貝課程資料目錄 xuecheng-plus-checkcode 驗證碼服務工程到自己的工程目錄。<br>\n然後定義 nacos 設定檔</p>\n<figure class=\"highlight yaml\"><figcaption><span>YAML</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span> </span><br><span class=\"line\">  <span class=\"attr\">servlet:</span> </span><br><span class=\"line\">    <span class=\"attr\">context-path:</span> <span class=\"string\">/checkcode</span> </span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">63075</span> </span><br></pre></td></tr></table></figure>\n<p>注意修改 bootstrap.yml 中的命名空間為自己定義的命名空間。<br>\n配置 redis-dev.yaml，儲存 redis 服務啟動</p>\n<figure class=\"highlight xml\"><figcaption><span>XML</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:  </span><br><span class=\"line\">  redis: </span><br><span class=\"line\">    host: 192.168.101.65 </span><br><span class=\"line\">    port: 6379 </span><br><span class=\"line\">    password: redis </span><br><span class=\"line\">    database: 0 </span><br><span class=\"line\">    lettuce: </span><br><span class=\"line\">      pool: </span><br><span class=\"line\">        max-active: 20 </span><br><span class=\"line\">        max-idle: 10 </span><br><span class=\"line\">        min-idle: 0 </span><br><span class=\"line\">    timeout: 10000 </span><br><span class=\"line\">    #redisson: </span><br><span class=\"line\">      #配置文件目录 </span><br><span class=\"line\">      #config: classpath:singleServerConfig.yaml </span><br></pre></td></tr></table></figure>\n<h2 id=\"驗證碼介面測試\"><a class=\"markdownIt-Anchor\" href=\"#驗證碼介面測試\">#</a> 驗證碼介面測試</h2>\n<p>1️⃣黑馬提供的驗證碼服務中的 Controller 中有一個方法，是用來產生驗證碼圖片的</p>\n<figure class=\"highlight java\"><figcaption><span>JAVA</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ApiOperation(value=&quot;生成验证信息&quot;, notes=&quot;生成验证信息&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping(value = &quot;/pic&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CheckCodeResultDto <span class=\"title function_\">generatePicCheckCode</span><span class=\"params\">(CheckCodeParamsDto checkCodeParamsDto)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> picCheckCodeService.generate(checkCodeParamsDto);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2️⃣我們使用 HttpClient 測試該介面</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#### 获取验证码图片</span><br><span class=\"line\">POST localhost:<span class=\"number\">53075</span>/checkcode/pic</span><br></pre></td></tr></table></figure>\n<p>3️⃣回應結果如下，圖片是以 base64 編碼格式儲存的，我們可以複製直接在瀏覽器中開啟</p>\n<img data-src=\"/John/img/java/SpringSecurity/14.png\" class=\"abc\">\n<p>4️⃣驗證碼服務如何產生併校驗驗證碼？</p>\n<img data-src=\"/John/img/java/SpringSecurity/15.png\" class=\"abc\">\n<p>1. 給產生的驗證碼分配一個 key，將 key 和驗證碼一同存入 redis。 這個 key 和圖片一同回頁給頁面。<br>\n2. 使用者輸入驗證碼，連同 key 一同提交至認證服務，只是這個 key 被隱藏起來，自動輸入。<br>\n3. 驗證碼服務根據 key 從快取取出正確的驗證碼和使用者輸入的驗證碼進行比對，如果相同則校驗通過，否則不通過。</p>\n<p>5️⃣校驗驗證碼介面，code 需要改為圖片顯示的值</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 校验验证码 </span><br><span class=\"line\">POST &#123;&#123;checkcode_host&#125;&#125;/checkcode/verify?key=checkcode4506b95bddbe46cdb0d56810b747db1b&amp;code=70dl </span><br></pre></td></tr></table></figure>\n<h2 id=\"帳號密碼認證\"><a class=\"markdownIt-Anchor\" href=\"#帳號密碼認證\">#</a> 帳號密碼認證</h2>\n<p>執行流程如下：</p>\n<img data-src=\"/John/img/java/SpringSecurity/16.png\" class=\"abc\">\n<p>1、在認證服務定義遠端呼叫驗證碼服務的接口，FeignClient 的參數 value 為服務名，CheckCodeClientFactory 為降級方法</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FeignClient(value = &quot;checkcode&quot;,fallbackFactory = CheckCodeClientFactory.class)</span> </span><br><span class=\"line\"> <span class=\"meta\">@RequestMapping(&quot;/checkcode&quot;)</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">CheckCodeClient</span> &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"meta\">@PostMapping(value = &quot;/verify&quot;)</span> </span><br><span class=\"line\"> <span class=\"keyword\">public</span> Boolean <span class=\"title function_\">verify</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;key&quot;)</span> String key,<span class=\"meta\">@RequestParam(&quot;code&quot;)</span> String code)</span>; </span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.CheckCodeClientFactory:</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span> </span><br><span class=\"line\"><span class=\"meta\">@Component</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CheckCodeClientFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">FallbackFactory</span>&lt;CheckCodeClient&gt; &#123; </span><br><span class=\"line\">    <span class=\"meta\">@Override</span> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> CheckCodeClient <span class=\"title function_\">create</span><span class=\"params\">(Throwable throwable)</span> &#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CheckCodeClient</span>() &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"meta\">@Override</span> </span><br><span class=\"line\">            <span class=\"keyword\">public</span> Boolean <span class=\"title function_\">verify</span><span class=\"params\">(String key, String code)</span> &#123; </span><br><span class=\"line\">                log.debug(<span class=\"string\">&quot;调用验证码服务熔断异常:&#123;&#125;&quot;</span>, throwable.getMessage()); </span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">null</span>; </span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">        &#125;; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>3. 啟動類添加，basePackages 為遠程調用接口的目錄</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableFeignClients(basePackages=&#123;&quot;com.xuecheng.*.feignclient&quot;&#125;)</span> </span><br></pre></td></tr></table></figure>\n<p>配置文件引入 feign-dev.yaml</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- data-id: feign-$&#123;spring.profiles.active&#125;.yaml </span><br><span class=\"line\">  group: xuecheng-plus-common </span><br><span class=\"line\">  refresh: <span class=\"literal\">true</span> </span><br></pre></td></tr></table></figure>\n<p>4. 完善 PasswordAuthServiceImpl</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service(&quot;password_authservice&quot;)</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PasswordAuthServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AuthService</span> &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"meta\">@Autowired</span> </span><br><span class=\"line\"> XcUserMapper xcUserMapper; </span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"meta\">@Autowired</span> </span><br><span class=\"line\"> PasswordEncoder passwordEncoder; </span><br><span class=\"line\"> <span class=\"meta\">@Autowired</span> </span><br><span class=\"line\"> CheckCodeClient checkCodeClient; </span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"meta\">@Override</span> </span><br><span class=\"line\"> <span class=\"keyword\">public</span> XcUser <span class=\"title function_\">execute</span><span class=\"params\">(AuthParamsDto authParamsDto)</span> &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">//校验验证码 </span></span><br><span class=\"line\">  <span class=\"type\">String</span> <span class=\"variable\">checkcode</span> <span class=\"operator\">=</span> authParamsDto.getCheckcode(); </span><br><span class=\"line\">  <span class=\"type\">String</span> <span class=\"variable\">checkcodekey</span> <span class=\"operator\">=</span> authParamsDto.getCheckcodekey(); </span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(StringUtils.isBlank(checkcodekey) || StringUtils.isBlank(checkcode))&#123; </span><br><span class=\"line\">   <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;验证码为空&quot;</span>); </span><br><span class=\"line\"> </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"type\">Boolean</span> <span class=\"variable\">verify</span> <span class=\"operator\">=</span> checkCodeClient.verify(checkcodekey, checkcode); </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!verify)&#123; </span><br><span class=\"line\">   <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;验证码输入错误&quot;</span>); </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"comment\">//账号 </span></span><br><span class=\"line\">  <span class=\"type\">String</span> <span class=\"variable\">username</span> <span class=\"operator\">=</span> authParamsDto.getUsername(); </span><br><span class=\"line\">  <span class=\"type\">XcUser</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> xcUserMapper.selectOne(<span class=\"keyword\">new</span> <span class=\"title class_\">LambdaQueryWrapper</span>&lt;XcUser&gt;().eq(XcUser::getUsername, username)); </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(user==<span class=\"literal\">null</span>)&#123; </span><br><span class=\"line\">   <span class=\"comment\">//返回空表示用户不存在 </span></span><br><span class=\"line\">   <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;账号不存在&quot;</span>); </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"comment\">//校验密码 </span></span><br><span class=\"line\">  <span class=\"comment\">//取出数据库存储的正确密码 </span></span><br><span class=\"line\">  <span class=\"type\">String</span> <span class=\"variable\">passwordDb</span>  <span class=\"operator\">=</span>user.getPassword(); </span><br><span class=\"line\">  <span class=\"type\">String</span> <span class=\"variable\">passwordForm</span> <span class=\"operator\">=</span> authParamsDto.getPassword(); </span><br><span class=\"line\">  <span class=\"type\">boolean</span> <span class=\"variable\">matches</span> <span class=\"operator\">=</span> passwordEncoder.matches(passwordForm, passwordDb); </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!matches)&#123; </span><br><span class=\"line\">   <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;账号或密码错误&quot;</span>); </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> user; </span><br><span class=\"line\"> &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"帳號密碼認證測試\"><a class=\"markdownIt-Anchor\" href=\"#帳號密碼認證測試\">#</a> 帳號密碼認證測試</h2>\n<img data-src=\"/John/img/java/SpringSecurity/17.png\" class=\"abc\">\n<p>1. 使用瀏覽器造訪 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy41MXh1ZWNoZW5nLmNuL3NpZ24uaHRtbA==\">http://www.51xuecheng.cn/sign.html</span><br>\n2. 先測試驗證碼，分別輸入正確的驗證碼、錯誤的驗證碼進行測試<br>\n 3. 輸入正確的帳號密碼和錯誤的帳號密碼進行測試<br>\n登入成功將 jwt 令牌儲存 cookie.<br>\n4. 測試自動登入<br>\n勾選自動登入 cookie 產生時間為 30 天，不勾選自動登入關閉瀏覽器視窗後自動刪除 cookie。</p>\n<h1 id=\"微信掃碼登入\"><a class=\"markdownIt-Anchor\" href=\"#微信掃碼登入\">#</a> 微信掃碼登入</h1>\n<h2 id=\"接入流程\"><a class=\"markdownIt-Anchor\" href=\"#接入流程\">#</a> 接入流程</h2>\n<p>前言：先要在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9vcGVuLndlaXhpbi5xcS5jb20v\">网站应用开发</span>，並擁有已審核通過的網站應用，並取得相應的 AppID 和 AppSecret，申請微信登入且通過審核後，可開始接取流程 (上網找可以找到資源)</p>\n<p>微信掃碼登入基於 OAuth2 協定的授權碼模式，</p>\n<p>介面文檔：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vZG9jL29wbGF0Zm9ybS9XZWJzaXRlX0FwcC9XZUNoYXRfTG9naW4vV2VjaGF0X0xvZ2luLmh0bWw=\">https://developers.weixin.qq.com/doc/oplatform/Website_App/WeChat_Login/Wechat_Login.html</span></p>\n<p>微信 OAuth2.0 授權登入目前支援 authorization_code 模式，適用於擁有 server 端的應用程式授權。 此模式整體流程為：<br>\n1️⃣第三方發起微信授權登入要求，微信使用者允許授權第三方應用程式後，微信會拉起應用程式或重定向到第三方網站，並且帶上授權臨時票據 code 參數；<br>\n2️⃣透過 code 參數加上 AppID 和 AppSecret 等，透過 API 換取 access_token；<br>\n3️⃣透過 access_token 進行介面調用，取得使用者基本資料資源或幫助使用者實現基本操作。</p>\n<img data-src=\"/John/img/java/SpringSecurity/18.png\" class=\"abc\">\n<p>步驟 1：在頁面中先引入以下 JS 檔案（支援 https）：</p>\n<figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://res.wx.qq.com/connect/zh_CN/htmledition/js/wxLogin.js </span><br></pre></td></tr></table></figure>\n<p>步驟 2：在需要使用微信登入的地方實例以下 JS 物件：</p>\n<p>var obj = new WxLogin({<br>\nself_redirect:true,<br>\nid:“login_container”,<br>\nappid: “<span class=\"yellow\">網站應用審核通過後獲得</span>”,<br>\nscope: “”,<br>\nredirect_uri: “<span class=\"yellow\">用戶按下同意後，網站應用重定向</span>”,<br>\nstate: “”,<br>\nstyle: “”,<br>\nhref: “”<br>\n});</p>\n<h1 id=\"接入微信登入\"><a class=\"markdownIt-Anchor\" href=\"#接入微信登入\">#</a> 接入微信登入</h1>\n<h2 id=\"接入分析\"><a class=\"markdownIt-Anchor\" href=\"#接入分析\">#</a> 接入分析</h2>\n <img data-src=\"/John/img/java/SpringSecurity/19.png\" class=\"abc\">\n<p>1️⃣需要定義介面接收微信下發的授權碼。<br>\n2️⃣收到授權碼呼叫微信介面申請令牌。<br>\n3️⃣申請到令牌調用微信獲取用戶信息<br>\n4️⃣取得使用者資訊成功將其寫入本專案用戶中心資料庫。<br>\n5️⃣最後重定向到瀏覽器自動登入。</p>\n<h2 id=\"定義接口\"><a class=\"markdownIt-Anchor\" href=\"#定義接口\">#</a> 定義接口</h2>\n<p>參考介面規格中「請求取得授權碼」 定義接收微信下發的授權碼接口，<br>\n定義 WxLoginController 類，當用戶在前端掃碼時，用戶同意後會跳轉到這個方法，收到用戶信息後再執行微信認證的 service 自動登錄，如下:</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span> </span><br><span class=\"line\"><span class=\"meta\">@Controller</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WxLoginController</span> &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/wxLogin&quot;)</span> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">wxLogin</span><span class=\"params\">(String code, String state)</span> <span class=\"keyword\">throws</span> IOException &#123; </span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;微信扫码回调,code:&#123;&#125;,state:&#123;&#125;&quot;</span>,code,state); </span><br><span class=\"line\">        <span class=\"comment\">//请求微信申请令牌，拿到令牌查询用户信息，将用户信息写入本项目数据库 </span></span><br><span class=\"line\">        <span class=\"type\">XcUser</span> <span class=\"variable\">xcUser</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">XcUser</span>(); </span><br><span class=\"line\">        <span class=\"comment\">//暂时硬编写，目的是调试环境 </span></span><br><span class=\"line\">        xcUser.setUsername(<span class=\"string\">&quot;t1&quot;</span>); </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(xcUser==<span class=\"literal\">null</span>)&#123; </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;redirect:http://www.51xuecheng.cn/error.html&quot;</span>; </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">username</span> <span class=\"operator\">=</span> xcUser.getUsername(); </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;redirect:http://www.51xuecheng.cn/sign.html?username=&quot;</span>+username+<span class=\"string\">&quot;&amp;authType=wx&quot;</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>定義微信認證的 service</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span> </span><br><span class=\"line\"><span class=\"meta\">@Service(&quot;wx_authservice&quot;)</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WxAuthServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AuthService</span> &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span> </span><br><span class=\"line\">    XcUserMapper xcUserMapper; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> XcUserExt <span class=\"title function_\">execute</span><span class=\"params\">(AuthParamsDto authParamsDto)</span> &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">//账号 </span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">username</span> <span class=\"operator\">=</span> authParamsDto.getUsername(); </span><br><span class=\"line\">        <span class=\"type\">XcUser</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> xcUserMapper.selectOne(<span class=\"keyword\">new</span> <span class=\"title class_\">LambdaQueryWrapper</span>&lt;XcUser&gt;().eq(XcUser::getUsername, username)); </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(user==<span class=\"literal\">null</span>)&#123; </span><br><span class=\"line\">            <span class=\"comment\">//返回空表示用户不存在 </span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;账号不存在&quot;</span>); </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"type\">XcUserExt</span> <span class=\"variable\">xcUserExt</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">XcUserExt</span>(); </span><br><span class=\"line\">        BeanUtils.copyProperties(user,xcUserExt); </span><br><span class=\"line\">        <span class=\"keyword\">return</span> xcUserExt; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"接入微信認證\"><a class=\"markdownIt-Anchor\" href=\"#接入微信認證\">#</a> 接入微信認證</h2>\n<p>接下来请求微信申请令牌。<br>\n1️⃣因為和第三方進行遠程調用，所以使用 restTemplate 请求微信，配置 RestTemplate bean</p>\n<p>在啟動類配置 restTemplate</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span> </span><br><span class=\"line\">RestTemplate <span class=\"title function_\">restTemplate</span><span class=\"params\">()</span>&#123; </span><br><span class=\"line\">    <span class=\"type\">RestTemplate</span> <span class=\"variable\">restTemplate</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RestTemplate</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">OkHttp3ClientHttpRequestFactory</span>()); </span><br><span class=\"line\">    <span class=\"keyword\">return</span>  restTemplate; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>2️⃣定義與微信認證的 service 介面：</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">WxAuthService</span> &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> XcUser <span class=\"title function_\">wxAuth</span><span class=\"params\">(String code)</span>; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>3️⃣下邊在 controller 中呼叫 wxAuth 介面：</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span> </span><br><span class=\"line\"><span class=\"meta\">@Controller</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WxLoginController</span> &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span> </span><br><span class=\"line\">    WxAuthService wxAuthService; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/wxLogin&quot;)</span> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">wxLogin</span><span class=\"params\">(String code, String state)</span> <span class=\"keyword\">throws</span> IOException &#123; </span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;微信扫码回调,code:&#123;&#125;,state:&#123;&#125;&quot;</span>,code,state); </span><br><span class=\"line\">        <span class=\"comment\">//请求微信申请令牌，拿到令牌查询用户信息，将用户信息写入本项目数据库 </span></span><br><span class=\"line\">        <span class=\"type\">XcUser</span> <span class=\"variable\">xcUser</span> <span class=\"operator\">=</span> wxAuthService.wxAuth(code); </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(xcUser==<span class=\"literal\">null</span>)&#123; </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;redirect:http://www.51xuecheng.cn/error.html&quot;</span>; </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">username</span> <span class=\"operator\">=</span> xcUser.getUsername(); </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;redirect:http://www.51xuecheng.cn/sign.html?username=&quot;</span>+username+<span class=\"string\">&quot;&amp;authType=wx&quot;</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>4️⃣在 WxAuthService 的 wxAuth 方法中實作申請令牌、查詢使用者資訊等內容，appid 和 secret 是在微信開放平台註冊後獲得的，將它們配在 nacos 的 auth-service-dev.yaml 配置文件中，然而把值注入進來使用</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span> </span><br><span class=\"line\"><span class=\"meta\">@Service(&quot;wx_authservice&quot;)</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WxAuthServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AuthService</span>, WxAuthService &#123; </span><br><span class=\"line\"><span class=\"meta\">@Autowired</span> </span><br><span class=\"line\">XcUserMapper xcUserMapper; </span><br><span class=\"line\"><span class=\"meta\">@Autowired</span> </span><br><span class=\"line\">RestTemplate restTemplate; </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@Value(&quot;$&#123;weixin.appid&#125;&quot;)</span> </span><br><span class=\"line\">String appid; </span><br><span class=\"line\"><span class=\"meta\">@Value(&quot;$&#123;weixin.secret&#125;&quot;)</span> </span><br><span class=\"line\">String secret; </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> XcUser <span class=\"title function_\">wxAuth</span><span class=\"params\">(String code)</span>&#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//收到code调用微信接口申请access_token </span></span><br><span class=\"line\">    Map&lt;String, String&gt; access_token_map = getAccess_token(code); </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(access_token_map==<span class=\"literal\">null</span>)&#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    System.out.println(access_token_map); </span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">openid</span> <span class=\"operator\">=</span> access_token_map.get(<span class=\"string\">&quot;openid&quot;</span>); </span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">access_token</span> <span class=\"operator\">=</span> access_token_map.get(<span class=\"string\">&quot;access_token&quot;</span>); </span><br><span class=\"line\">    <span class=\"comment\">//拿access_token查询用户信息 </span></span><br><span class=\"line\">    Map&lt;String, String&gt; userinfo = getUserinfo(access_token, openid); </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(userinfo==<span class=\"literal\">null</span>)&#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"comment\">//添加用户到数据库 </span></span><br><span class=\"line\">    <span class=\"type\">XcUser</span> <span class=\"variable\">xcUser</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>; </span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">return</span> xcUser; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>5️⃣getAccess_token 方法，拿著授權碼申請令牌方法，因微信返回是 JSON, 所以我們用 Map 接收，把原本請求微信地址的關鍵參數用 % s 佔位，然後用 format 方法把佔位參數修改成我們的數據，重新拼接 url</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Map&lt;String,String&gt; <span class=\"title function_\">getAccess_token</span><span class=\"params\">(String code)</span> &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">wxUrl_template</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;https://api.weixin.qq.com/sns/oauth2/access_token?appid=%s&amp;secret=%s&amp;code=%s&amp;grant_type=authorization_code&quot;</span>; </span><br><span class=\"line\">    <span class=\"comment\">//请求微信地址 </span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">wxUrl</span> <span class=\"operator\">=</span> String.format(wxUrl_template, appid, secret, code); </span><br><span class=\"line\"> </span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;调用微信接口申请access_token, url:&#123;&#125;&quot;</span>, wxUrl); </span><br><span class=\"line\">    <span class=\"comment\">//遠程調用微信url</span></span><br><span class=\"line\">    ResponseEntity&lt;String&gt; exchange = restTemplate.exchange(wxUrl, HttpMethod.POST, <span class=\"literal\">null</span>, String.class); </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> exchange.getBody(); </span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;调用微信接口申请access_token: 返回值:&#123;&#125;&quot;</span>, result); </span><br><span class=\"line\">    <span class=\"comment\">//json轉為map</span></span><br><span class=\"line\">    Map&lt;String,String&gt; resultMap = JSON.parseObject(result, Map.class); </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> resultMap; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>6️⃣getUserinfo, 攜帶令牌查詢用戶信息，關鍵 url 的參數用 % s 佔位，把令牌獲得的值填上</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Map&lt;String,String&gt; <span class=\"title function_\">getUserinfo</span><span class=\"params\">(String access_token,String openid)</span> &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">wxUrl_template</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;https://api.weixin.qq.com/sns/userinfo?access_token=%s&amp;openid=%s&quot;</span>; </span><br><span class=\"line\">    <span class=\"comment\">//请求微信地址 </span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">wxUrl</span> <span class=\"operator\">=</span> String.format(wxUrl_template, access_token,openid); </span><br><span class=\"line\"> </span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;调用微信接口申请access_token, url:&#123;&#125;&quot;</span>, wxUrl); </span><br><span class=\"line\"> </span><br><span class=\"line\">    ResponseEntity&lt;String&gt; exchange = restTemplate.exchange(wxUrl, HttpMethod.POST, <span class=\"literal\">null</span>, String.class); </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//防止乱码进行转码 </span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(exchange.getBody().getBytes(StandardCharsets.ISO_8859_1),StandardCharsets.UTF_8); </span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;调用微信接口申请access_token: 返回值:&#123;&#125;&quot;</span>, result); </span><br><span class=\"line\">    Map&lt;String,String&gt; resultMap = JSON.parseObject(result, Map.class); </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> resultMap; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h2 id=\"儲存使用者資訊\"><a class=\"markdownIt-Anchor\" href=\"#儲存使用者資訊\">#</a> 儲存使用者資訊</h2>\n<p>向資料庫保存使用者訊息，如果使用者不存在將其保存在資料庫中，事務控制</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span> </span><br><span class=\"line\">XcUserRoleMapper xcUserRoleMapper; </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@Transactional</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> XcUser <span class=\"title function_\">addWxUser</span><span class=\"params\">(Map userInfo_map)</span>&#123; </span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">unionid</span> <span class=\"operator\">=</span> userInfo_map.get(<span class=\"string\">&quot;unionid&quot;</span>).toString(); </span><br><span class=\"line\">    <span class=\"comment\">//根据unionid查询数据库 </span></span><br><span class=\"line\">    <span class=\"type\">XcUser</span> <span class=\"variable\">xcUser</span> <span class=\"operator\">=</span> xcUserMapper.selectOne(<span class=\"keyword\">new</span> <span class=\"title class_\">LambdaQueryWrapper</span>&lt;XcUser&gt;().eq(XcUser::getWxUnionid, unionid)); </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(xcUser!=<span class=\"literal\">null</span>)&#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> xcUser; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">userId</span> <span class=\"operator\">=</span> UUID.randomUUID().toString(); </span><br><span class=\"line\">    xcUser = <span class=\"keyword\">new</span> <span class=\"title class_\">XcUser</span>(); </span><br><span class=\"line\">    xcUser.setId(userId); </span><br><span class=\"line\">    xcUser.setWxUnionid(unionid); </span><br><span class=\"line\">    <span class=\"comment\">//记录从微信得到的昵称 </span></span><br><span class=\"line\">    xcUser.setNickname(userInfo_map.get(<span class=\"string\">&quot;nickname&quot;</span>).toString()); </span><br><span class=\"line\">    xcUser.setUserpic(userInfo_map.get(<span class=\"string\">&quot;headimgurl&quot;</span>).toString()); </span><br><span class=\"line\">    xcUser.setName(userInfo_map.get(<span class=\"string\">&quot;nickname&quot;</span>).toString()); </span><br><span class=\"line\">    xcUser.setUsername(unionid); </span><br><span class=\"line\">    xcUser.setPassword(unionid); </span><br><span class=\"line\">    xcUser.setUtype(<span class=\"string\">&quot;101001&quot;</span>);<span class=\"comment\">//学生类型 </span></span><br><span class=\"line\">    xcUser.setStatus(<span class=\"string\">&quot;1&quot;</span>);<span class=\"comment\">//用户状态 </span></span><br><span class=\"line\">    xcUser.setCreateTime(LocalDateTime.now()); </span><br><span class=\"line\">    xcUserMapper.insert(xcUser); </span><br><span class=\"line\">    <span class=\"comment\">//向用戶角色關係表新增記錄</span></span><br><span class=\"line\">    <span class=\"type\">XcUserRole</span> <span class=\"variable\">xcUserRole</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">XcUserRole</span>(); </span><br><span class=\"line\">    xcUserRole.setId(UUID.randomUUID().toString()); </span><br><span class=\"line\">    xcUserRole.setUserId(userId); </span><br><span class=\"line\">    xcUserRole.setRoleId(<span class=\"string\">&quot;17&quot;</span>);<span class=\"comment\">//学生角色 </span></span><br><span class=\"line\">    xcUserRoleMapper.insert(xcUserRole); </span><br><span class=\"line\">    <span class=\"keyword\">return</span> xcUser; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>調用保存用户信息方法，</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@Autowired</span> </span><br><span class=\"line\">WxAuthServiceImpl currentProxy; </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> XcUser <span class=\"title function_\">wxAuth</span><span class=\"params\">(String code)</span>&#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//收到code调用微信接口申请access_token </span></span><br><span class=\"line\">    Map&lt;String, String&gt; access_token_map = getAccess_token(code); </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(access_token_map==<span class=\"literal\">null</span>)&#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"comment\">//System.out.println(access_token_map); </span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">openid</span> <span class=\"operator\">=</span> access_token_map.get(<span class=\"string\">&quot;openid&quot;</span>); </span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">access_token</span> <span class=\"operator\">=</span> access_token_map.get(<span class=\"string\">&quot;access_token&quot;</span>); </span><br><span class=\"line\">    <span class=\"comment\">//拿access_token查询用户信息 </span></span><br><span class=\"line\">    Map&lt;String, String&gt; userinfo = getUserinfo(access_token, openid); </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(userinfo==<span class=\"literal\">null</span>)&#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"comment\">//将用户信息保存到数据库 </span></span><br><span class=\"line\">    <span class=\"type\">XcUser</span> <span class=\"variable\">xcUser</span> <span class=\"operator\">=</span> currentProxy.addWxUser(userinfo); </span><br><span class=\"line\">    <span class=\"keyword\">return</span> xcUser; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<blockquote><p>注意：非事務方法調用事務方法，要使用代理物件調用，前面也提到這點<br>\n這裡的 addWxUser () 方法涉及了多表操作，所以需要進行事務控制，而 wxAuth () 是非事務方法，所以這裡我們需要注入自身，然後呼叫 addWxUser ()</p>\n</blockquote>\n<p>重啟服務，掃碼登入測試，登入成功，並在數據庫記錄了微信用戶的信息！</p>\n<img data-src=\"/John/img/java/SpringSecurity/20.png\" class=\"abc\">\n<img data-src=\"/John/img/java/SpringSecurity/21.png\" class=\"abc\">\n<p><span class=\"rainbow\">總結</span>:<br>\n1️⃣從微信拿到 JS 文件代碼在前端顯示，當用戶掃碼同意後，url 會重定向我們指定的地址</p>\n<figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = new WxLogin(&#123; </span><br><span class=\"line\">self_redirect:true, </span><br><span class=\"line\">id:&quot;login_container&quot;,  </span><br><span class=\"line\">appid: &quot;網站應用審核通過後獲得&quot;,  </span><br><span class=\"line\">scope: &quot;&quot;,  </span><br><span class=\"line\">redirect_uri: http://localhost:8160/auth/wxLogin&quot;, </span><br><span class=\"line\"> state: &quot;&quot;, </span><br><span class=\"line\">style: &quot;&quot;, </span><br><span class=\"line\">href: &quot;&quot; </span><br><span class=\"line\">&#125;); </span><br></pre></td></tr></table></figure>\n<p>2️⃣會重定向本項目 wxLogin 的 API, 執行 wxAuth 方法<br>\n3️⃣wxAuth 方法會用 restTemplate 遠程調用微信接口：申請令牌、拿著令牌查詢用戶信息，並保存到我們的數據庫<br>\n4️⃣執行完 wxAuth 方法，因為我們數據庫已有用戶信息，所以最後會重定向到項目的統一認證登錄入口，並執行 execute 方法自動登入</p>\n <img data-src=\"https://i.makeagif.com/media/9-15-2015/bQkqor.gif\" class=\"abc\" width=\"600\" height=\"350\">\n",
            "tags": [
                "SpringSecurity"
            ]
        },
        {
            "id": "https://superrjohn.github.io/John/2023/10/30/java/SpringSecurity/SpringSecurity",
            "url": "https://superrjohn.github.io/John/2023/10/30/java/SpringSecurity/SpringSecurity",
            "title": "SpringSecurity 認證授權",
            "date_published": "2023-10-30T14:10:06.589Z",
            "content_html": "<p>在此特别感謝黑馬程序員提供的課程: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWo4NDExTjdCbS8=\">學成在線</span></p>\n<p>前言<br>\n於由實習項目快做完才做記錄，而且項目模塊較多，故挑部份來記錄，所以這遍主要是 SpringSecurity 內容。<br>\n<span class=\"rainbow\">完整项目地址</span>：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3N1cGVycmpvaG4vamF2YV93ZWI=\">https://github.com/superrjohn/java_web</span></p>\n<h1 id=\"模塊需求分析\"><a class=\"markdownIt-Anchor\" href=\"#模塊需求分析\">#</a> 模塊需求分析</h1>\n<p>什麼是認證授權？<br>\n<span class=\"yellow\"> 什麼是認證？</span></p>\n<blockquote><p>認證即使用者去存取系統資源時系統要求驗證使用者的身分訊息，身分合法方可繼續存取。 常見的用戶身份認證的表現形式有：用戶名密碼登錄，微信掃碼等方式。</p>\n</blockquote>\n<p><span class=\"yellow\">什麼是授權？</span></p>\n<blockquote><p>使用者認證通過後去存取系統的資源，系統會判斷使用者是否擁有存取資源的權限，只允許存取有權限的系統資源，沒有權限的資源將無法存取。</p>\n</blockquote>\n<h2 id=\"業務流程\"><a class=\"markdownIt-Anchor\" href=\"#業務流程\">#</a> 業務流程</h2>\n<p>1️⃣統一認證：計畫包括學生、學習機構的老師、平台營運人員三類用戶，三類用戶將使用統一的認證入口。</p>\n <img data-src=\"/John/img/java/SpringSecurity/2.png\" class=\"abc\" width=\"600\" height=\"350\">\n<p>2️⃣單點登陸：單一登入（Single Sign On），簡稱 SSO，是目前較流行的企業業務整合的解決方案之一。 SSO 的定義是在多個應用系統中，使用者只需要登入一次就可以存取所有互信的應用系統。</p>\n<p>3️⃣第三方認證：掃碼登入的功能，如：微信掃碼登入、QQ 掃碼登入等。 掃碼登入的好處是用戶不用輸入帳號和密碼，省去用戶註冊的成本，是一種非常有效的推廣手段。</p>\n<h1 id=\"spring-security-認證研究\"><a class=\"markdownIt-Anchor\" href=\"#spring-security-認證研究\">#</a> Spring Security 認證研究</h1>\n<h2 id=\"spring-security介紹\"><a class=\"markdownIt-Anchor\" href=\"#spring-security介紹\">#</a> Spring Security 介紹</h2>\n<p>認證功能幾乎是每個專案都要具備的功能，而且它與業務無關，市面上有許多認證框架，例如：Apache Shiro、CAS、Spring Security 等。 由於本專案是基於 Spring Cloud 技術構建，Spring Security 是 spring 家族的一份子且和 Spring Cloud 整合的很好，因此本專案選用 Spring Security 作為認證服務的技術框架。</p>\n<p>Spring Security 是一個功能強大且高度可自訂的身份驗證和存取控制框架，它是一個專注於為 Java 應用程式提供身份驗證和授權的框架。</p>\n<p>專案首頁：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcHJpbmcuaW8vcHJvamVjdHMvc3ByaW5nLXNlY3VyaXR5\">https://spring.io/projects/spring-security</span></p>\n<p>Spring cloud Security： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcHJpbmcuaW8vcHJvamVjdHMvc3ByaW5nLWNsb3VkLXNlY3VyaXR5\">https://spring.io/projects/spring-cloud-security</span></p>\n<h3 id=\"認證授權入門\"><a class=\"markdownIt-Anchor\" href=\"#認證授權入門\">#</a> 認證授權入門</h3>\n<p>1️⃣部署認證服務工程</p>\n<p>從課程資料拷貝 xuecheng-plus-auth 工程到自己的工程目錄下。</p>\n<p>此工程是一個普通的 spring boot 工程，可以連接資料庫。</p>\n<p>此工程不具備認證授權的功能。</p>\n<p>2️⃣建立資料庫</p>\n<p>建立 xc_users 資料庫</p>\n<p>匯入課程資料中的 xcplus_users.sql 腳本。</p>\n<p>3️⃣修改配置文件和在 nacos 註冊，端口為 63070</p>\n<h3 id=\"認證測試\"><a class=\"markdownIt-Anchor\" href=\"#認證測試\">#</a> 認證測試</h3>\n<p>1️⃣下邊向 auth 認證工程整合 Spring security，向 pom.xml 加入 Spring Security 所需的依賴</p>\n<figure class=\"highlight xml\"><figcaption><span>pom.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-security<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-oauth2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span> </span><br></pre></td></tr></table></figure>\n<p>2️⃣初始工程自備了一個 Controller 類，如下：</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span> </span><br><span class=\"line\"><span class=\"meta\">@RestController</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LoginController</span> &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"meta\">@Autowired</span> </span><br><span class=\"line\">  XcUserMapper userMapper; </span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"meta\">@RequestMapping(&quot;/login-success&quot;)</span> </span><br><span class=\"line\">  <span class=\"keyword\">public</span> String <span class=\"title function_\">loginSuccess</span><span class=\"params\">()</span>&#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;登录成功&quot;</span>; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"meta\">@RequestMapping(&quot;/user/&#123;id&#125;&quot;)</span> </span><br><span class=\"line\">  <span class=\"keyword\">public</span> XcUser <span class=\"title function_\">getuser</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> String id)</span>&#123; </span><br><span class=\"line\">    <span class=\"type\">XcUser</span> <span class=\"variable\">xcUser</span> <span class=\"operator\">=</span> userMapper.selectById(id); </span><br><span class=\"line\">    <span class=\"keyword\">return</span> xcUser; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"meta\">@RequestMapping(&quot;/r/r1&quot;)</span> </span><br><span class=\"line\">  <span class=\"keyword\">public</span> String <span class=\"title function_\">r1</span><span class=\"params\">()</span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;访问r1资源&quot;</span>; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"meta\">@RequestMapping(&quot;/r/r2&quot;)</span> </span><br><span class=\"line\">  <span class=\"keyword\">public</span> String <span class=\"title function_\">r2</span><span class=\"params\">()</span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;访问r2资源&quot;</span>; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>3️⃣在資料中找到 WebSecurityConfig 設定類放到本工程中，它繼承 WebSecurityConfigurerAdapter, 它有三部份內容:<br>\n1. 用戶資訊：在記憶體配置兩個使用者：zhangsan、lisi,zhangsan 使用者擁有的權限為 p1,lisi 使用者擁有的權限為 p2</p>\n<p>2、密碼方式：暫時採用明文方式</p>\n<p>3. 安全攔截機制:/r/** 開頭的請求需要認證，登入成功到成功頁面，程式碼如下：</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//配置用户信息服务 </span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> UserDetailsService <span class=\"title function_\">userDetailsService</span><span class=\"params\">()</span> &#123; </span><br><span class=\"line\">    <span class=\"comment\">//这里配置用户信息,这里暂时使用这种方式将用户存储在内存中 </span></span><br><span class=\"line\">    <span class=\"type\">InMemoryUserDetailsManager</span> <span class=\"variable\">manager</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InMemoryUserDetailsManager</span>(); </span><br><span class=\"line\">        manager.createUser(User.withUsername(<span class=\"string\">&quot;zhangsan&quot;</span>).password(<span class=\"string\">&quot;123&quot;</span>).authorities(<span class=\"string\">&quot;p1&quot;</span>).build()); </span><br><span class=\"line\">        manager.createUser(User.withUsername(<span class=\"string\">&quot;lisi&quot;</span>).password(<span class=\"string\">&quot;456&quot;</span>).authorities(<span class=\"string\">&quot;p2&quot;</span>).build()); </span><br><span class=\"line\">        <span class=\"keyword\">return</span> manager; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Bean</span> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> PasswordEncoder <span class=\"title function_\">passwordEncoder</span><span class=\"params\">()</span> &#123; </span><br><span class=\"line\">        <span class=\"comment\">//密码为明文方式 </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> NoOpPasswordEncoder.getInstance(); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//配置安全拦截机制 </span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span> </span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123; </span><br><span class=\"line\">        http </span><br><span class=\"line\">                .authorizeRequests() </span><br><span class=\"line\">                .antMatchers(<span class=\"string\">&quot;/r/**&quot;</span>).authenticated()<span class=\"comment\">//访问/r开始的请求需要认证通过 </span></span><br><span class=\"line\">                .anyRequest().permitAll()<span class=\"comment\">//其它请求全部放行 </span></span><br><span class=\"line\">                .and() </span><br><span class=\"line\">                .formLogin().successForwardUrl(<span class=\"string\">&quot;/login-success&quot;</span>);<span class=\"comment\">//登录成功跳转到/login-success </span></span><br><span class=\"line\">                http.logout().logoutUrl(<span class=\"string\">&quot;/logout&quot;</span>);<span class=\"comment\">//退出地址 </span></span><br><span class=\"line\">    &#125; </span><br></pre></td></tr></table></figure>\n<p>1. 訪問 localhost:63070/auth/login<br>\n2. 輸入帳號 zhangsan, 密碼 123<br>\n3. 登錄成功後，頁面會跳轉，這樣認證身份就完成了</p>\n<p>4️⃣添加授權<br>\n🔴使用者認證透過去存取系統資源時 spring security 進行授權控制，判斷使用者是否有該資源的存取權限，如果有則繼續訪問，如果沒有則拒絕存取。<br>\n1. 在 WebSecurityConfig 類別設定 zhangsan 擁有 p1 權限，lisi 擁有 p2 權限。</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> UserDetailsService <span class=\"title function_\">userDetailsService</span><span class=\"params\">()</span> &#123; </span><br><span class=\"line\">    <span class=\"comment\">//这里配置用户信息,这里暂时使用这种方式将用户存储在内存中 </span></span><br><span class=\"line\">    <span class=\"type\">InMemoryUserDetailsManager</span> <span class=\"variable\">manager</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InMemoryUserDetailsManager</span>(); </span><br><span class=\"line\">    manager.createUser(User.withUsername(<span class=\"string\">&quot;zhangsan&quot;</span>).password(<span class=\"string\">&quot;123&quot;</span>).authorities(<span class=\"string\">&quot;p1&quot;</span>).build()); </span><br><span class=\"line\">    manager.createUser(User.withUsername(<span class=\"string\">&quot;lisi&quot;</span>).password(<span class=\"string\">&quot;456&quot;</span>).authorities(<span class=\"string\">&quot;p2&quot;</span>).build()); </span><br><span class=\"line\">    <span class=\"keyword\">return</span> manager; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>2. 在 controller 中配置 /r/r1 需要 p1 權限，/r/r2 需要 p2 權限。</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LoginController</span> &#123; </span><br><span class=\"line\">    .... </span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/r/r1&quot;)</span> </span><br><span class=\"line\">    <span class=\"meta\">@PreAuthorize(&quot;hasAuthority(&#x27;p1&#x27;)&quot;)</span><span class=\"comment\">//拥有p1权限方可访问 </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">r1</span><span class=\"params\">()</span>&#123; </span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;访问r1资源&quot;</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/r/r2&quot;)</span> </span><br><span class=\"line\">    <span class=\"meta\">@PreAuthorize(&quot;hasAuthority(&#x27;p2&#x27;)&quot;)</span><span class=\"comment\">//拥有p2权限方可访问 </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">r2</span><span class=\"params\">()</span>&#123; </span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;访问r2资源&quot;</span>; </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    ... </span><br></pre></td></tr></table></figure>\n<p>現在當用戶訪問 /r/r1 時，url 會判斷用戶有沒有訪問權限 p1, 所以 zhangsan 可以成功訪問，而 lisi 不能，因為 lisi 的權限為 p2</p>\n<img data-src=\"/John/img/java/SpringSecurity/r1r2.png\" class=\"abc\">\n<p>5️⃣工作原理<br>\n Spring Security 對 Web 資源的保護是靠 Filter 實現的，所以從這個 Filter 來入手，逐步深入 Spring Security 原理。 當初始化 Spring Security 時，會建立一個名為 SpringSecurityFilterChain 的 Servlet 過濾器，類型為 org.springframework.security.web.FilterChainProxy，它實作了 javax.servlet.Filter，因此外部的要求會經過此類，下圖是 Spring Security 過慮器鏈結構圖：</p>\n<img data-src=\"/John/img/java/SpringSecurity/3.png\" class=\"abc\" width=\"400\" height=\"300\">\n<p>FilterChainProxy 是一個代理，真正運作的是 FilterChainProxy 中 SecurityFilterChain 所包含的各個 Filter，而 Filter 不會直接處理認證和授權，而是把它們交給了認證管理器（AuthenticationManager）和決策管理器（AccessDecisionManager）進行處理。</p>\n<h1 id=\"oauth2認證流程\"><a class=\"markdownIt-Anchor\" href=\"#oauth2認證流程\">#</a> OAuth2 認證流程</h1>\n<p>在前邊我們提到微信掃碼認證，這是一種第三方認證的方式，這種認證方式是基於 OAuth2 協定實現，</p>\n<p>OAUTH 協定為使用者資源的授權提供了一個安全的、開放而又簡易的標準。 同時，任何第三方都可以使用 OAUTH 認證服務，任何服務提供者都可以實現自身的 OAUTH 認證服務，因而 OAUTH 是開放的。 業界提供了 OAUTH 的多種實作如 PHP、JavaScript，Java，Ruby 等各種語言開發包，大大節省了程式設計師的時間，因而 OAUTH 是簡易的。 網路許多服務如 Open API，許多大公司如穀歌，Yahoo，Microsoft 等都提供了 OAUTH 認證服務，這些都足以說明 OAUTH 標準逐漸成為開放資源授權的標準。</p>\n<pre><code>     Oauth協定目前發展到2.0版本，1.0版本過於複雜，2.0版本已廣泛應用。\n</code></pre>\n<p>參考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9vQXV0aC83MTUzMTM0P2ZyPWFsYWRkaW4=\">https://baike.baidu.com/item/oAuth/7153134?fr=aladdin</span></p>\n<p>Oauth 協議：<span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzY3NDk=\">https://tools.ietf.org/html/rfc6749</span></p>\n<p>現在搞清楚幾個概念：</p>\n<p><span class=\"green\">資源</span>：使用者訊息，在微信中儲存。</p>\n<p><span class=\"green\">資源擁有者</span>：使用者是使用者資訊資源的擁有者。</p>\n<p><span class=\"green\">認證服務</span>：微信負責認證目前使用者的身份，負責為客戶端頒發令牌。</p>\n<p><span class=\"green\">客戶端</span>：客戶端會攜帶令牌請求微信獲取使用者訊息，黑馬程式設計師網站即客戶端，黑馬網站需要在瀏覽器中開啟。</p>\n<img data-src=\"/John/img/java/SpringSecurity/4.png\" class=\"abc\" width=\"700\" height=\"300\">\n<p>1. 用戶進入到網站打開掃碼界面，進行微信掃碼<br>\n 2. 微信返回信息，詢問用戶是否授權客戶端使用個人資料，用戶按同意<br>\n 3. 微信下發授權碼，網站應用帶著授權碼申請令牌，微信下發令牌 (過程不可見)<br>\n 4. 網站應用帶著令牌請求用戶個人信息，成功並返回網站應用 (過程不可見)<br>\n 5. 用戶登錄成功</p>\n<h2 id=\"oauth2在本項目的應用\"><a class=\"markdownIt-Anchor\" href=\"#oauth2在本項目的應用\">#</a> OAuth2 在本項目的應用</h2>\n<p>了解微信掃碼登入黑馬網站的流程，接下來認識 Oauth2.0 的認證流程，引自 Oauth2.0 協定 rfc6749 <span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzY3NDk=\">https://tools.ietf.org/html/rfc6749</span> ,<br>\nOauth2 是一個標準的開放的授權協議，用於應用程式需要用到第三方平台的資源，應用程式可以根據自己的要求去使用 Oauth2，本專案使用 Oauth2 實現以下目標：<br>\n1️⃣學成在線上存取第三方系統的資源。</p>\n<p>本專案要存取微信掃碼登入所以本專案要使用 OAuth2 協定存取微信中的使用者資訊。</p>\n<p>2️⃣外部系統訪問學成在線的資源 。</p>\n<p>同樣當第三方系統想要存取學成線上網站的資源也可以基於 OAuth2 協議。</p>\n<p>3️⃣學成線上前端（客戶端） 存取學成線上微服務的資源。</p>\n<p>本專案是前後端分離架構，前端存取微服務資源也可以基於 OAuth2 協定進行認證。</p>\n<h2 id=\"oauth2的授權模式\"><a class=\"markdownIt-Anchor\" href=\"#oauth2的授權模式\">#</a> OAuth2 的授權模式</h2>\n<p>Spring Security 支援 OAuth2 認證，OAuth2 提供授權碼模式、密碼模式、簡化模式、客戶端模式等四種授權模式，本項目只會用授權碼模式、密碼模式。<br>\n授權碼模式簡單瞭解是使用授權碼去取得令牌，要想取得令牌先要取得授權碼，授權碼的取得需要資源擁有者親自授權同意才可以取得。</p>\n<p>下圖是授權碼模式的互動圖：</p>\n<img data-src=\"/John/img/java/SpringSecurity/5.png\" class=\"abc\" width=\"600\" height=\"400\">\n<h3 id=\"授權碼模式測試\"><a class=\"markdownIt-Anchor\" href=\"#授權碼模式測試\">#</a> 授權碼模式測試</h3>\n<p>若要測試授權模式首先要設定授權伺服器即上圖中的認證伺服器，需要設定授權服務及令牌策略。<br>\n1️⃣從課程資料拷貝 AuthorizationServer.java、TokenConfig.java 到認證服務的 config 套件下。<br>\n說明：AuthorizationServer 用 @EnableAuthorizationServer 註解標識並繼承 AuthorizationServerConfigurerAdapter 來設定 OAuth2.0 授權伺服器。</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span> </span><br><span class=\"line\"><span class=\"meta\">@EnableAuthorizationServer</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AuthorizationServer</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AuthorizationServerConfigurerAdapter</span> &#123; </span><br><span class=\"line\">... </span><br></pre></td></tr></table></figure>\n<p>2️⃣AuthorizationServerConfigurerAdapter 要求配置以下幾個類別：</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AuthorizationServerConfigurerAdapter</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AuthorizationServerConfigurer</span> &#123; </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">AuthorizationServerConfigurerAdapter</span><span class=\"params\">()</span> &#123;&#125; </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configure</span><span class=\"params\">(AuthorizationServerSecurityConfigurer security)</span> <span class=\"keyword\">throws</span> Exception &#123;&#125; </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configure</span><span class=\"params\">(ClientDetailsServiceConfigurer clients)</span> <span class=\"keyword\">throws</span> Exception &#123;&#125; </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configure</span><span class=\"params\">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class=\"keyword\">throws</span> Exception &#123;&#125; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>1）ClientDetailsServiceConfigurer：用來設定客戶端詳情服務（ClientDetailsService），</p>\n<p>隨便一個客戶端都可以隨便接取它的認證服務嗎？ 答案是否定的，服務提供者會給批准存取的客戶端一個身份，用於存取時的憑證，有客戶端標識和客戶端秘鑰，在這裡配置批准存取的客戶端的詳細資訊。</p>\n<p>2）AuthorizationServerEndpointsConfigurer：用來設定令牌（token）的存取端點和令牌服務 (token services)。</p>\n<p>3）AuthorizationServerSecurityConfigurer：用來設定令牌端點的安全性限制.</p>\n<p>2、TokenConfig 為令牌策略配置類</p>\n<p>暫時先使用 InMemoryTokenStore 在記憶體儲存令牌，令牌的有效期限等資訊配置如下：</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//令牌管理服务 </span></span><br><span class=\"line\"><span class=\"meta\">@Bean(name=&quot;authorizationServerTokenServicesCustom&quot;)</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> AuthorizationServerTokenServices <span class=\"title function_\">tokenService</span><span class=\"params\">()</span> &#123; </span><br><span class=\"line\">    DefaultTokenServices service=<span class=\"keyword\">new</span> <span class=\"title class_\">DefaultTokenServices</span>(); </span><br><span class=\"line\">    service.setSupportRefreshToken(<span class=\"literal\">true</span>);<span class=\"comment\">//支持刷新令牌 </span></span><br><span class=\"line\">    service.setTokenStore(tokenStore);<span class=\"comment\">//令牌存储策略 </span></span><br><span class=\"line\">    service.setAccessTokenValiditySeconds(<span class=\"number\">7200</span>); <span class=\"comment\">// 令牌默认有效期2小时 </span></span><br><span class=\"line\">    service.setRefreshTokenValiditySeconds(<span class=\"number\">259200</span>); <span class=\"comment\">// 刷新令牌默认有效期3天 </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> service; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>3️⃣配置認證管理 bean</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableWebSecurity</span> </span><br><span class=\"line\"><span class=\"meta\">@EnableGlobalMethodSecurity(securedEnabled = true,prePostEnabled = true)</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebSecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebSecurityConfigurerAdapter</span> &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Bean</span> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> AuthenticationManager <span class=\"title function_\">authenticationManagerBean</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.authenticationManagerBean(); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    .... </span><br></pre></td></tr></table></figure>\n<p>4️⃣重啟認證服務</p>\n<p>1.get 請求取得授權碼</p>\n<p>位址: <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo2MzA3MC9hdXRoL29hdXRoL2F1dGhvcml6ZT9jbGllbnRfaWQ9WGNXZWJBcHAmYW1wO3Jlc3BvbnNlX3R5cGU9Y29kZSZhbXA7c2NvcGU9YWxsJmFtcDtyZWRpcmVjdF91cmk9aHR0cDovL3d3dy41MXh1ZWNoZW5nLmNu\">http://localhost:63070/auth/oauth/authorize?client_id=XcWebApp&amp;response_type=code&amp;scope=all&amp;redirect_uri=http://www.51xuecheng.cn</span></p>\n<p>參數列表如下：</p>\n<p>client_id：客戶端准入標識。</p>\n<p>response_type：授權碼模式固定為 code。</p>\n<p>scope：客戶端權限。</p>\n<p>redirect_uri：跳轉 uri，授權碼申請成功後會跳到此位址，後邊帶上 code 參數（授權碼）。</p>\n<p>輸入帳號 zhangsan、密碼 123 登入成功，輸入 /oauth/authorize?client_id=XcWebApp&amp;response_type=code&amp;scope=all&amp;redirect_uri=<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy41MXh1ZWNoZW5nLmNu\">http://www.51xuecheng.cn</span></p>\n<p>顯示授權頁面</p>\n<img data-src=\"/John/img/java/SpringSecurity/6.png\" class=\"abc\">\n<p>授權「XcWebApp」存取自己的受保護資源？</p>\n<p>選擇同意。</p>\n<p>2. 請求成功，重新導向至<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy41MXh1ZWNoZW5nLmNuLz9jb2RlPSVFNiU4RSU4OCVFNiVBQyU4QSVFNyVBMiVCQyVFRiVCQyU4QyVFNCVCRSU4QiVFNSVBNiU4MiVFRiVCQyU5QWh0dHA6Ly93d3cuNTF4dWVjaGVuZy5jbi8/Y29kZT1XcWpiNUg=\"> http://www.51xuecheng.cn/?code = 授權碼，例如：http://www.51xuecheng.cn/?code=Wqjb5H</span><br>\n3. 使用 httpclient 工具 post 申請令牌</p>\n<p>/oauth/token?client_id=XcWebApp&amp;client_secret=XcWebApp&amp;grant_type=authorization_code&amp;code = 授權碼 &amp; redirect_uri=<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy41MXh1ZWNoZW5nLmNuLw==\">http://www.51xuecheng.cn/</span></p>\n<p>參數列表如下</p>\n<p>client_id：客戶端准入標識。</p>\n<p>client_secret：客戶端秘鑰。</p>\n<p>grant_type：授權類型，填入 authorization_code，表示授權碼模式</p>\n<p>code：授權碼，就是剛剛取得的授權碼，注意：授權碼只使用一次就無效了，需要重新申請。</p>\n<p>redirect_uri：申請授權碼時的跳到 url，一定和申請授權碼時用的 redirect_uri 一致。</p>\n<p>httpclient 腳本如下：</p>\n<figure class=\"highlight text\"><figcaption><span>text</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 第二步申请令牌 </span><br><span class=\"line\">POST &#123;&#123;auth_host&#125;&#125;/auth/oauth/token?client_id=XcWebApp&amp;client_secret=XcWebApp&amp;grant_type=authorization_code&amp;code=CTvCrB&amp;redirect_uri=http://www.51xuecheng.cn1</span><br></pre></td></tr></table></figure>\n<p>申請令牌成功如下所示：</p>\n<figure class=\"highlight json\"><figcaption><span>json</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;access_token&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;368b1ee7-a9ee-4e9a-aae6-0fcab243aad2&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;token_type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;bearer&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;refresh_token&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;3d56e139-0ee6-4ace-8cbe-1311dfaa991f&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;expires_in&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">7199</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;scope&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;all&quot;</span> </span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span> </span><br></pre></td></tr></table></figure>\n<p>說明：<br>\n1、access_token，存取令牌，用於存取資源使用。<br>\n2、token_type，bearer 是在 RFC6750 中定義的一種 token 類型，在攜帶令牌存取資源時需要在 head 中加入 bearer 空格 令牌內容<br>\n 3、refresh_token，當令牌快過期時使用刷新令牌可以再次產生令牌。<br>\n4、expires_in：過期時間（秒）<br>\n5、scope，令牌的權限範圍，服務端可以根據令牌的權限範圍去對令牌授權。</p>\n<h3 id=\"密碼模式\"><a class=\"markdownIt-Anchor\" href=\"#密碼模式\">#</a> 密碼模式</h3>\n<p>密碼模式相對授權碼模式簡單，授權碼模式需使用瀏覽器供使用者親自授權，密碼模式不用使用瀏覽器<br>\n 1. 資源擁有者提供帳號及密碼</p>\n<p>2、客戶端向認證服務申請令牌，請求中攜帶帳號及密碼</p>\n<p>3、認證服務校驗帳號及密碼正確核發令牌。<br>\n1、POST 請求取得令牌</p>\n<p>/oauth/token?client_id=XcWebApp&amp;client_secret=XcWebApp&amp;grant_type=password&amp;username=shangsan&amp;password=123</p>\n<p>參數列表如下：</p>\n<p>client_id：客戶端准入標識。</p>\n<p>client_secret：客戶端秘鑰。</p>\n<p>grant_type：授權類型，填入 password 表示密碼模式</p>\n<p>username：資源擁有者使用者名稱。</p>\n<p>password：資源擁有者密碼。</p>\n<p>2、授權伺服器將令牌（access_token）傳送給 client</p>\n<p>使用 httpclient 進行測試</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 密码模式 </span><br><span class=\"line\">POST &#123;&#123;auth_host&#125;&#125;/auth/oauth/token?client_id=XcWebApp&amp;client_secret=XcWebApp&amp;grant_type=password&amp;username=zhangsan&amp;password=<span class=\"number\">123</span> </span><br></pre></td></tr></table></figure>\n<p>返回示例：</p>\n<figure class=\"highlight json\"><figcaption><span>json</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;access_token&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;368b1ee7-a9ee-4e9a-aae6-0fcab243aad2&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;token_type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;bearer&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;refresh_token&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;3d56e139-0ee6-4ace-8cbe-1311dfaa991f&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;expires_in&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">6806</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;scope&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;all&quot;</span> </span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span> </span><br></pre></td></tr></table></figure>\n<h1 id=\"jwt令牌\"><a class=\"markdownIt-Anchor\" href=\"#jwt令牌\">#</a> JWT 令牌</h1>\n<h2 id=\"普通令牌的問題\"><a class=\"markdownIt-Anchor\" href=\"#普通令牌的問題\">#</a> 普通令牌的問題</h2>\n<p>客戶端申請到令牌，接下來客戶端攜帶令牌去存取資源，到資源伺服器將會校驗令牌的合法性。<br>\n資源伺服器如何校驗令牌的合法性？我們以 OAuth2 的密碼模式為例進行說明：</p>\n<img data-src=\"/John/img/java/SpringSecurity/7.png\" class=\"abc\" width=\"700\" height=\"400\">\n<p>🍉這裡存在一個問題：<br>\n就是校驗令牌需要遠端請求認證服務，客戶端的每次存取都會遠端校驗，執行效能低。<br>\n如果能夠讓資源服務自己校驗令牌的合法性將省去遠端請求認證服務的成本，提高了效能</p>\n<p>🍉如何解決上邊的問題，實現資源服務自行校驗令牌:</p>\n<h2 id=\"什么是jwt\"><a class=\"markdownIt-Anchor\" href=\"#什么是jwt\">#</a> 什么是 JWT</h2>\n<p>🟢令牌採用 JWT 格式即可解決上邊的問題，用戶認證通過後會得到一個 JWT 令牌，JWT 令牌中已經包括了用戶相關的信息，客戶端只需要攜帶 JWT 訪問資源服務，資源服務根據事先約定 的演算法自行完成令牌校驗，無需每次都請求認證服務完成授權。</p>\n<p>🟡JSON Web Token（JWT）是一種使用 JSON 格式傳遞資料的網路令牌技術，它是一個開放的行業標準（RFC 7519），它定義了一種簡潔的、自包含的協議格式，用於在通信 雙方傳遞 json 對象，傳遞的訊息經過數位簽章可以驗證和信任，它可以使用 HMAC 演算法或使用 RSA 的公鑰 / 私鑰對來簽名，防止內容篡改。 官網：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qd3QuaW8v\">https://jwt.io/</span></p>\n<p>🔴傳統的基於 session 的方式是有狀態認證，使用者登入成功將使用者的身份資訊儲存在服務端，這樣加大了服務端的儲存壓力，並且這種方式不適合在分散式系統中應用。<br>\n如下圖，當用戶訪問應用服務，每個應用服務都會去伺服器查看 session 信息，如果 session 中沒有該用戶則說明用戶沒有登錄，此時就會重新認證，而解決這個問題的方法是 Session 複製、Session 黏貼。</p>\n<img data-src=\"/John/img/java/SpringSecurity/8.png\" class=\"abc\" width=\"700\" height=\"400\">\n<p>🟢如果是基於令牌技術在分散式系統中實現認證則服務端不用儲存 session，可以將用戶識別資訊儲存在令牌中，用戶認證透過後認證服務頒發令牌給用戶，用戶將令牌儲存在客戶 端，去訪問應用服務時攜帶令牌去訪問，服務端從 jwt 解析出用戶資訊。 這個過程就是無狀態認證。</p>\n<p>JWT 令牌的優點：<br>\n1️⃣jwt 基於 json，非常方便解析。<br>\n2️⃣可以在令牌中自訂豐富的內容，易擴充。<br>\n3️⃣透過非對稱加密演算法及數位簽章技術，JWT 防止竄改，安全性高。<br>\n4️⃣資源服務使用 JWT 可不依賴認證服務即可完成授權。<br>\n缺點：<br>\nJWT 令牌較長，佔儲存空間比較大。</p>\n<p>JWT 令牌由三部分組成，每部分中間使用点（.）分隔，比如：xxxxx.yyyyy.zzzzz<br>\n1️⃣Header<br>\n 頭部包括令牌的類型（即 JWT）及使用的哈希算法（如 HMAC SHA256 或 RSA）<br>\n内容使用 Base64Url 编码，得到一个字符串就是 JWT 令牌的第一部分。</p>\n  <figure class=\"highlight json\"><figcaption><span>json</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"punctuation\">&#123;</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;alg&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;HS256&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;typ&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;JWT&quot;</span> </span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span> </span><br></pre></td></tr></table></figure>\n<p>2️⃣Payload<br>\n 第二部分是負載，內容也是一個 json 對象，它是存放有效資訊的地方，它可以存放 jwt 提供的資訊字段，例如：iss（簽發者）,exp（過期時間戳記）, sub（面向的使用者） 等，也可自訂欄位。<br>\n此部分不建議存放敏感訊息，因為此部分可以解碼還原原始內容。<br>\n最後將第二部分負載使用 Base64Url 編碼，得到一個字串就是 JWT 令牌的第二部分。</p>\n<figure class=\"highlight json\"><figcaption><span>json</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;sub&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1234567890&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;456&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;admin&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span> </span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span> </span><br></pre></td></tr></table></figure>\n<p>3️⃣Signature<br>\n 第三部分是簽名，此部分用於防止 jwt 內容被竄改。<br>\n這個部分使用 base64url 將前兩部分編碼，編碼後使用點（.）連接組成字串，最後使用 header 中聲明的簽章演算法進行簽章。</p>\n<figure class=\"highlight json\"><figcaption><span>json</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HMACSHA256( </span><br><span class=\"line\">  base64UrlEncode(header) + <span class=\"string\">&quot;.&quot;</span> + </span><br><span class=\"line\">  base64UrlEncode(payload)<span class=\"punctuation\">,</span> </span><br><span class=\"line\">  secret) </span><br></pre></td></tr></table></figure>\n<p><span class=\"green\">為什麼 JWT 可以防止篡改？</span></p>\n<blockquote><p>第三部分使用簽名演算法對第一部分和第二部分的內容進行簽名，常用的簽名演算法是 HS256，常見的還有 md5,sha 等，簽名演算法需要使用金鑰進行簽名，金鑰不對外公開，且 簽章是不可逆的，如果第三方更改了內容那麼伺服器驗證簽章就會失敗，要想保證驗證簽章正確必須保證內容、金鑰與簽章前一致。</p>\n</blockquote>\n<img data-src=\"/John/img/java/SpringSecurity/9.png\" class=\"abc\" width=\"700\" height=\"400\">\n<p>從上圖可以看出認證服務和資源服務使用相同的金鑰，這叫對稱加密，對稱加密效率高，如果一旦金鑰外洩可以偽造 jwt 令牌，JWT 還可以使用非對稱加密，認證服務自己保留私鑰，將公鑰下發給受信任的客戶端、資源服務，公鑰和私鑰是配對的，成對的公鑰和私鑰才可以正常 加密和解密，非對稱加密效率低但相比對稱加密非對稱加密更安全一些。</p>\n<h2 id=\"243-測試產生jwt令牌\"><a class=\"markdownIt-Anchor\" href=\"#243-測試產生jwt令牌\">#</a> 2.4.3 測試產生 JWT 令牌</h2>\n<p>1️⃣在認證服務中配置 jwt 令牌服務，即可實現產生 jwt 格式的令牌</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TokenConfig</span> &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">String</span> <span class=\"variable\">SIGNING_KEY</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;mq123&quot;</span>; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span> </span><br><span class=\"line\">    TokenStore tokenStore; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span> </span><br><span class=\"line\">    <span class=\"keyword\">private</span> JwtAccessTokenConverter accessTokenConverter; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Bean</span> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> TokenStore <span class=\"title function_\">tokenStore</span><span class=\"params\">()</span> &#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JwtTokenStore</span>(accessTokenConverter()); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Bean</span> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> JwtAccessTokenConverter <span class=\"title function_\">accessTokenConverter</span><span class=\"params\">()</span> &#123; </span><br><span class=\"line\">        <span class=\"type\">JwtAccessTokenConverter</span> <span class=\"variable\">converter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JwtAccessTokenConverter</span>(); </span><br><span class=\"line\">        converter.setSigningKey(SIGNING_KEY); </span><br><span class=\"line\">        <span class=\"keyword\">return</span> converter; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//令牌管理服务 </span></span><br><span class=\"line\">    <span class=\"meta\">@Bean(name=&quot;authorizationServerTokenServicesCustom&quot;)</span> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> AuthorizationServerTokenServices <span class=\"title function_\">tokenService</span><span class=\"params\">()</span> &#123; </span><br><span class=\"line\">        DefaultTokenServices service=<span class=\"keyword\">new</span> <span class=\"title class_\">DefaultTokenServices</span>(); </span><br><span class=\"line\">        service.setSupportRefreshToken(<span class=\"literal\">true</span>);<span class=\"comment\">//支持刷新令牌 </span></span><br><span class=\"line\">        service.setTokenStore(tokenStore);<span class=\"comment\">//令牌存储策略 </span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"type\">TokenEnhancerChain</span> <span class=\"variable\">tokenEnhancerChain</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TokenEnhancerChain</span>(); </span><br><span class=\"line\">        tokenEnhancerChain.setTokenEnhancers(Arrays.asList(accessTokenConverter)); </span><br><span class=\"line\">        service.setTokenEnhancer(tokenEnhancerChain); </span><br><span class=\"line\"> </span><br><span class=\"line\">        service.setAccessTokenValiditySeconds(<span class=\"number\">7200</span>); <span class=\"comment\">// 令牌默认有效期2小时 </span></span><br><span class=\"line\">        service.setRefreshTokenValiditySeconds(<span class=\"number\">259200</span>); <span class=\"comment\">// 刷新令牌默认有效期3天 </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> service; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2️⃣使用 httpclient 通过密码模式申请令牌</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 密码模式 </span><br><span class=\"line\">POST &#123;&#123;auth_host&#125;&#125;/oauth/token?client_id=XcWebApp&amp;client_secret=XcWebApp&amp;grant_type=password&amp;username=zhangsan&amp;password=<span class=\"number\">123</span> </span><br></pre></td></tr></table></figure>\n<p>生成 jwt 的示例如下：</p>\n<figure class=\"highlight json\"><figcaption><span>json</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;access_token&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsicmVzMSJdLCJ1c2VyX25hbWUiOiJ6aGFuZ3NhbiIsInNjb3BlIjpbImFsbCJdLCJleHAiOjE2NjQzMzE2OTUsImF1dGhvcml0aWVzIjpbInAxIl0sImp0aSI6ImU5ZDNkMGZkLTI0Y2ItNDRjOC04YzEwLTI1NmIzNGY4ZGZjYyIsImNsaWVudF9pZCI6ImMxIn0.-9SKI-qUqKhKcs8Gb80Rascx-JxqsNZxxXoPo82d8SM&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;token_type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;bearer&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;refresh_token&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsicmVzMSJdLCJ1c2VyX25hbWUiOiJ6aGFuZ3NhbiIsInNjb3BlIjpbImFsbCJdLCJhdGkiOiJlOWQzZDBmZC0yNGNiLTQ0YzgtOGMxMC0yNTZiMzRmOGRmY2MiLCJleHAiOjE2NjQ1ODM2OTUsImF1dGhvcml0aWVzIjpbInAxIl0sImp0aSI6ImRjNTRjNTRkLTA0YTMtNDIzNS04MmY3LTFkOWZkMmFjM2VmNSIsImNsaWVudF9pZCI6ImMxIn0.Wsw1Jc-Kd_GFqEugzdfoSsMY6inC8OQsraA21WjWtT8&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;expires_in&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">7199</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;scope&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;all&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;jti&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;e9d3d0fd-24cb-44c8-8c10-256b34f8dfcc&quot;</span> </span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span> </span><br></pre></td></tr></table></figure>\n<p>3️⃣我们可以通过 check_token 接口校验 jwt 令牌</p>\n<figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">###校验jwt令牌 </span><br><span class=\"line\">POST &#123;&#123;auth_host&#125;&#125;/oauth/check_token?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsicmVzMSJdLCJ1c2VyX25hbWUiOiJzdHUxIiwic2NvcGUiOlsiYWxsIl0sImV4cCI6MTY2NDM3MTc4MCwiYXV0aG9yaXRpZXMiOlsicDEiXSwianRpIjoiZjBhM2NkZWItMzk5ZC00OGYwLTg4MDQtZWNhNjM4YWQ4ODU3IiwiY2xpZW50X2lkIjoiYzEifQ.qy46CSCJsH3eXWTHgdcntZhzcSzfRQlBU0dxAjZcsUw </span><br></pre></td></tr></table></figure>\n<p>響應示例如下：</p>\n<figure class=\"highlight json\"><figcaption><span>json</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;aud&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span> </span><br><span class=\"line\">    <span class=\"string\">&quot;res1&quot;</span> </span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;user_name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;zhangsan&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;scope&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span> </span><br><span class=\"line\">    <span class=\"string\">&quot;all&quot;</span> </span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;active&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;exp&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">1664371780</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;authorities&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span> </span><br><span class=\"line\">    <span class=\"string\">&quot;p1&quot;</span> </span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;jti&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;f0a3cdeb-399d-48f0-8804-eca638ad8857&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;client_id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;c1&quot;</span> </span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span> </span><br></pre></td></tr></table></figure>\n<h2 id=\"網關認證\"><a class=\"markdownIt-Anchor\" href=\"#網關認證\">#</a> 網關認證</h2>\n<img data-src=\"/John/img/java/SpringSecurity/10.png\" class=\"abc\">\n<p>🟡所有存取微服務的請求都要經過網關，在網關進行使用者身分的認證可以將許多非法的請求攔截到微服務以外，這叫做網關認證。</p>\n<p>下邊需要明確網關的職責：</p>\n<p>1、網站白名單維護：針對不用認證的 URL 全部放行。</p>\n<p>2、校驗 jwt 的合法性：除了白名單剩下的就是需要認證的請求，網關需要驗證 jwt 的合法性，jwt 合法則說明用戶身份合法，否則說明身份不合法則拒絕繼續訪問。</p>\n<p>🟡網關負責授權嗎？</p>\n<p>網關不負責授權，對請求的授權操作在各個微服務進行，因為微服務最清楚使用者有哪些權限存取哪些介面。</p>\n<h2 id=\"實現網關認證\"><a class=\"markdownIt-Anchor\" href=\"#實現網關認證\">#</a> 實現網關認證</h2>\n<p>下邊實現網關認證，實現以下職責：</p>\n<p>1️⃣網站白名單維護</p>\n<p>針對不用認證的 URL 全部放行。</p>\n<p>2️⃣校驗 jwt 的合法性。</p>\n<p>除了白名單剩下的就是需要認證的請求，網關需要驗證 jwt 的合法性，jwt 合法則說明用戶身份合法，否則說明身份不合法則拒絕繼續訪問。</p>\n<p>1️⃣在網關工程添加依賴</p>\n<figure class=\"highlight xml\"><figcaption><span>XML</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-security<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-oauth2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span> </span><br></pre></td></tr></table></figure>\n<p>2️⃣拷貝課程資料下網關認證配置類別到網關工程的 config 包下。</p>\n<p>3️⃣設定白名單檔 security-whitelist.properties</p>\n<figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**=临时全部放行 </span><br><span class=\"line\">/auth/**=认证地址 </span><br><span class=\"line\">/content/open/**=内容管理公开访问接口 </span><br><span class=\"line\">/media/open/**=媒资管理公开访问接口 </span><br></pre></td></tr></table></figure>\n<p>重啟網關工程，進行測試<br>\n 1、申請令牌<br>\n 2、透過網關存取資源服務<br>\n這裡存取內容管理服務</p>\n<figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 通过网关访问资源服务 </span><br><span class=\"line\">GET http://localhost:63010/content/course/2 </span><br><span class=\"line\">Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsicmVzMSJdLCJ1c2VyX25hbWUiOiJ6aGFuZ3NhbiIsInNjb3BlIjpbImFsbCJdLCJleHAiOjE2NjQzNjIzMTAsImF1dGhvcml0aWVzIjpbInAxIl0sImp0aSI6Ijc2OTkwMGNiLWM1ZjItNGRiNC1hZWJmLWY1MzgxZDQxZWMyZCIsImNsaWVudF9pZCI6ImMxIn0.lOITjUgYg2HCh5mDPK9EvJJqz-tIupKVfmP8yWJQIKs </span><br></pre></td></tr></table></figure>\n<p>現在我們的網關作用:1️⃣路由轉發2️⃣認證和校驗 JWT 令牌的合法性3️⃣維護一份白名單</p>\n<h1 id=\"用户認證\"><a class=\"markdownIt-Anchor\" href=\"#用户認證\">#</a> 用户認證</h1>\n<h2 id=\"連結用戶中心資料庫\"><a class=\"markdownIt-Anchor\" href=\"#連結用戶中心資料庫\">#</a> 連結用戶中心資料庫</h2>\n<p>我們要在認證服務中連接用戶中心資料庫查詢用戶資訊。</p>\n<p>前邊學習 Spring Security 運作原理時有一張執行流程圖，如下圖：</p>\n<img data-src=\"/John/img/java/SpringSecurity/11.png\" class=\"abc\">\n<p>使用者提交帳號和密碼由 DaoAuthenticationProvider 呼叫 UserDetailsService 的 loadUserByUsername () 方法取得 UserDetails 使用者資訊。</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserDetailsService</span> &#123; </span><br><span class=\"line\">    UserDetails <span class=\"title function_\">loadUserByUsername</span><span class=\"params\">(String var1)</span> <span class=\"keyword\">throws</span> UsernameNotFoundException; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>UserDetails 是用户信息接口</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserDetails</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Serializable</span> &#123; </span><br><span class=\"line\">    Collection&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">GrantedAuthority</span>&gt; getAuthorities(); </span><br><span class=\"line\"> </span><br><span class=\"line\">    String <span class=\"title function_\">getPassword</span><span class=\"params\">()</span>; </span><br><span class=\"line\"> </span><br><span class=\"line\">    String <span class=\"title function_\">getUsername</span><span class=\"params\">()</span>; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">isAccountNonExpired</span><span class=\"params\">()</span>; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">isAccountNonLocked</span><span class=\"params\">()</span>; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">isCredentialsNonExpired</span><span class=\"params\">()</span>; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">isEnabled</span><span class=\"params\">()</span>; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>我們只要實作 UserDetailsService 介面查詢資料庫得到使用者資訊回傳 UserDetails 類型的使用者資訊即可</p>\n<p>首先屏蔽原来定义的 UserDetailsService。</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">//配置用户信息服务 </span></span><br><span class=\"line\"><span class=\"comment\">//    @Bean </span></span><br><span class=\"line\"><span class=\"comment\">//    public UserDetailsService userDetailsService() &#123; </span></span><br><span class=\"line\"><span class=\"comment\">//        //这里配置用户信息,这里暂时使用这种方式将用户存储在内存中 </span></span><br><span class=\"line\"><span class=\"comment\">//        InMemoryUserDetailsManager manager = new InMemoryUserDetailsManager(); </span></span><br><span class=\"line\"><span class=\"comment\">//        manager.createUser(User.withUsername(&quot;zhangsan&quot;).password(&quot;123&quot;).authorities(&quot;p1&quot;).build()); </span></span><br><span class=\"line\"><span class=\"comment\">//        manager.createUser(User.withUsername(&quot;lisi&quot;).password(&quot;456&quot;).authorities(&quot;p2&quot;).build()); </span></span><br><span class=\"line\"><span class=\"comment\">//        return manager; </span></span><br><span class=\"line\"><span class=\"comment\">//    &#125; </span></span><br></pre></td></tr></table></figure>\n<p>下边自定义 UserDetailsService</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserDetailsImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">UserDetailsService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    XcUserMapper xcUserMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> name     用户输入的登录账号</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span>         UserDetails</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@throws</span>         UsernameNotFoundException</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> UserDetails <span class=\"title function_\">loadUserByUsername</span><span class=\"params\">(String name)</span> <span class=\"keyword\">throws</span> UsernameNotFoundException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 没别的意思，只是变量名看着舒服</span></span><br><span class=\"line\">        <span class=\"comment\">// 根据username去XcUser表中查询对应的用户信息</span></span><br><span class=\"line\">        <span class=\"type\">XcUser</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> xcUserMapper.selectOne(<span class=\"keyword\">new</span> <span class=\"title class_\">LambdaQueryWrapper</span>&lt;XcUser&gt;().eq(XcUser::getUsername, name));</span><br><span class=\"line\">        <span class=\"comment\">// 返回NULL表示用户不存在，SpringSecurity会帮我们处理，框架抛出异常用户不存在</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (user == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 取出数据库存储的密码</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">password</span> <span class=\"operator\">=</span> user.getPassword();</span><br><span class=\"line\">        <span class=\"comment\">//如果查到了用户拿到正确的密码，最终封装成一个UserDetails对象给spring security框架返回，由框架进行密码比对</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> User.withUsername(user.getUsername()).password(password).authorities(<span class=\"string\">&quot;test&quot;</span>).build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>查詢用戶流程:</p>\n<img data-src=\"/John/img/java/SpringSecurity/12.png\" class=\"abc\">\n<p>資料庫中的密碼加過密的，使用者輸入的密碼是明文，我們需要修改密碼格式器 PasswordEncoder，原來使用的是 NoOpPasswordEncoder，它是透過明文方式比較密碼，現在我們修改為 BCryptPasswordEncoder，它是將使用者輸入的 密碼編碼為 BCrypt 格式與資料庫中的密碼進行比對。</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"meta\">@Bean</span> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> PasswordEncoder <span class=\"title function_\">passwordEncoder</span><span class=\"params\">()</span> &#123; </span><br><span class=\"line\"><span class=\"comment\">//        //密码为明文方式 </span></span><br><span class=\"line\"><span class=\"comment\">//        return NoOpPasswordEncoder.getInstance(); </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BCryptPasswordEncoder</span>(); </span><br><span class=\"line\">    &#125; </span><br></pre></td></tr></table></figure>\n<p>我们通过测试代码测试 BCryptPasswordEncoder，如下</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123; </span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">password</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;111111&quot;</span>; </span><br><span class=\"line\">    <span class=\"type\">PasswordEncoder</span> <span class=\"variable\">passwordEncoder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BCryptPasswordEncoder</span>(); </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++) &#123; </span><br><span class=\"line\">        <span class=\"comment\">//每个计算出的Hash值都不一样 </span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">hashPass</span> <span class=\"operator\">=</span> passwordEncoder.encode(password); </span><br><span class=\"line\">        System.out.println(hashPass); </span><br><span class=\"line\">        <span class=\"comment\">//虽然每次计算的密码Hash值不一样但是校验是通过的 </span></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> passwordEncoder.matches(password, hashPass); </span><br><span class=\"line\">        System.out.println(f); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>修改資料庫中的密碼為 Bcrypt 格式，並且記錄明文密碼，稍後申請令牌時需要。<br>\n由於修改密碼編碼方式還需要將客戶端的金鑰更改為 Bcrypt 格式.</p>\n<figure class=\"highlight java\"><figcaption><span>Java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">@Override</span> </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configure</span><span class=\"params\">(ClientDetailsServiceConfigurer clients)</span> </span><br><span class=\"line\">          <span class=\"keyword\">throws</span> Exception &#123; </span><br><span class=\"line\">        clients.inMemory()<span class=\"comment\">// 使用in-memory存储 </span></span><br><span class=\"line\">                .withClient(<span class=\"string\">&quot;XcWebApp&quot;</span>)<span class=\"comment\">// client_id </span></span><br><span class=\"line\"><span class=\"comment\">//                .secret(&quot;secret&quot;)//客户端密钥 </span></span><br><span class=\"line\">                .secret(<span class=\"keyword\">new</span> <span class=\"title class_\">BCryptPasswordEncoder</span>().encode(<span class=\"string\">&quot;XcWebApp&quot;</span>))<span class=\"comment\">//客户端密钥 </span></span><br><span class=\"line\">                .resourceIds(<span class=\"string\">&quot;xuecheng-plus&quot;</span>)<span class=\"comment\">//资源列表 </span></span><br><span class=\"line\">                .authorizedGrantTypes(<span class=\"string\">&quot;authorization_code&quot;</span>, <span class=\"string\">&quot;password&quot;</span>,<span class=\"string\">&quot;client_credentials&quot;</span>,<span class=\"string\">&quot;implicit&quot;</span>,<span class=\"string\">&quot;refresh_token&quot;</span>)<span class=\"comment\">// 该client允许的授权类型authorization_code,password,refresh_token,implicit,client_credentials </span></span><br><span class=\"line\">                .scopes(<span class=\"string\">&quot;all&quot;</span>)<span class=\"comment\">// 允许的授权范围 </span></span><br><span class=\"line\">                .autoApprove(<span class=\"literal\">false</span>)<span class=\"comment\">//false跳转到授权页面 </span></span><br><span class=\"line\">                <span class=\"comment\">//客户端接收授权码的重定向地址 </span></span><br><span class=\"line\">                .redirectUris(<span class=\"string\">&quot;http://www.51xuecheng.cn&quot;</span>) </span><br><span class=\"line\">   ; </span><br><span class=\"line\">  &#125; </span><br></pre></td></tr></table></figure>\n<p>現在重啟認證服務<br>\n下邊使用 httpclient 測試：</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 密码模式 </span><br><span class=\"line\">POST &#123;&#123;auth_host&#125;&#125;/oauth/token?client_id=XcWebApp&amp;client_secret=XcWebApp&amp;grant_type=password&amp;username=stu1&amp;password=<span class=\"number\">111111</span> </span><br></pre></td></tr></table></figure>\n<h3 id=\"擴展用戶身份資訊\"><a class=\"markdownIt-Anchor\" href=\"#擴展用戶身份資訊\">#</a> 擴展用戶身份資訊</h3>\n<p>使用者表中儲存了使用者的帳號、手機號碼、email，暱稱、頭像等訊息，UserDetails 介面只回傳了 username、密碼等訊息，如下：</p>\n<figure class=\"highlight java\"><figcaption><span>Java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserDetails</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Serializable</span> &#123; </span><br><span class=\"line\">    Collection&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">GrantedAuthority</span>&gt; getAuthorities(); </span><br><span class=\"line\"> </span><br><span class=\"line\">    String <span class=\"title function_\">getPassword</span><span class=\"params\">()</span>; </span><br><span class=\"line\"> </span><br><span class=\"line\">    String <span class=\"title function_\">getUsername</span><span class=\"params\">()</span>; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">isAccountNonExpired</span><span class=\"params\">()</span>; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">isAccountNonLocked</span><span class=\"params\">()</span>; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">isCredentialsNonExpired</span><span class=\"params\">()</span>; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">isEnabled</span><span class=\"params\">()</span>; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>我們需要擴展使用者身分的訊息，在 jwt 令牌中儲存使用者的暱稱、頭像、電郵等資訊。</p>\n<p>🟡如何擴展 Spring Security 的使用者識別資訊呢？</p>\n<p>在認證階段 DaoAuthenticationProvider 會呼叫 UserDetailService 查詢使用者的信息，這裡是可以獲取到齊全的使用者資訊的。 由於 JWT 令牌中用戶身份資訊來自 UserDetails，UserDetails 中僅定義了 username 為用戶的身份信息，這裡有兩個思路：第一個是可以擴展 UserDetails，使之包括更多的自定義屬性，第二也 可以擴充 username 的內容，例如存入 json 資料內容作為 username 的內容。 相比較而言，方案二比較簡單還不用破壞 UserDetails 的結構，我們採用方案二。<br>\n修改 UserServiceImpl 如下：</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserDetailsImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">UserDetailsService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    XcUserMapper xcUserMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> s     用户输入的登录账号</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span>      UserDetails</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> UsernameNotFoundException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> UserDetails <span class=\"title function_\">loadUserByUsername</span><span class=\"params\">(String s)</span> <span class=\"keyword\">throws</span> UsernameNotFoundException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 没别的意思，只是变量名看着舒服</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> s;</span><br><span class=\"line\">        <span class=\"comment\">// 根据username去XcUser表中查询对应的用户信息</span></span><br><span class=\"line\">        <span class=\"type\">XcUser</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> xcUserMapper.selectOne(<span class=\"keyword\">new</span> <span class=\"title class_\">LambdaQueryWrapper</span>&lt;XcUser&gt;().eq(XcUser::getUsername, name));</span><br><span class=\"line\">        <span class=\"comment\">// 返回空表示用户不存在，SpringSecurity会帮我们处理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (user == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 取出数据库存储的密码</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">password</span> <span class=\"operator\">=</span> user.getPassword();</span><br><span class=\"line\">+       <span class=\"comment\">// 用户敏感信息不要设置</span></span><br><span class=\"line\">+       user.setPassword(<span class=\"literal\">null</span>);</span><br><span class=\"line\">+       <span class=\"type\">String</span> <span class=\"variable\">userString</span> <span class=\"operator\">=</span> JSON.toJSONString(user);</span><br><span class=\"line\">        <span class=\"comment\">// 创建UserDetails对象，并返回，注意这里的authorities必须指定</span></span><br><span class=\"line\">-       <span class=\"keyword\">return</span> User.withUsername(user.getUsername()).password(password).authorities(<span class=\"string\">&quot;test&quot;</span>).build();</span><br><span class=\"line\">+       <span class=\"keyword\">return</span> User.withUsername(userString).password(password).authorities(<span class=\"string\">&quot;test&quot;</span>).build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重启认证服务，重新生成令牌，生成成功。<br>\n我们可以使用 check_token 查询 jwt 的内容</p>\n<figure class=\"highlight json\"><figcaption><span>json</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">###校验jwt令牌 </span><br><span class=\"line\">POST <span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#123;</span>auth_host<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span>/oauth/check_token?token= </span><br></pre></td></tr></table></figure>\n<p>user_name 儲存了使用者資訊的 json 格式，在資源服務中就可以取出該 json 格式的內容轉為使用者物件去使用。</p>\n<h3 id=\"資源服務取得使用者身份\"><a class=\"markdownIt-Anchor\" href=\"#資源服務取得使用者身份\">#</a> 資源服務取得使用者身份</h3>\n<p>下面編寫一個工具類別在各個微服務中去使用，取得目前登入使用者的物件。 在 content-api 中定義此類:</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SecurityUtil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> XcUser <span class=\"title function_\">getUser</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Object</span> <span class=\"variable\">principal</span> <span class=\"operator\">=</span> SecurityContextHolder.getContext().getAuthentication().getPrincipal();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (principal <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">userJson</span> <span class=\"operator\">=</span> principal.toString();</span><br><span class=\"line\">                <span class=\"type\">XcUser</span> <span class=\"variable\">xcUser</span> <span class=\"operator\">=</span> JSON.parseObject(userJson, XcUser.class);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> xcUser;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;获取当前登录用户身份信息出错：&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 这里使用内部类，是为了不让content工程去依赖auth工程</span></span><br><span class=\"line\">    <span class=\"meta\">@Data</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">XcUser</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String salt;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String nickname;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String wxUnionid;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String companyId;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">        * 头像</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String userpic;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String utype;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> LocalDateTime birthday;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String sex;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String cellphone;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String qq;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">        * 用户状态</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String status;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> LocalDateTime createTime;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> LocalDateTime updateTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以下在內容管理服務中測試此工具類，以查詢課程資訊介面為例</p>\n<figure class=\"highlight json\"><figcaption><span>json</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    @ApiOperation(<span class=\"string\">&quot;根据课程id查询课程基础信息&quot;</span>)</span><br><span class=\"line\">    @GetMapping(<span class=\"string\">&quot;/course/&#123;courseId&#125;&quot;</span>)</span><br><span class=\"line\">    public CourseBaseInfoDto getCourseBaseById(@PathVariable Long courseId) <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">+       SecurityUtil.XcUser user = SecurityUtil.getUser();</span><br><span class=\"line\">-       Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();</span><br><span class=\"line\">-       System.out.println(<span class=\"string\">&quot;当前用户身份为：&quot;</span> + principal);</span><br><span class=\"line\">+       System.out.println(<span class=\"string\">&quot;当前用户身份为：&quot;</span> + user);</span><br><span class=\"line\">        return courseBaseInfoService.getCourseBaseInfo(courseId);</span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>重啟內容管理服務：<br>\n1、啟動認證服務、網關、內容管理服務<br>\n 2、產生新的令牌<br>\n 3、攜帶令牌存取內容管理服務的查詢課程接口</p>\n<img data-src=\"/John/img/java/SpringSecurity/13.png\" class=\"abc\">\n<h1 id=\"支援認證方式多樣\"><a class=\"markdownIt-Anchor\" href=\"#支援認證方式多樣\">#</a> 支援認證方式多樣</h1>\n<h2 id=\"統一認證入口\"><a class=\"markdownIt-Anchor\" href=\"#統一認證入口\">#</a> 統一認證入口</h2>\n<p>🍉目前各大網站的認證方式非常豐富：帳號密碼認證、手機驗證碼認證、掃碼登入等<br>\n🍉基於目前研究的 Spring Security 認證流程如何支援多樣化的認證方案呢？<br>\n1️⃣支援帳號和密碼認證：採用 OAuth2 協議的密碼模式即可實現<br>\n2️⃣支援手機號加驗證碼認證：使用者認證提交的是手機號碼和驗證碼，並不是帳號和密碼<br>\n3️⃣微信掃碼認證：基於 OAuth2 協議與微信交互，學成在線網站會向微信伺服器申請一個令牌，然後攜帶令牌去微信查詢用戶信息，查詢成功則用戶在學成在線項目認證通過<br>\n🍉目前我們測試通過 OAuth2 的密碼模式，用戶認證會提交帳號和密碼，由 DaoAuthenticationProvider 調用 UserDetailsService 的 loadUserByUsername () 方法獲取 UserDetails 用戶信息<br>\n🍉在前面我們自訂了 UserDetailsService 介面實作類，透過 loadUserByUsername () 方法根據帳號查詢使用者資訊<br>\n🍉而不同的認證提交方式的數據不一樣，例如<br>\n手機加驗證碼方式：會提交手機號碼和驗證碼<br>\n帳號密碼方式：會提交帳號、密碼、驗證碼<br>\n🍉我們可以在 loadUserByUsername () 方法上做文章，將使用者原來提交的帳號數據改為提交一個 JSON 數據，JSON 數據可以擴展不同的認證方式所提交的各種參數<br>\n🍉首先建立一個 DTO 類別用於接收各種認證參數</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AuthParamsDto</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username; <span class=\"comment\">//用户名</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password; <span class=\"comment\">//域  用于扩展</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String cellphone;<span class=\"comment\">//手机号</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String checkcode;<span class=\"comment\">//验证码</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String checkcodekey;<span class=\"comment\">//验证码key</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String authType; <span class=\"comment\">// 认证的类型   password:用户名密码模式类型    sms:短信模式类型</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, Object&gt; payload = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();<span class=\"comment\">//附加数据，作为扩展，不同认证类型可拥有不同的附加数据。如认证类型为短信时包含smsKey : sms:3d21042d054548b08477142bbca95cfa; 所有情况下都包含clientId</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时 loadUserByUsername () 方法可以修改如下：</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserDetailsImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">UserDetailsService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    XcUserMapper xcUserMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> s 用户输入的登录账号</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> UserDetails</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> UsernameNotFoundException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> UserDetails <span class=\"title function_\">loadUserByUsername</span><span class=\"params\">(String s)</span> <span class=\"keyword\">throws</span> UsernameNotFoundException &#123;</span><br><span class=\"line\">+       <span class=\"type\">AuthParamsDto</span> <span class=\"variable\">authParamsDto</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">+       <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">+           authParamsDto = JSON.parseObject(s, AuthParamsDto.class);</span><br><span class=\"line\">+       &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">+           log.error(<span class=\"string\">&quot;认证请求数据格式不对：&#123;&#125;&quot;</span>, s);</span><br><span class=\"line\">+           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;认证请求数据格式不对&quot;</span>);</span><br><span class=\"line\">+       &#125;</span><br><span class=\"line\">-       <span class=\"comment\">// 没别的意思，只是变量名看着舒服</span></span><br><span class=\"line\">-       <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> s;</span><br><span class=\"line\">+       <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> authParamsDto.getUsername();</span><br><span class=\"line\">        <span class=\"comment\">// 根据username去XcUser表中查询对应的用户信息</span></span><br><span class=\"line\">        <span class=\"type\">XcUser</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> xcUserMapper.selectOne(<span class=\"keyword\">new</span> <span class=\"title class_\">LambdaQueryWrapper</span>&lt;XcUser&gt;().eq(XcUser::getUsername, name));</span><br><span class=\"line\">        <span class=\"comment\">// 返回空表示用户不存在，SpringSecurity会帮我们处理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (user == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 取出数据库存储的密码</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">password</span> <span class=\"operator\">=</span> user.getPassword();</span><br><span class=\"line\">        user.setPassword(<span class=\"literal\">null</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">userString</span> <span class=\"operator\">=</span> JSON.toJSONString(user);</span><br><span class=\"line\">        <span class=\"comment\">// 创建UserDetails对象，并返回，注意这里的authorities必须指定</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> User.withUsername(userString).password(password).authorities(<span class=\"string\">&quot;test&quot;</span>).build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>原來的 DaoAuthenticationProvider 會進行密碼校驗，現在重新定義 DaoAuthenticationProviderCustom 類，重寫類別的 additionalAuthenticationChecks 方法。</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span> </span><br><span class=\"line\"><span class=\"meta\">@Component</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DaoAuthenticationProviderCustom</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">DaoAuthenticationProvider</span> &#123; </span><br><span class=\"line\"> <span class=\"meta\">@Autowired</span> </span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setUserDetailsService</span><span class=\"params\">(UserDetailsService userDetailsService)</span> &#123; </span><br><span class=\"line\">  <span class=\"built_in\">super</span>.setUserDetailsService(userDetailsService); </span><br><span class=\"line\"> &#125; </span><br><span class=\"line\"> <span class=\"comment\">//屏蔽密码对比 </span></span><br><span class=\"line\"> <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">additionalAuthenticationChecks</span><span class=\"params\">(UserDetails userDetails, UsernamePasswordAuthenticationToken authentication)</span> <span class=\"keyword\">throws</span> AuthenticationException &#123; </span><br><span class=\"line\"></span><br><span class=\"line\"> &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改 WebSecurityConfig 类指定 daoAuthenticationProviderCustom</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span> </span><br><span class=\"line\">DaoAuthenticationProviderCustom daoAuthenticationProviderCustom; </span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@Override</span> </span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configure</span><span class=\"params\">(AuthenticationManagerBuilder auth)</span> <span class=\"keyword\">throws</span> Exception &#123; </span><br><span class=\"line\">    auth.authenticationProvider(daoAuthenticationProviderCustom); </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>原來的 DaoAuthenticationProvider 會進行密碼校驗，現在重新定義 DaoAuthenticationProviderCustom 類，重寫類別的 additionalAuthenticationChecks 方法。</p>\n<figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">################扩展认证请求参数后###################### </span><br><span class=\"line\">###密码模式 </span><br><span class=\"line\">POST &#123;&#123;auth_host&#125;&#125;/auth/oauth/token?client_id=XcWebApp&amp;client_secret=XcWebApp&amp;grant_type=password&amp;username=&#123;&quot;username&quot;:&quot;stu1&quot;,&quot;authType&quot;:&quot;password&quot;,&quot;password&quot;:&quot;111111&quot;&#125; </span><br></pre></td></tr></table></figure>\n<p>經過測試發現 loadUserByUsername () 方法可以正常接收到認證請求中的 json 資料。<br>\n有了這些認證參數我們可以定義一個認證 Service 介面去進行各種方式的認證。<br>\n定義使用者訊息，為了擴展性讓它繼承 XcUser</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">XcUserExt</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">XcUser</span> &#123; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>定义认证 Service 接口</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">AuthService</span> &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@description</span> 认证方法 </span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> authParamsDto 认证参数 </span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> com.xuecheng.ucenter.model.po.XcUser 用户信息 </span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@author</span> Mr.M </span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@date</span> 2022/9/29 12:11 </span></span><br><span class=\"line\"><span class=\"comment\">   */</span> </span><br><span class=\"line\">   XcUserExt <span class=\"title function_\">execute</span><span class=\"params\">(AuthParamsDto authParamsDto)</span>; </span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>loadUserByUsername () 修改如下：</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span> </span><br><span class=\"line\"><span class=\"meta\">@Service</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">UserDetailsService</span> &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span> </span><br><span class=\"line\">    XcUserMapper xcUserMapper; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span> </span><br><span class=\"line\">    ApplicationContext applicationContext; </span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@description</span> 查询用户信息组成用户身份信息 </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> s  AuthParamsDto类型的json数据 </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> org.springframework.security.core.userdetails.UserDetails </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> Mr.M </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@date</span> 2022/9/28 18:30 </span></span><br><span class=\"line\"><span class=\"comment\">    */</span> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> UserDetails <span class=\"title function_\">loadUserByUsername</span><span class=\"params\">(String s)</span> <span class=\"keyword\">throws</span> UsernameNotFoundException &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"type\">AuthParamsDto</span> <span class=\"variable\">authParamsDto</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>; </span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123; </span><br><span class=\"line\">            <span class=\"comment\">//将认证参数转为AuthParamsDto类型 </span></span><br><span class=\"line\">            authParamsDto = JSON.parseObject(s, AuthParamsDto.class); </span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123; </span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;认证请求不符合项目要求:&#123;&#125;&quot;</span>,s); </span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;认证请求数据格式不对&quot;</span>); </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"comment\">//开始认证 </span></span><br><span class=\"line\">        authService.execute(authParamsDto); </span><br><span class=\"line\">        ..... </span><br></pre></td></tr></table></figure>\n<h2 id=\"實現帳號密碼認證\"><a class=\"markdownIt-Anchor\" href=\"#實現帳號密碼認證\">#</a> 實現帳號密碼認證</h2>\n<p>上節定義了 AuthService 認證接口，用策略模式實作此接口實作帳號密碼認證和微信掃碼方式，</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service(&quot;password_authservice&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PasswordAuthServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AuthService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> XcUserExt <span class=\"title function_\">execute</span><span class=\"params\">(AuthParamsDto authParamsDto)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service(&quot;wx_authservice&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WxAuthServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AuthService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> XcUserExt <span class=\"title function_\">execute</span><span class=\"params\">(AuthParamsDto authParamsDto)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改 UserServiceImpl 類，依照認證方式使用不同的認證 bean</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> UserDetails <span class=\"title function_\">loadUserByUsername</span><span class=\"params\">(String s)</span> <span class=\"keyword\">throws</span> UsernameNotFoundException &#123;</span><br><span class=\"line\">        <span class=\"type\">AuthParamsDto</span> <span class=\"variable\">authParamsDto</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            authParamsDto = JSON.parseObject(s, AuthParamsDto.class);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;认证请求数据格式不对：&#123;&#125;&quot;</span>, s);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;认证请求数据格式不对&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">+       <span class=\"comment\">// 获取认证类型，beanName就是 认证类型 + 后缀，例如 password + _authservice = password_authservice</span></span><br><span class=\"line\">+       <span class=\"type\">String</span> <span class=\"variable\">authType</span> <span class=\"operator\">=</span> authParamsDto.getAuthType();</span><br><span class=\"line\">+       <span class=\"comment\">// 根据认证类型，从Spring容器中取出对应的bean</span></span><br><span class=\"line\">+       <span class=\"type\">AuthService</span> <span class=\"variable\">authService</span> <span class=\"operator\">=</span> applicationContext.getBean(authType + <span class=\"string\">&quot;_authservice&quot;</span>, AuthService.class);</span><br><span class=\"line\">+       <span class=\"type\">XcUserExt</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> authService.execute(authParamsDto);</span><br><span class=\"line\">-       <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> authParamsDto.getUsername();</span><br><span class=\"line\">-       <span class=\"comment\">// 根据username去XcUser表中查询对应的用户信息</span></span><br><span class=\"line\">-       <span class=\"type\">XcUser</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> xcUserMapper.selectOne(<span class=\"keyword\">new</span> <span class=\"title class_\">LambdaQueryWrapper</span>&lt;XcUser&gt;().eq(XcUser::getUsername, name));</span><br><span class=\"line\">        <span class=\"comment\">// 返回空表示用户不存在，SpringSecurity会帮我们处理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (user == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 取出数据库存储的密码</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">password</span> <span class=\"operator\">=</span> user.getPassword();</span><br><span class=\"line\">        user.setPassword(<span class=\"literal\">null</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">userString</span> <span class=\"operator\">=</span> JSON.toJSONString(user);</span><br><span class=\"line\">        <span class=\"comment\">// 创建UserDetails对象，并返回，注意这里的authorities必须指定</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> User.withUsername(userString).password(password).authorities(<span class=\"string\">&quot;test&quot;</span>).build();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>上面我们只是简单定义了账号密码认证的实现类，并没有编写具体逻辑，那这个小节我们就来具体实现账号密码认证</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service(&quot;password_authservice&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PasswordAuthServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AuthService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    XcUserMapper xcUserMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    PasswordEncoder passwordEncoder;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> XcUserExt <span class=\"title function_\">execute</span><span class=\"params\">(AuthParamsDto authParamsDto)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 获取账号</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">username</span> <span class=\"operator\">=</span> authParamsDto.getUsername();</span><br><span class=\"line\">        <span class=\"comment\">// 2. 根据账号去数据库中查询是否存在</span></span><br><span class=\"line\">        <span class=\"type\">XcUser</span> <span class=\"variable\">xcUser</span> <span class=\"operator\">=</span> xcUserMapper.selectOne(<span class=\"keyword\">new</span> <span class=\"title class_\">LambdaQueryWrapper</span>&lt;XcUser&gt;().eq(XcUser::getUsername, username));</span><br><span class=\"line\">        <span class=\"comment\">// 3. 不存在抛异常</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (xcUser == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;账号不存在&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 4. 校验密码</span></span><br><span class=\"line\">        <span class=\"comment\">// 4.1 获取用户输入的密码</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">passwordForm</span> <span class=\"operator\">=</span> authParamsDto.getPassword();</span><br><span class=\"line\">        <span class=\"comment\">// 4.2 获取数据库中存储的密码</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">passwordDb</span> <span class=\"operator\">=</span> xcUser.getPassword();</span><br><span class=\"line\">        <span class=\"comment\">// 4.3 比较密码</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">matches</span> <span class=\"operator\">=</span> passwordEncoder.matches(passwordForm, passwordDb);</span><br><span class=\"line\">        <span class=\"comment\">// 4.4 不匹配，抛异常</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!matches) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;账号或密码错误&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 4.5 匹配，封装返回</span></span><br><span class=\"line\">        <span class=\"type\">XcUserExt</span> <span class=\"variable\">xcUserExt</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">XcUserExt</span>();</span><br><span class=\"line\">        BeanUtils.copyProperties(xcUser, xcUserExt);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> xcUserExt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改 loadUserByUsername () 方法，我们可以将最后的封装 UserDetails 的相关代码抽取为一个方法</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> UserDetails <span class=\"title function_\">loadUserByUsername</span><span class=\"params\">(String s)</span> <span class=\"keyword\">throws</span> UsernameNotFoundException &#123;</span><br><span class=\"line\">        <span class=\"type\">AuthParamsDto</span> <span class=\"variable\">authParamsDto</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            authParamsDto = JSON.parseObject(s, AuthParamsDto.class);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;认证请求数据格式不对：&#123;&#125;&quot;</span>, s);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;认证请求数据格式不对&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 获取认证类型，beanName就是 认证类型 + 后缀，例如 password + _authservice = password_authservice</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">authType</span> <span class=\"operator\">=</span> authParamsDto.getAuthType();</span><br><span class=\"line\">        <span class=\"comment\">// 根据认证类型，从Spring容器中取出对应的bean</span></span><br><span class=\"line\">        <span class=\"type\">AuthService</span> <span class=\"variable\">authService</span> <span class=\"operator\">=</span> applicationContext.getBean(authType + <span class=\"string\">&quot;_authservice&quot;</span>, AuthService.class);</span><br><span class=\"line\">        <span class=\"type\">XcUserExt</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> authService.execute(authParamsDto);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getUserPrincipal(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">       <span class=\"keyword\">public</span> UserDetails <span class=\"title function_\">getUserPrincipal</span><span class=\"params\">(XcUserExt user)</span> &#123;</span><br><span class=\"line\">       String[] authorities = &#123;<span class=\"string\">&quot;test&quot;</span>&#125;;</span><br><span class=\"line\">       <span class=\"type\">String</span> <span class=\"variable\">password</span> <span class=\"operator\">=</span> user.getPassword();</span><br><span class=\"line\">       user.setPassword(<span class=\"literal\">null</span>);</span><br><span class=\"line\">       <span class=\"type\">String</span> <span class=\"variable\">userJsonStr</span> <span class=\"operator\">=</span> JSON.toJSONString(user);</span><br><span class=\"line\">       <span class=\"type\">UserDetails</span> <span class=\"variable\">userDetails</span> <span class=\"operator\">=</span> User.withUsername(userJsonStr).password(password).authorities(authorities).build();</span><br><span class=\"line\">       <span class=\"keyword\">return</span> userDetails;</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n<p>實現帳號密碼認證，申請令牌，注意 JSON 資料中要帶上 authType</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">###### 密码模式</span><br><span class=\"line\">POST localhost:<span class=\"number\">53070</span>/auth/oauth/token?client_id=XcWebApp&amp;client_secret=XcWebApp&amp;grant_type=password&amp;username=&#123;<span class=\"string\">&quot;username&quot;</span>:<span class=\"string\">&quot;Kyle&quot;</span>,<span class=\"string\">&quot;password&quot;</span>:<span class=\"string\">&quot;111111&quot;</span>,<span class=\"string\">&quot;authType&quot;</span>:<span class=\"string\">&quot;password&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n<p><span class=\"green\">下篇:</span><a href=\"/John/2023/11/03/java/SpringSecurity/WeChat_login\">驗證碼和微信登錄</a></p>\n<img data-src=\"https://s1.aigei.com/src/img/jpg/76/766f945a88ff4bafa8aa409d5bedb642.jpg?imageMogr2/auto-orient/thumbnail/!282x282r/gravity/Center/crop/282x282/quality/85/&e=1735488000&token=P7S2Xpzfz11vAkASLTkfHN7Fw-oOZBecqeJaxypL:PlOHtwQdZo0HyFUYu3_jASLjruk=\" class=\"abc\" width=\"250\" height=\"200\">",
            "tags": [
                "SpringSecurity"
            ]
        },
        {
            "id": "https://superrjohn.github.io/John/2023/10/27/java/springMVC/UserBook-Web",
            "url": "https://superrjohn.github.io/John/2023/10/27/java/springMVC/UserBook-Web",
            "title": "手寫springMVC!",
            "date_published": "2023-10-27T09:24:46.659Z",
            "content_html": "<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>初學階段全端的一個項目，是一個簡單的用戶端圖書管理系統，登錄用 jwt 令牌實現。<br>\n前端是用 Vue2、Pinia 做狀態管理、bootstrap 5 (不推薦)、Axios。<br>\n後端用 SpringMVC、SpringBoot、Mybatis、MySQL。<br>\n於由就是一個很久之前的項目，而且項目結構很簡單只是練練手，現在只是補寫一個記錄，所以我就不每個步驟記錄，只記錄重點～<br>\n 項目地址:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3N1cGVycmpvaG4vVXNlckJvb2stV2Vi\">https://github.com/superrjohn/UserBook-Web</span></p>\n<h2 id=\"邏輯圖\"><a class=\"markdownIt-Anchor\" href=\"#邏輯圖\">#</a> 邏輯圖</h2>\n<p>做項目、模塊、業務功能一定要先寫邏輯圖，一來理清邏輯步驟，二來跟著步驟做開發。(雖然這圖寫得不太優)</p>\n<img data-src=\"/John/img/java/springMVC/logic_diagram.png\" class=\"abc\" width=\"400\" height=\"700\">\n<h2 id=\"前端\"><a class=\"markdownIt-Anchor\" href=\"#前端\">#</a> 前端</h2>\n<p>前端方面，我想記錄的是<span class=\"exturl\" data-url=\"aHR0cHM6Ly9waW5pYS52dWVqcy5vcmcvemgvaW50cm9kdWN0aW9uLmh0bWw=\"> Pinia</span> 狀態管理庫，會以 Vue2 做簡單說明。<br>\n1️⃣創一個 Pinia 實例并掛載到 Vue, 如果是 Vue 2 還需要安装一个插件 PiniaVuePlugin, 如果想擁有持久化，需要安裝 pinia-plugin-persistedstate 插件。</p>\n<img data-src=\"/John/img/java/springMVC/create_pinia.png\" class=\"abc\" width=\"600\" height=\"500\">\n<p>2️⃣Store 可以理解成要狀態管理的對象，它有三個重要的部份組成，分別是 state、getter 和 action, 本項目只用到 state、action,state 是屬性，而 action 是改變屬性的方法，我封裝了根據用戶 ID 發起查詢借書記錄的 API, 而 persist 為 true 開啟持久化。</p>\n<figure class=\"highlight java\"><figcaption><span>useBookStatus.js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineStore &#125; from <span class=\"string\">&#x27;pinia&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; userAPI &#125; from <span class=\"string\">&#x27;@/apis/user&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//個人借書記錄</span></span><br><span class=\"line\">export <span class=\"type\">const</span> <span class=\"variable\">useBookStatus</span> <span class=\"operator\">=</span> defineStore(<span class=\"string\">&#x27;bookStatus&#x27;</span>, &#123;</span><br><span class=\"line\">    state: () =&gt; (&#123;</span><br><span class=\"line\">        bookStatus: []</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    actions: &#123;</span><br><span class=\"line\">        async <span class=\"title function_\">getBookStatus</span><span class=\"params\">(id)</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">const</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> await <span class=\"title function_\">userAPI</span><span class=\"params\">(id)</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.bookStatus = res.data.data</span><br><span class=\"line\">            <span class=\"comment\">//console.log(this.bookStatus)</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        clearBookStatus() &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.bookStatus = []</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    persist: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>3️⃣個人頁的 JS 大概長這樣，用 mapActions () 輔助函數將 action 屬性映射到组件中，然後當頁面加載後根據 id 執行 getBookStatus 方法，查詢個人的借書記錄</p>\n<img data-src=\"/John/img/java/springMVC/status_action.png\" class=\"abc\" width=\"600\" height=\"500\">\n<h2 id=\"後端\"><a class=\"markdownIt-Anchor\" href=\"#後端\">#</a> 後端</h2>\n<p>項目結構簡單，主要是父工程，PO 類，工具類只有生成和解析 jwt 令牌，主要業務邏輯寫在 boot-web-management</p>\n<img data-src=\"/John/img/java/springMVC/boot-web-management.png\" class=\"abc\" width=\"300\" height=\"250\">\n<p>1️⃣首先是登錄功能，查詢用戶表，如果用戶存在剛獲得用戶對象後生成 jwt 令牌返回前端，沒有則返回登錄失敗信息給前端</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LoginController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/login&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Result <span class=\"title function_\">login</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> User user)</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;用戶登錄:&#123;&#125;&quot;</span>,user);</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">u</span> <span class=\"operator\">=</span> userService.login(user);</span><br><span class=\"line\">        <span class=\"comment\">//用戶登錄成功</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(u != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            Map&lt;String, Object&gt; claims = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">            claims.put(<span class=\"string\">&quot;id&quot;</span>, u.getId());</span><br><span class=\"line\">            claims.put(<span class=\"string\">&quot;username&quot;</span>, u.getUsername());</span><br><span class=\"line\">            claims.put(<span class=\"string\">&quot;name&quot;</span>, u.getName());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">jwt</span> <span class=\"operator\">=</span> JwtUtils.generateJwt(claims);<span class=\"comment\">//生成token令牌</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> Result.success(jwt);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//登錄失敗</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> Result.error(<span class=\"string\">&quot;密碼帳號有錯&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2️⃣之後都是對用戶的借書狀態和圖書狀態的增刪改查，使用了 interceptor 查詢令牌，沒有則攔截，還有全局異常配置等，沒什麼特別，值得說的是我用了 Spring AOP, 自定義註解來對重要的操作進行額外的日誌記錄。<br>\n首先要創一個自定義註解，說明在哪方法上運行</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//自定義註解,記錄修改用戶修改日誌</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span> <span class=\"comment\">//運行時生效</span></span><br><span class=\"line\"><span class=\"meta\">@Target(ElementType.METHOD)</span><span class=\"comment\">//註明方法上生效</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Log &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>這裡我使用了 @Around 做切入方法，因為我需要記錄原始方法的運行時間，annotation 則以自定義註解為切點。</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span><span class=\"comment\">//交給IOC管理</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span><span class=\"comment\">//切面類</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LogAspect</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HttpServletRequest request;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> OperateLogMapper operateLogMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Around(&quot;@annotation(com.itheima.anno.Log)&quot;)</span><span class=\"comment\">//以註解方式配備切入點方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">recordLog</span><span class=\"params\">(ProceedingJoinPoint joinPoint)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        <span class=\"comment\">//操作人ID,當前登錄員工的ID,獲最請求頭的JWT令牌,解析令牌</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">jwt</span> <span class=\"operator\">=</span> request.getHeader(<span class=\"string\">&quot;token&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Claims</span> <span class=\"variable\">claims</span> <span class=\"operator\">=</span> JwtUtils.parseJWT(jwt);</span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">operateUser</span> <span class=\"operator\">=</span> (Integer) claims.get(<span class=\"string\">&quot;id&quot;</span>);<span class=\"comment\">//Claims類為Object,所以要強轉</span></span><br><span class=\"line\">        <span class=\"comment\">//操作時間</span></span><br><span class=\"line\">        <span class=\"type\">LocalDateTime</span> <span class=\"variable\">operateTime</span> <span class=\"operator\">=</span> LocalDateTime.now();</span><br><span class=\"line\">        <span class=\"comment\">//操作類名</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">className</span> <span class=\"operator\">=</span> joinPoint.getTarget().getClass().getName();</span><br><span class=\"line\">        <span class=\"comment\">//操作方法名</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">methodName</span> <span class=\"operator\">=</span> joinPoint.getSignature().getName();</span><br><span class=\"line\">        <span class=\"comment\">//操作方法參數</span></span><br><span class=\"line\">        Object[] args = joinPoint.getArgs();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">methodParams</span> <span class=\"operator\">=</span> Arrays.toString(args);</span><br><span class=\"line\">        <span class=\"comment\">//開始調用原始方法時間</span></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">begin</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"comment\">//調用原始目標方法運行</span></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> joinPoint.proceed();</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"comment\">//方法返回值</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">returnValue</span> <span class=\"operator\">=</span> JSONObject.toJSONString(result);</span><br><span class=\"line\">        <span class=\"comment\">//操作時間</span></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">costTime</span> <span class=\"operator\">=</span> end - begin;</span><br><span class=\"line\">        <span class=\"comment\">//記錄操作日志</span></span><br><span class=\"line\">        <span class=\"type\">OperateLog</span> <span class=\"variable\">operateLog</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OperateLog</span>(<span class=\"literal\">null</span>,operateUser,operateTime,className,methodName,methodParams,returnValue,costTime);</span><br><span class=\"line\">        operateLogMapper.insert(operateLog);</span><br><span class=\"line\"></span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;AOP記錄日志:&#123;&#125;&quot;</span>, operateLog);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>然後在需要的 API 加上就完成了</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Log</span></span><br><span class=\"line\">   <span class=\"comment\">//修改書本出借狀態和新增用戶借書記錄</span></span><br><span class=\"line\">   <span class=\"meta\">@PutMapping</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> Result <span class=\"title function_\">updateStatus</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> UserBorrow userBorrow)</span>&#123;</span><br><span class=\"line\">       log.info(<span class=\"string\">&quot;借出書本資料:&#123;&#125;&quot;</span>,userBorrow);</span><br><span class=\"line\">       bookService.updateStatus(userBorrow);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> Result.success();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>3️⃣我對 AOP 的理解是，它是以動態代理的方式去增強功能，表達式則是要加強的方法 (切點), 切入方法則是什麼時候做加強，是代碼執行前還是後，要理解源碼還是蠻複雜的，幸好能理解並使用不難～</p>\n<img data-src=\"https://usagif.com/wp-content/uploads/gifs/thanks-for-watching-9.gif\" class=\"abc\" width=\"600\" height=\"350\">",
            "tags": [
                "SpringMVC",
                "Pinia",
                "Vue2",
                "SpringBoot"
            ]
        },
        {
            "id": "https://superrjohn.github.io/John/2023/10/26/java/rabbitmq/rabbitmq",
            "url": "https://superrjohn.github.io/John/2023/10/26/java/rabbitmq/rabbitmq",
            "title": "Hello RabbitMq!",
            "date_published": "2023-10-26T14:18:33.325Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": [
                "RabbitMQ"
            ]
        },
        {
            "id": "https://superrjohn.github.io/John/2023/10/26/java/radis/radis",
            "url": "https://superrjohn.github.io/John/2023/10/26/java/radis/radis",
            "title": "Hello Radis!",
            "date_published": "2023-10-26T14:15:36.096Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": [
                "Radis"
            ]
        },
        {
            "id": "https://superrjohn.github.io/John/2023/10/22/hexo/Hexo",
            "url": "https://superrjohn.github.io/John/2023/10/22/hexo/Hexo",
            "title": "Hexo快速部署!",
            "date_published": "2023-10-22T08:24:11.599Z",
            "content_html": "<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>想部署一個自己的網站的原因，是因為某天在學 JAVA 項目時遇到很多 BUG, 就滑評論區找解決方案，然後被我找到一個大神，他把學習過程都放在自己的網站上，我覺得很酷，所以也打算效仿～那這篇主要是記錄一下部署過程踩坑的地方。</p>\n<h2 id=\"hexo部署\"><a class=\"markdownIt-Anchor\" href=\"#hexo部署\">#</a> Hexo 部署</h2>\n<p>1. 首先照著官方文檔安裝<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3Mv\"> Hexo</span> 和所需應用<br>\n 2. 其實官方文檔說明得很清楚，照著它說的部署基本沒有問題，本人是利用 Hexo 和 Github Pages 部署的。<br>\n3. 要注意的點是 source 文件會存放所以文章，所以它是網域的父路由，如果你想新增子路由，需要創一個文件夾，你為文件夾起的名字就是 path 了，然後再創一個 index.md 的檔案就完成啦～</p>\n<h2 id=\"主題配置-首页精选与分类翻转块\"><a class=\"markdownIt-Anchor\" href=\"#主題配置-首页精选与分类翻转块\">#</a> 主題配置 - 首页精选与分类翻转块</h2>\n<p>1. 本站主題是用 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmthaXRha3UueHl6L2d1aWRlLw==\">hexo-theme-shokaX</span> 請先下載，我會以這個主題的配置做記錄，不過基本上主題的使用都大同小異。<br>\n2 修改網站配置，在 Hexo 根目錄 _config.yml 中找到 category_map，配置每個分類對應的英文映射。<br>\nHexo 對於路徑中的特殊字元～``!@#$%^&amp;*()-_+={}|;:&quot;'&lt;&gt;,.? 以及空格，這些全部會被替換成 -</p>\n<blockquote><p>category_map:<br>\n 计算机科学: computer-science<br>\nC++: cpp<br>\n 郑莉老师 C++ 语言程序设计: course-1<br>\nLinux: Linux</p>\n</blockquote>\n<p>2.1、設定文章所屬的目錄</p>\n<p>source/_posts 為上傳文章的儲存目錄 。</p>\n<p>categories 的設定要根據上面的 category_map 以及文件順序順序書寫。 例如，某文件位於電腦科學 / C++/ 鄭莉老師 C++ 語言程式設計目錄下，根據上面的映射，在儲存檔案的_posts 檔案路徑下就位於 source/_posts 下 computer-science/cpp/course-1 目錄 下。</p>\n<figure class=\"highlight plaintext\"><figcaption><span>yml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">categories:</span><br><span class=\"line\">  - [计算机科学, C++, 郑莉老师C++语言程序设计]</span><br></pre></td></tr></table></figure>\n<img data-src=\"/John/img/hexo/categories.png\" class=\"abc\" width=\"350\" height=\"300\">\n<p>以上是官方文檔內容</p>\n<h2 id=\"主題配置-評論區\"><a class=\"markdownIt-Anchor\" href=\"#主題配置-評論區\">#</a> 主題配置 - 評論區</h2>\n<p>照著官方文檔配置評論系統最後結果會是 not initialized, 原因我也找了很久，終於解決了～所以記錄下<br>\n 1. 首先在配置根目录下 _config.shokaX.yml 的评论系统：</p>\n<figure class=\"highlight plaintext\"><figcaption><span>YML</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">waline:</span><br><span class=\"line\">  enable: true # 是否启用</span><br><span class=\"line\">  serverURL: &quot;https://domains.zeabur.app&quot; # 将此链接换成您自己的Domains,主页链接后面不能加 /  会出错</span><br></pre></td></tr></table></figure>\n<p>2. 官方推薦用<span class=\"exturl\" data-url=\"aHR0cHM6Ly93YWxpbmUuanMub3JnL2d1aWRlL2RlcGxveS96ZWFidXIuaHRtbA==\"> Zeabur</span> 服务端部署，按照它的步驟後做測試時會發現得到的是 not initialized, 為什麼呢？<br>\n 原因是 zeabur 只是服務器，而官方默認是用 LeanCloud 為數據庫，所以在<span class=\"exturl\" data-url=\"aHR0cHM6Ly93YWxpbmUuanMub3JnL2d1aWRlL2dldC1zdGFydGVkLw==\"> Waline</span> 快速上手中有說明要註冊 LeanCloud 帳號才可以，表照快速上手的教學，得到 APP ID,APP Key 和 Master Key, 然後進入 zeabur-starter 中的 Variables 進行配置，配置環境變量 LEAN_ID, LEAN_KEY 和 LEAN_MASTER_KEY, 值是註冊 LeanCloud 得到的值像這樣配～</p>\n<img data-src=\"/John/img/hexo/zeabur-starter-variable.png\" class=\"abc\" width=\"650\" height=\"450\">\n<p>2.1 一開始覺得網站一定要有個評論區吧～所以就配置了一個，不過配置後發現，zeabur 只有 7 天免費，過期前可以延續 7 天，所以某天發現評論區不見了，沒錯是我太懶沒有延續，當然解決方法可以部署在自己的 docker 或云服務。<br>\n2.2<span class=\"exturl\" data-url=\"aHR0cHM6Ly93YWxpbmUuanMub3JnL2d1aWRlL2dldC1zdGFydGVkLw==\">Zeabur 快速上手</span>，因為想設個評論發現了這個評論系統，覺得它蠻不錯的，還多功能的像是留言後會獲得通知，用戶安全性和留言限制等等，感覺有空可以再深入研究研究。</p>\n<img data-src=\"https://i.makeagif.com/media/9-15-2015/bQkqor.gif\" class=\"abc\" width=\"600\" height=\"350\">",
            "tags": [
                "hexo"
            ]
        }
    ]
}