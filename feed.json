{
    "version": "https://jsonfeed.org/version/1",
    "title": "一切都是過程",
    "description": "",
    "home_page_url": "https://superrjohn.github.io/John",
    "items": [
        {
            "id": "https://superrjohn.github.io/John/2024/03/13/code/code2",
            "url": "https://superrjohn.github.io/John/2024/03/13/code/code2",
            "title": "歸併排序",
            "date_published": "2024-03-13T14:27:40.316Z",
            "content_html": "<h1 id=\"心得\"><a class=\"markdownIt-Anchor\" href=\"#心得\">#</a> 心得</h1>\n<p>🔴歸併排序分左組和右組排序，左組內容排好序，右組內容排好序，左右組設一個指針，指針只會向前，所以歸併排序可以做到 &quot;不回退&quot;。</p>\n<p>🔴通常題目要求在數組左邊或右邊搞事實，就能夠用歸併排序。</p>\n<p>1.<img data-src=\"/John/img/code/code2/1.png\" class=\"abc\"></p>\n<p>2.<img data-src=\"/John/img/code/code2/2.png\" class=\"abc\"></p>\n<p>3.<img data-src=\"/John/img/code/code2/3.png\" class=\"abc\"></p>\n<p>4.<img data-src=\"/John/img/code/code2/4.png\" class=\"abc\"></p>\n<p>5.<img data-src=\"/John/img/code/code2/5.png\" class=\"abc\"></p>\n<p>6.<img data-src=\"/John/img/code/code2/6.png\" class=\"abc\"></p>\n<p>7.<img data-src=\"/John/img/code/code2/7.png\" class=\"abc\"></p>\n<p>8.<img data-src=\"/John/img/code/code2/8.png\" class=\"abc\"></p>\n<p>9.<img data-src=\"/John/img/code/code2/9.png\" class=\"abc\"></p>\n<img data-src=\"https://i.makeagif.com/media/9-15-2015/bQkqor.gif\" class=\"abc\" width=\"600\" height=\"350\">",
            "tags": [
                "code"
            ]
        },
        {
            "id": "https://superrjohn.github.io/John/2024/01/16/code/code1",
            "url": "https://superrjohn.github.io/John/2024/01/16/code/code1",
            "title": "遞迴刷題",
            "date_published": "2024-01-16T10:58:45.130Z",
            "content_html": "<h1 id=\"心得\"><a class=\"markdownIt-Anchor\" href=\"#心得\">#</a> 心得</h1>\n<p>🔴剛學的一些心得，自學選對教材很重要，因為算法很抽象，好的老師能幫你具體化去解題。</p>\n<p>🔴遞歸心得：在還不熟練的時候，不要坐著想遞歸過程，因為只會讓你更想不明白。所以想不明白最好用簡單例子畫圖或者把遞歸過程的寫出來，清清楚楚看到具體流程，才能讓自己更好了解遞歸。<br>\n當熟練後，不用再關心微觀過程，只關心整體過程即可，即退出的條件、下游的參數。</p>\n<p>1.<img data-src=\"/John/img/code/code1/1.png\" class=\"abc\"></p>\n<p>2.<img data-src=\"/John/img/code/code1/2.png\" class=\"abc\"></p>\n<p>3.<img data-src=\"/John/img/code/code1/3.png\" class=\"abc\"></p>\n<p>4.<img data-src=\"/John/img/code/code1/4.png\" class=\"abc\"></p>\n<p>5.<img data-src=\"/John/img/code/code1/5.png\" class=\"abc\"></p>\n<p>6.<img data-src=\"/John/img/code/code1/6.png\" class=\"abc\"></p>\n<img data-src=\"https://usagif.com/wp-content/uploads/gifs/thanks-for-watching-9.gif\" class=\"abc\" width=\"600\" height=\"350\">",
            "tags": [
                "code"
            ]
        },
        {
            "id": "https://superrjohn.github.io/John/2024/01/16/java/hexo/Hexo",
            "url": "https://superrjohn.github.io/John/2024/01/16/java/hexo/Hexo",
            "title": "Hexo快速部署!",
            "date_published": "2024-01-16T10:54:22.514Z",
            "content_html": "<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>想部署一個自己的網站的原因，是因為某天在學 JAVA 項目時遇到很多 BUG, 就滑評論區找解決方案，然後被我找到一個大神，他把學習過程都放在自己的網站上，我覺得很酷，所以也打算效仿～那這篇主要是記錄一下部署過程踩坑的地方。</p>\n<h2 id=\"hexo部署\"><a class=\"markdownIt-Anchor\" href=\"#hexo部署\">#</a> Hexo 部署</h2>\n<p>1. 首先照著官方文檔安裝<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3Mv\"> Hexo</span> 和所需應用<br>\n 2. 其實官方文檔說明得很清楚，照著它說的部署基本沒有問題，本人是利用 Hexo 和 Github Pages 部署的。<br>\n3. 要注意的點是 source 文件會存放所以文章，所以它是網域的父路由，如果你想新增子路由，需要創一個文件夾，你為文件夾起的名字就是 path 了，然後再創一個 index.md 的檔案就完成啦～</p>\n<h2 id=\"主題配置-首页精选与分类翻转块\"><a class=\"markdownIt-Anchor\" href=\"#主題配置-首页精选与分类翻转块\">#</a> 主題配置 - 首页精选与分类翻转块</h2>\n<p>1. 本站主題是用 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmthaXRha3UueHl6L2d1aWRlLw==\">hexo-theme-shokaX</span> 請先下載，我會以這個主題的配置做記錄，不過基本上主題的使用都大同小異。<br>\n2 修改網站配置，在 Hexo 根目錄 _config.yml 中找到 category_map，配置每個分類對應的英文映射。<br>\nHexo 對於路徑中的特殊字元～``!@#$%^&amp;*()-_+={}|;:&quot;'&lt;&gt;,.? 以及空格，這些全部會被替換成 -</p>\n<blockquote><p>category_map:<br>\n 计算机科学: computer-science<br>\nC++: cpp<br>\n 郑莉老师 C++ 语言程序设计: course-1<br>\nLinux: Linux</p>\n</blockquote>\n<p>2.1、設定文章所屬的目錄</p>\n<p>source/_posts 為上傳文章的儲存目錄 。</p>\n<p>categories 的設定要根據上面的 category_map 以及文件順序順序書寫。 例如，某文件位於電腦科學 / C++/ 鄭莉老師 C++ 語言程式設計目錄下，根據上面的映射，在儲存檔案的_posts 檔案路徑下就位於 source/_posts 下 computer-science/cpp/course-1 目錄 下。</p>\n<figure class=\"highlight plaintext\"><figcaption><span>yml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">categories:</span><br><span class=\"line\">  - [计算机科学, C++, 郑莉老师C++语言程序设计]</span><br></pre></td></tr></table></figure>\n<img data-src=\"/John/img/hexo/categories.png\" class=\"abc\" width=\"350\" height=\"300\">\n<p>以上是官方文檔內容</p>\n<h2 id=\"主題配置-評論區\"><a class=\"markdownIt-Anchor\" href=\"#主題配置-評論區\">#</a> 主題配置 - 評論區</h2>\n<p>照著官方文檔配置評論系統最後結果會是 not initialized, 原因我也找了很久，終於解決了～所以記錄下<br>\n 1. 首先在配置根目录下 _config.shokaX.yml 的评论系统：</p>\n<figure class=\"highlight plaintext\"><figcaption><span>YML</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">waline:</span><br><span class=\"line\">  enable: true # 是否启用</span><br><span class=\"line\">  serverURL: &quot;https://domains.zeabur.app&quot; # 将此链接换成您自己的Domains,主页链接后面不能加 /  会出错</span><br></pre></td></tr></table></figure>\n<p>2. 官方推薦用<span class=\"exturl\" data-url=\"aHR0cHM6Ly93YWxpbmUuanMub3JnL2d1aWRlL2RlcGxveS96ZWFidXIuaHRtbA==\"> Zeabur</span> 服务端部署，按照它的步驟後做測試時會發現得到的是 not initialized, 為什麼呢？<br>\n 原因是 zeabur 只是服務器，而官方默認是用 LeanCloud 為數據庫，所以在<span class=\"exturl\" data-url=\"aHR0cHM6Ly93YWxpbmUuanMub3JnL2d1aWRlL2dldC1zdGFydGVkLw==\"> Waline</span> 快速上手中有說明要註冊 LeanCloud 帳號才可以，表照快速上手的教學，得到 APP ID,APP Key 和 Master Key, 然後進入 zeabur-starter 中的 Variables 進行配置，配置環境變量 LEAN_ID, LEAN_KEY 和 LEAN_MASTER_KEY, 值是註冊 LeanCloud 得到的值像這樣配～</p>\n<img data-src=\"/John/img/hexo/zeabur-starter-variable.png\" class=\"abc\" width=\"650\" height=\"450\">\n<p>2.1 一開始覺得網站一定要有個評論區吧～所以就配置了一個，不過配置後發現，zeabur 只有 7 天免費，過期前可以延續 7 天，所以某天發現評論區不見了，沒錯是我太懶沒有延續，當然解決方法可以部署在自己的 docker 或云服務。<br>\n2.2<span class=\"exturl\" data-url=\"aHR0cHM6Ly93YWxpbmUuanMub3JnL2d1aWRlL2dldC1zdGFydGVkLw==\">Zeabur 快速上手</span>，因為想設個評論發現了這個評論系統，覺得它蠻不錯的，還多功能的像是留言後會獲得通知，用戶安全性和留言限制等等，感覺有空可以再深入研究研究。</p>\n<img data-src=\"https://i.makeagif.com/media/9-15-2015/bQkqor.gif\" class=\"abc\" width=\"600\" height=\"350\">",
            "tags": [
                "hexo"
            ]
        },
        {
            "id": "https://superrjohn.github.io/John/2023/11/30/java/docker/docker",
            "url": "https://superrjohn.github.io/John/2023/11/30/java/docker/docker",
            "title": "Docker",
            "date_published": "2023-11-30T10:25:29.553Z",
            "content_html": "<p>前言：感謝黑馬提供的課程:<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUhQNDExODc5Ny8/cD0zJmFtcDtzcG1faWRfZnJvbT1wYWdlRHJpdmVyJmFtcDt2ZF9zb3VyY2U9MDlkNjZhMWYwNzI1YzU0NTkzNDg5MmYwOGVmNmNiYTU=\">docker 教學</span></p>\n<h1 id=\"安裝docker所需的前置\"><a class=\"markdownIt-Anchor\" href=\"#安裝docker所需的前置\">#</a> 安裝 Docker 所需的前置</h1>\n<h2 id=\"准备linux环境\"><a class=\"markdownIt-Anchor\" href=\"#准备linux环境\">#</a> 准备 Linux 环境</h2>\n<p>首先，我们要准备一个 Linux 的系统，成本最低的方式就是在本地安装一台虚拟机。为了统一学习环境，不管是使用 MacOS 还是 Windows 系统的同学，都建议安装一台虚拟机。<br>\nwindows 采用 VMware，Mac 则采用 Fusion,<span class=\"rainbow\"> 安裝前置請參考黑馬課程中的文檔</span>。</p>\n<p>1️⃣安装 VMware<br>\n2️⃣创建虚拟机，Centos7 是比较常用的一个 Linux 发行版本，首先要下载一个 Centos7 的 iso 文件，下載 mini 版即可。<br>\n3️⃣安装 Centos7<br>\n4️⃣SSH 客户端，使用 Finshell 或其他也可</p>\n<h3 id=\"安裝docker\"><a class=\"markdownIt-Anchor\" href=\"#安裝docker\">#</a> 安裝 docker</h3>\n<p>1. 卸载旧版<br>\n首先如果系统中已经存在旧的 Docker，则先卸载：</p>\n<figure class=\"highlight shell\"><figcaption><span>shell</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum remove docker \\</span><br><span class=\"line\">    docker-client \\</span><br><span class=\"line\">    docker-client-latest \\</span><br><span class=\"line\">    docker-common \\</span><br><span class=\"line\">    docker-latest \\</span><br><span class=\"line\">    docker-latest-logrotate \\</span><br><span class=\"line\">    docker-logrotate \\</span><br><span class=\"line\">    docker-engine</span><br></pre></td></tr></table></figure>\n<p>2. 配置 Docker 的 yum 库<br>\n首先要安装一个 yum 工具</p>\n<figure class=\"highlight shell\"><figcaption><span>shell</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y yum-utils</span><br></pre></td></tr></table></figure>\n<p>安装成功后，执行命令，配置 Docker 的 yum 源：</p>\n<figure class=\"highlight bash\"><figcaption><span>bash</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n<p>3. 安装 Docker<br>\n 最后，执行命令，安装 Docker</p>\n<figure class=\"highlight bash\"><figcaption><span>bash</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure>\n<p>4. 启动和校验</p>\n<figure class=\"highlight bash\"><figcaption><span>bash</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动Docker</span></span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止Docker</span></span><br><span class=\"line\">systemctl stop docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\">systemctl restart docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置开机自启</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行docker ps命令，如果不报错，说明安装启动成功</span></span><br><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure>\n<p>5. 配置镜像加速 (將 yum 源改為其他，例如阿里云，騰信云等)</p>\n<h1 id=\"快速入門\"><a class=\"markdownIt-Anchor\" href=\"#快速入門\">#</a> 快速入門</h1>\n<h2 id=\"部署mysql\"><a class=\"markdownIt-Anchor\" href=\"#部署mysql\">#</a> 部署 MySQL</h2>\n<p>首先，我们利用 Docker 来安装一个 MySQL 软件，大家可以对比一下之前传统的安装方式，看看哪个效率更高一些。<br>\n如果是利用传统方式部署 MySQL，大概的步骤有：</p>\n<ul>\n<li>搜索并下载 MySQL 安装包</li>\n<li>上传至 Linux 环境</li>\n<li>编译和配置环境</li>\n<li>安装</li>\n</ul>\n<p>而使用 Docker 安装，仅仅需要一步即可，在命令行输入下面的命令（建议采用 CV 大法）：</p>\n<figure class=\"highlight shell\"><figcaption><span>shell</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  --name mysql \\</span><br><span class=\"line\">  -p 3306:3306 \\</span><br><span class=\"line\">  -e TZ=Asia/Shanghai \\</span><br><span class=\"line\">  -e MYSQL_ROOT_PASSWORD=123 \\</span><br><span class=\"line\">  mysql</span><br></pre></td></tr></table></figure>\n<p>运行效果如图：</p>\n<img data-src=\"/John/img/java/docker/1.png\" class=\"abc\">\n<p>MySQL 安装完毕！通过任意客户端工具即可连接到 MySQL.</p>\n<p><span class=\"rainbow\">重點 1:</span>docker 安裝好後，以下載 MYSQL 為例，安裝好後不用進行各種環境配置，這是為什麼？是因為 docker 會自動下載 MYSQL 的鏡像，鏡像包括應用本身、運行所需的環境、配置、系統函數庫，而且 docker 會在運行鏡像時創建一個隔離環境，免受其他進程的影響，稱為容器，所以 docker 中安裝不同的應用，不會因為應用本身所需的環境配置不同，發生應用和應用之間的衝突，因為應用是隔離環境的。</p>\n<p><span class=\"rainbow\">重點 2:</span>docker 的應用源在哪裡搜尋和下載？在鏡像倉庫，存儲和管理鏡像的平台，docker 官方維護了一個公共倉庫:docker hub, 不過事實上上載到平台的應用基本上都是軟件公司自己上載到公共倉庫。</p>\n<img data-src=\"/John/img/java/docker/2.png\" class=\"abc\">\n<h1 id=\"命令解讀\"><a class=\"markdownIt-Anchor\" href=\"#命令解讀\">#</a> 命令解讀</h1>\n<figure class=\"highlight shell\"><figcaption><span>shell</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  --name mysql \\</span><br><span class=\"line\">  -p 3306:3306 \\</span><br><span class=\"line\">  -e TZ=Asia/Shanghai \\</span><br><span class=\"line\">  -e MYSQL_ROOT_PASSWORD=123 \\</span><br><span class=\"line\">  mysql</span><br></pre></td></tr></table></figure>\n<p><span class=\"rainbow\">命令解讀:</span>docker run -d,docker 是前綴，run 是其中一個子命令，docker run 是創建并運行一個容器，-d 是讓容器在後台運行<br>\n–name mysql 是給容器起一個名字，必須唯一<br>\n - p 3306:3306, 是設置端口映射，第一個 3306 是映射到虛擬機 (宿者機) 的端口，第二個 3306 是容器的端口，因為 docker 內的應用是隔離環境的，別人沒辦法訪問，但我們可以讓容器的端口映射到虛擬機的端口，然後我們通過訪問虛擬機加映射端口就能訪問到容器。<br>\n-e KEY=VALUE 是設置環境變量，這個要查看 docker hub 的應用中，作者讓我們可以配置什麼。-e TZ=Asia/Shangha 是上海時區，-e MYSQL_ROOT_PASSWORD=123 是 MYSQL 的密碼設置為 123<br>\nmysql 是指定運行的鏡像名字，指定 docker 要下載誰，搜尋誰下載誰就在這指定，如果想指定 mysql 的版本就需要這樣寫 mysql:5.7, 沒有指定版本默認安裝最新版</p>\n<h2 id=\"dokcer常見命令\"><a class=\"markdownIt-Anchor\" href=\"#dokcer常見命令\">#</a> Dokcer 常見命令</h2>\n<p>不用背命令，用到再查即可</p>\n<img data-src=\"/John/img/java/docker/3.png\" class=\"abc\">\n<h2 id=\"用nginx演示\"><a class=\"markdownIt-Anchor\" href=\"#用nginx演示\">#</a> 用 nginx 演示</h2>\n<figure class=\"highlight shell\"><figcaption><span>shell</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第1步，去DockerHub查看nginx镜像仓库及相关信息</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第2步，拉取Nginx镜像</span></span><br><span class=\"line\">docker pull nginx</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第3步，查看镜像</span></span><br><span class=\"line\">docker images</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">结果如下：</span></span><br><span class=\"line\">REPOSITORY   TAG       IMAGE ID       CREATED         SIZE</span><br><span class=\"line\">nginx        latest    605c77e624dd   16 months ago   141MB</span><br><span class=\"line\">mysql        latest    3218b38490ce   17 months ago   516MB</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第4步，创建并允许Nginx容器</span></span><br><span class=\"line\">docker run -d --name nginx -p 80:80 nginx</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第5步，查看运行中容器</span></span><br><span class=\"line\">docker ps</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">也可以加格式化方式访问，格式会更加清爽</span></span><br><span class=\"line\">docker ps --format &quot;table &#123;&#123;.ID&#125;&#125;\\t&#123;&#123;.Image&#125;&#125;\\t&#123;&#123;.Ports&#125;&#125;\\t&#123;&#123;.Status&#125;&#125;\\t&#123;&#123;.Names&#125;&#125;&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第6步，访问网页，地址：http://虚拟机地址</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第7步，停止容器</span></span><br><span class=\"line\">docker stop nginx</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第8步，查看所有容器</span></span><br><span class=\"line\">docker ps -a --format &quot;table &#123;&#123;.ID&#125;&#125;\\t&#123;&#123;.Image&#125;&#125;\\t&#123;&#123;.Ports&#125;&#125;\\t&#123;&#123;.Status&#125;&#125;\\t&#123;&#123;.Names&#125;&#125;&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第9步，再次启动nginx容器</span></span><br><span class=\"line\">docker start nginx</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第10步，再次查看容器</span></span><br><span class=\"line\">docker ps --format &quot;table &#123;&#123;.ID&#125;&#125;\\t&#123;&#123;.Image&#125;&#125;\\t&#123;&#123;.Ports&#125;&#125;\\t&#123;&#123;.Status&#125;&#125;\\t&#123;&#123;.Names&#125;&#125;&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第11步，查看容器详细信息</span></span><br><span class=\"line\">docker inspect nginx</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第12步，进入容器,查看容器内目录,-it是可輸入的總端,因為要指令跟容器交互,進入容器後<span class=\"built_in\">exit</span>退出</span></span><br><span class=\"line\">docker exec -it nginx bash</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">或者，可以进入MySQL</span></span><br><span class=\"line\">docker exec -it mysql mysql -uroot -p</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第13步，删除容器</span></span><br><span class=\"line\">docker rm nginx</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">发现无法删除，因为容器运行中，强制删除容器</span></span><br><span class=\"line\">docker rm -f nginx</span><br></pre></td></tr></table></figure>\n<h2 id=\"起別名\"><a class=\"markdownIt-Anchor\" href=\"#起別名\">#</a> 起別名</h2>\n<p>因為有些見用的命令很長，所以我們可以為命令起別名，在 docker 根下進入 vi ~/.bashrc 文件，文件內容有一些默認的別名，像是 alias rm=‘rm -i’,rm 是要起的別名，= 號右邊是原本的命令。</p>\n<p>因為原本 docker ps 返回的內容有些不需要，所以我們用 format 命令指定返回內容，現在我們為這個命令起別名，方便之後工作。</p>\n<figure class=\"highlight shell\"><figcaption><span>shell</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias dps=&#x27;docker ps --format &quot;table &#123;&#123;.ID&#125;&#125;\\t&#123;&#123;.Image&#125;&#125;\\t&#123;&#123;.Ports&#125;&#125;\\t&#123;&#123;.Status&#125;&#125;\\t&#123;&#123;.Names&#125;&#125;&quot;&#x27;</span><br><span class=\"line\">alias dis=&#x27;docker images&#x27;</span><br></pre></td></tr></table></figure>\n<p>添加後退出保存，添加後需要再輸入 source ~/.bashrc, 找到這文件才會起效</p>\n<h1 id=\"數據卷\"><a class=\"markdownIt-Anchor\" href=\"#數據卷\">#</a> 數據卷</h1>\n<h2 id=\"以nginx為例\"><a class=\"markdownIt-Anchor\" href=\"#以nginx為例\">#</a> 以 nginx 為例</h2>\n<p>修改 nginx 容器中的 html 目錄下的 index 文件，並將靜態資源部署到 nginx, 但發現用 vi 進入不到容器，因為鏡像只配置能運行的環境，所以我們要修改容器內的東西很困難，所以我們使用數據卷。</p>\n<p>數據卷是一個虛擬目錄，是容器內目錄與宿主機目錄之間映射的橋粱，利用 docker 命令創建數據卷，就會在宿主機文系統創建對應文件，然後讓容器與宿主機目錄掛載，我們修改宿主機文件的內容會映射到容器中。</p>\n<img data-src=\"/John/img/java/docker/4.png\" class=\"abc\">\n<p>提示：在執行 docker run 命令時，使用 - v 數據卷：容器目錄可以完成數據卷掛載，當創建容器時，如果掛載了數據卷且數據卷不存在，會自動創建數據卷</p>\n<img data-src=\"/John/img/java/docker/5.png\" class=\"abc\">\n<figure class=\"highlight shell\"><figcaption><span>shell</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm -f nginx</span><br><span class=\"line\">docker run -d --name nginx -p 80:80 -v html:/usr/share/nginx/html nginx</span><br></pre></td></tr></table></figure>\n<p>再輸入 docker volume ls 查看有沒有創成功數據卷，可以再查看數據卷位置 docker volume inspect html, 如下圖數據卷映射流程。</p>\n<img data-src=\"/John/img/java/docker/6.png\" class=\"abc\">\n<p>現在我們可以修改數據卷了，在 FinalShell 中找到數據卷位置，修改當中的 nginx 的 index 文件 title</p>\n<img data-src=\"/John/img/java/docker/7.png\" class=\"abc\">\n<h2 id=\"容器創建後再掛載數據卷\"><a class=\"markdownIt-Anchor\" href=\"#容器創建後再掛載數據卷\">#</a> 容器創建後再掛載數據卷</h2>\n<p>docker inspect nginx 命令，可以查看 nginx 容器詳細信息，其中 Mounts 可以看到數據卷的信息。</p>\n<img data-src=\"/John/img/java/docker/8.png\" class=\"abc\">\n<p>以下再查看 MYSQL 容器詳細信息，發現在我們沒有為容器創建數據卷情況下，docker 為我們自動生成了<br>\n這種數據卷是匿名卷，名字會自動生成，這會有些問題存在，把容器刪了，但其實匿名卷還在，所以再創一個容器就會把舊的匿名卷覆蓋，可以把匿名卷 copy, 但不實際</p>\n<img data-src=\"/John/img/java/docker/9.png\" class=\"abc\">\n<p>現在我們要在 root 建創 mysql 目錄並進行掛載，先 mkdir mysql 創建 mysql 目錄，cd mysql,mkdir data,mkdir conf,mkdir init, 然後把課程資源對應 mysql 的文件放進去，<br>\n 然後刪除並重新建立 mysql 容器，並完成本機目錄掛載:<br>\n・掛載 /root/mysql/data 到容器內的 /var/lib/mysql 目錄<br>\n・掛載 /root/mysql/init 到容器內的 /docker-entrypoint-initdb.d 目錄 (初始化的 SQL 腳本目錄)<br>\n・掛載 /root/mysql/conf 到容器內的 /etc/mysql/conf.d 目錄 (這個是 MySQL 設定檔目錄)</p>\n<p>本地掛載注意:</p>\n<img data-src=\"/John/img/java/docker/10.png\" class=\"abc\">\n<figure class=\"highlight shell\"><figcaption><span>shell</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">--name mysql \\</span><br><span class=\"line\">-p 3306:3306 \\</span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=123 \\</span><br><span class=\"line\">-v /root......[自行輸入] \\</span><br><span class=\"line\">-v /root......[自行輸入] \\</span><br><span class=\"line\">-v /root......[自行輸入] \\</span><br><span class=\"line\">mysql</span><br></pre></td></tr></table></figure>\n<p>這樣就可以成功掛載，這種方法掛載，以後做升級需要刪了 mysql, 只要 root 中的 mysql 目錄還在，就能重新掛載。</p>\n<h1 id=\"自定義鏡像\"><a class=\"markdownIt-Anchor\" href=\"#自定義鏡像\">#</a> 自定義鏡像</h1>\n<h2 id=\"dockerfile\"><a class=\"markdownIt-Anchor\" href=\"#dockerfile\">#</a> Dockerfile</h2>\n<img data-src=\"/John/img/java/docker/11.png\" class=\"abc\">\n<p>1. 基礎鏡像是應用所依賴的文件，而這個文件是各文件都互通的，像是已安裝 mysql 後，再安裝 redis, 會發現基礎鏡像已存在。<br>\n2. 層是應用的操作，每次操作都伯形成新的一層<br>\n 3. 入口是程式啟動的腳本和參數</p>\n<img data-src=\"/John/img/java/docker/12.png\" class=\"abc\">\n<p>我們可以用 Dockerfile 來簡化鏡像構建，也可以直表接基於 JDK 為基礎鏡像，省略前面的步驟</p>\n<img data-src=\"/John/img/java/docker/13.png\" class=\"abc\">\n<p>找到課程資料 demo 文件中關於 dockerfile 的文件，和在 images 文件中的 jdk.tar 包上傳，在 root 中加入 jdk.tar 文件，如何把 tar 包變成自己的鏡像，要輸入指令 docker load -i jdk.tar, 其中 - i 是插入的意思，插入後用 dis 查看 openjdk 存在不，然後在 root 中加入 demo 文件，內容把課程資料的 dockerfile 放入，放入後同樣要用 docker build -t docker-demo ., 因為目前在 /root/demo/ 文件中所以用。即可不用指定文件名，它會找到 Dockerfile 文件。</p>\n<p>之後我們再用 dis 查看，發現 docker-demo 存在，說明構建成功，docker run -d --name dd -p 8090:8090 docker-demo:1.0, 現在把容器運行後就可以訪問了</p>\n<h1 id=\"網絡\"><a class=\"markdownIt-Anchor\" href=\"#網絡\">#</a> 網絡</h1>\n<p>上节课我们创建了一个 Java 项目的容器，而 Java 项目往往需要访问其它各种中间件，例如 MySQL、Redis 等。现在，我们的容器之间能否互相访问呢？我们来测试一下</p>\n<p>首先，我们查看下 MySQL 容器的详细信息，重点关注其中的网络 IP 地址：</p>\n<figure class=\"highlight shell\"><figcaption><span>shell</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1.用基本命令，寻找Networks.bridge.IPAddress属性</span></span><br><span class=\"line\">docker inspect mysql</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">也可以使用format过滤结果</span></span><br><span class=\"line\">docker inspect --format=&#x27;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;println .IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27; mysql</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">得到IP地址如下：</span></span><br><span class=\"line\">172.17.0.2</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2.然后通过命令进入<span class=\"built_in\">dd</span>容器</span></span><br><span class=\"line\">docker exec -it dd bash</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">3.在容器内，通过ping命令测试网络</span></span><br><span class=\"line\">ping 172.17.0.2</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">结果</span></span><br><span class=\"line\">PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.</span><br><span class=\"line\">64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.053 ms</span><br><span class=\"line\">64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.059 ms</span><br><span class=\"line\">64 bytes from 172.17.0.2: icmp_seq=3 ttl=64 time=0.058 ms</span><br></pre></td></tr></table></figure>\n<p>发现可以互联，没有问题。</p>\n<p>但是，容器的网络 IP 其实是一个虚拟的 IP，其值并不固定与某一个容器绑定，如果我们在开发时写死某个 IP，而在部署时很可能 MySQL 容器的 IP 会发生变化，连接会失败。</p>\n<p>教学演示：自定义网络</p>\n<figure class=\"highlight shell\"><figcaption><span>shell</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1.首先通过命令创建一个网络</span></span><br><span class=\"line\">docker network create hmall</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2.然后查看网络</span></span><br><span class=\"line\">docker network ls</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">结果：</span></span><br><span class=\"line\">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class=\"line\">639bc44d0a87   bridge    bridge    local</span><br><span class=\"line\">403f16ec62a2   hmall     bridge    local</span><br><span class=\"line\">0dc0f72a0fbb   host      host      local</span><br><span class=\"line\">cd8d3e8df47b   none      null      local</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">其中，除了hmall以外，其它都是默认的网络</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">3.让<span class=\"built_in\">dd</span>和mysql都加入该网络，注意，在加入网络时可以通过--<span class=\"built_in\">alias</span>给容器起别名</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这样该网络内的其它容器可以用别名互相访问！</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">3.1.mysql容器，指定别名为db，另外每一个容器都有一个别名是容器名</span></span><br><span class=\"line\">docker network connect hmall mysql --alias db</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">3.2.db容器，也就是我们的java项目</span></span><br><span class=\"line\">docker network connect hmall dd</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">4.进入<span class=\"built_in\">dd</span>容器，尝试利用别名访问db</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">4.1.进入容器</span></span><br><span class=\"line\">docker exec -it dd bash</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">4.2.用db别名访问</span></span><br><span class=\"line\">ping db</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">结果</span></span><br><span class=\"line\">PING db (172.18.0.2) 56(84) bytes of data.</span><br><span class=\"line\">64 bytes from mysql.hmall (172.18.0.2): icmp_seq=1 ttl=64 time=0.070 ms</span><br><span class=\"line\">64 bytes from mysql.hmall (172.18.0.2): icmp_seq=2 ttl=64 time=0.056 ms</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">4.3.用容器名访问</span></span><br><span class=\"line\">ping mysql</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">结果：</span></span><br><span class=\"line\">PING mysql (172.18.0.2) 56(84) bytes of data.</span><br><span class=\"line\">64 bytes from mysql.hmall (172.18.0.2): icmp_seq=1 ttl=64 time=0.044 ms</span><br><span class=\"line\">64 bytes from mysql.hmall (172.18.0.2): icmp_seq=2 ttl=64 time=0.054 ms</span><br></pre></td></tr></table></figure>\n<p>OK，现在无需记住 IP 地址也可以实现容器互联了。</p>\n<p>总结：</p>\n<ul>\n<li>在自定义网络中，可以给容器起多个别名，默认的别名是容器名本身</li>\n<li>在同一个自定义网络中的容器，可以通过别名互相访问</li>\n</ul>\n<h1 id=\"手動部署java應用\"><a class=\"markdownIt-Anchor\" href=\"#手動部署java應用\">#</a> 手動部署 JAVA 應用</h1>\n<p>好了，我们已经熟悉了 Docker 的基本用法，接下来可以尝试部署项目了。<br>\n在课前资料中已经提供了一个黑马商城项目给大家，如图：</p>\n<p>项目说明：</p>\n<ul>\n<li>hmall：商城的后端代码</li>\n<li>hmall-portal：商城用户端的前端代码</li>\n<li>hmall-admin：商城管理端的前端代码</li>\n</ul>\n<p>部署的容器及端口说明：</p>\n<table>\n<thead>\n<tr>\n<th>项目</th>\n<th>容器名</th>\n<th>端口</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>hmall</td>\n<td>hmall</td>\n<td>8080</td>\n<td>黑马商城后端 API 入口</td>\n</tr>\n<tr>\n<td>hmall-portal</td>\n<td>nginx</td>\n<td>18080</td>\n<td>黑马商城用户端入口</td>\n</tr>\n<tr>\n<td>hmall-admin</td>\n<td></td>\n<td>18081</td>\n<td>黑马商城管理端入口</td>\n</tr>\n<tr>\n<td>mysql</td>\n<td>mysql</td>\n<td>3306</td>\n<td>数据库</td>\n</tr>\n</tbody>\n</table>\n<p>在正式部署前，我们先删除之前的 nginx、dd 两个容器：</p>\n<figure class=\"highlight shell\"><figcaption><span>shell</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm -f nginx dd</span><br></pre></td></tr></table></figure>\n<p>mysql 容器中已经准备好了商城的数据，所以就不再删除了。</p>\n<p>hmall 项目是一个 maven 聚合项目，使用 IDEA 打开 hmall 项目，查看项目结构如图</p>\n<p>我们要部署的就是其中的 hm-service，其中的配置文件采用了多环境的方式</p>\n<p>我们将项目打包，将 hm-service 目录下的 Dockerfile 和 hm-service/target 目录下的 hm-service.jar 一起上传到虚拟机的 root 目录</p>\n<p>部署项目：</p>\n<figure class=\"highlight shell\"><figcaption><span>shell</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1.构建项目镜像，不指定tag，则默认为latest</span></span><br><span class=\"line\">docker build -t hmall .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2.查看镜像</span></span><br><span class=\"line\">docker images</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">结果</span></span><br><span class=\"line\">REPOSITORY    TAG       IMAGE ID       CREATED          SIZE</span><br><span class=\"line\">hmall         latest    0bb07b2c34b9   43 seconds ago   362MB</span><br><span class=\"line\">docker-demo   1.0       49743484da68   24 hours ago     327MB</span><br><span class=\"line\">nginx         latest    605c77e624dd   16 months ago    141MB</span><br><span class=\"line\">mysql         latest    3218b38490ce   17 months ago    516MB</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">3.创建并运行容器，并通过--network将其加入hmall网络，这样才能通过容器名访问mysql</span></span><br><span class=\"line\">docker run -d --name hmall --network hmall -p 8080:8080 hmall</span><br></pre></td></tr></table></figure>\n<p>测试，通过浏览器访问：<span class=\"exturl\" data-url=\"aHR0cDovL3huLS02cXE1M3FuYjA2NWVramY2dTBhMmt6OjgwODAvc2VhcmNoL2xpc3Q=\">http:// 你的虚拟机地址：8080/search/list</span></p>\n<p>hmall-portal 和 hmall-admin 是前端代码，需要基于 nginx 部署。在课前资料中已经给大家提供了 nginx 的部署目录：</p>\n<p>我们现在要做的就是把整个 nginx 目录上传到虚拟机的 /root 目录下：</p>\n<p>然后创建 nginx 容器并完成两个挂载：</p>\n<ul>\n<li>把 /root/nginx/nginx.conf 挂载到 /etc/nginx/nginx.conf</li>\n<li>把 /root/nginx/html 挂载到 /usr/share/nginx/html</li>\n</ul>\n<p>由于需要让 nginx 同时代理 hmall-portal 和 hmall-admin 两套前端资源，因此我们需要暴露两个端口：</p>\n<ul>\n<li>18080：对应 hmall-portal</li>\n<li>18081：对应 hmall-admin<br>\n 命令如下：</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption><span>shell</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  --name nginx \\</span><br><span class=\"line\">  -p 18080:18080 \\</span><br><span class=\"line\">  -p 18081:18081 \\</span><br><span class=\"line\">  -v /root/nginx/html:/usr/share/nginx/html \\</span><br><span class=\"line\">  -v /root/nginx/nginx.conf:/etc/nginx/nginx.conf \\</span><br><span class=\"line\">  --network hmall \\</span><br><span class=\"line\">  nginx</span><br></pre></td></tr></table></figure>\n<p>测试，通过浏览器访问：<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1pcC0wcDNjbDM1ZWs1ZTZ1MGEya3o6MTgwODA=\">http:// 你的虚拟机 ip:18080</span></p>\n<h1 id=\"自動部署dockercompose\"><a class=\"markdownIt-Anchor\" href=\"#自動部署dockercompose\">#</a> 自動部署 DockerCompose</h1>\n<h1 id=\"dockercompose\"><a class=\"markdownIt-Anchor\" href=\"#dockercompose\">#</a> DockerCompose</h1>\n<p>大家可以看到，我们部署一个简单的 java 项目，其中包含 3 个容器：</p>\n<ul>\n<li>MySQL</li>\n<li>Nginx</li>\n<li>Java 项目<br>\n而稍微复杂的项目，其中还会有各种各样的其它中间件，需要部署的东西远不止 3 个。如果还像之前那样手动的逐一部署，就太麻烦了。</li>\n</ul>\n<p>而 Docker Compose 就可以帮助我们实现多个相互关联的 Docker 容器的快速部署。它允许用户通过一个单独的 docker-compose.yml 模板文件（YAML 格式）来定义一组相关联的应用容器。</p>\n<p>docker-compose 文件中可以定义多个相互关联的应用容器，每一个应用容器被称为一个服务（service）。由于 service 就是在定义某个应用的运行时参数，因此与 docker run 参数非常相似。<br>\n举例来说，用 docker run 部署 MySQL 的命令如下：</p>\n<figure class=\"highlight shell\"><figcaption><span>shell</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  --name mysql \\</span><br><span class=\"line\">  -p 3306:3306 \\</span><br><span class=\"line\">  -e TZ=Asia/Shanghai \\</span><br><span class=\"line\">  -e MYSQL_ROOT_PASSWORD=123 \\</span><br><span class=\"line\">  -v ./mysql/data:/var/lib/mysql \\</span><br><span class=\"line\">  -v ./mysql/conf:/etc/mysql/conf.d \\</span><br><span class=\"line\">  -v ./mysql/init:/docker-entrypoint-initdb.d \\</span><br><span class=\"line\">  --network hmall</span><br><span class=\"line\">  mysql</span><br></pre></td></tr></table></figure>\n<p>如果用 docker-compose.yml 文件来定义，就是这样：</p>\n<figure class=\"highlight shell\"><figcaption><span>shell</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &quot;3.8&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\">  mysql:</span><br><span class=\"line\">    image: mysql</span><br><span class=\"line\">    container_name: mysql</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;3306:3306&quot;</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      TZ: Asia/Shanghai</span><br><span class=\"line\">      MYSQL_ROOT_PASSWORD: 123</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - &quot;./mysql/conf:/etc/mysql/conf.d&quot;</span><br><span class=\"line\">      - &quot;./mysql/data:/var/lib/mysql&quot;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - new</span><br><span class=\"line\">networks:</span><br><span class=\"line\">  new:</span><br><span class=\"line\">    name: hmall</span><br></pre></td></tr></table></figure>\n<p>对比如下：</p>\n<table>\n<thead>\n<tr>\n<th>docker run 参数</th>\n<th>docker compose 指令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>–name</td>\n<td>container_name</td>\n<td>容器名称</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>ports</td>\n<td>端口映射</td>\n</tr>\n<tr>\n<td>-e</td>\n<td>environment</td>\n<td>环境变量</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>volumes</td>\n<td>数据卷配置</td>\n</tr>\n<tr>\n<td>–network</td>\n<td>networks</td>\n<td>网络</td>\n</tr>\n</tbody>\n</table>\n<p>明白了其中的对应关系，相信编写 docker-compose 文件应该难不倒大家。</p>\n<p>黑马商城部署文件：</p>\n<figure class=\"highlight shell\"><figcaption><span>shell</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &quot;3.8&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\">  mysql:</span><br><span class=\"line\">    image: mysql</span><br><span class=\"line\">    container_name: mysql</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;3306:3306&quot;</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      TZ: Asia/Shanghai</span><br><span class=\"line\">      MYSQL_ROOT_PASSWORD: 123</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - &quot;./mysql/conf:/etc/mysql/conf.d&quot;</span><br><span class=\"line\">      - &quot;./mysql/data:/var/lib/mysql&quot;</span><br><span class=\"line\">      - &quot;./mysql/init:/docker-entrypoint-initdb.d&quot;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - hm-net</span><br><span class=\"line\">  hmall:</span><br><span class=\"line\">    build: </span><br><span class=\"line\">      context: .</span><br><span class=\"line\">      dockerfile: Dockerfile</span><br><span class=\"line\">    container_name: hmall</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;8080:8080&quot;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - hm-net</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - mysql</span><br><span class=\"line\">  nginx:</span><br><span class=\"line\">    image: nginx</span><br><span class=\"line\">    container_name: nginx</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;18080:18080&quot;</span><br><span class=\"line\">      - &quot;18081:18081&quot;</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - &quot;./nginx/nginx.conf:/etc/nginx/nginx.conf&quot;</span><br><span class=\"line\">      - &quot;./nginx/html:/usr/share/nginx/html&quot;</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - hmall</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - hm-net</span><br><span class=\"line\">networks:</span><br><span class=\"line\">  hm-net:</span><br><span class=\"line\">    name: hmall</span><br></pre></td></tr></table></figure>\n<p>编写好 docker-compose.yml 文件，就可以部署项目了。常见的命令：<br>\n基本语法如下：</p>\n<figure class=\"highlight shell\"><figcaption><span>shell</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker compose [OPTIONS] [COMMAND]</span><br></pre></td></tr></table></figure>\n<p>其中，OPTIONS 和 COMMAND 都是可选参数，比较常见的有：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>参数或指令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Options</td>\n<td>-f</td>\n<td>指定 compose 文件的路径和名称</td>\n</tr>\n<tr>\n<td></td>\n<td>-p</td>\n<td>指定 project 名称。project 就是当前 compose 文件中设置的多个 service 的集合，是逻辑概念</td>\n</tr>\n<tr>\n<td>Commands</td>\n<td>up</td>\n<td>创建并启动所有 service 容器</td>\n</tr>\n<tr>\n<td></td>\n<td>down</td>\n<td>停止并移除所有容器、网络</td>\n</tr>\n<tr>\n<td></td>\n<td>ps</td>\n<td>列出所有启动的容器</td>\n</tr>\n<tr>\n<td></td>\n<td>logs</td>\n<td>查看指定容器的日志</td>\n</tr>\n<tr>\n<td></td>\n<td>stop</td>\n<td>停止容器</td>\n</tr>\n<tr>\n<td></td>\n<td>start</td>\n<td>启动容器</td>\n</tr>\n<tr>\n<td></td>\n<td>restart</td>\n<td>重启容器</td>\n</tr>\n<tr>\n<td></td>\n<td>top</td>\n<td>查看运行的进程</td>\n</tr>\n<tr>\n<td></td>\n<td>exec</td>\n<td>在指定的运行中容器中执行命令</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight shell\"><figcaption><span>shell</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1.进入root目录</span></span><br><span class=\"line\">cd /root</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2.删除旧容器</span></span><br><span class=\"line\">docker rm -f $(docker ps -qa)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">3.删除hmall镜像</span></span><br><span class=\"line\">docker rmi hmall</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">4.清空MySQL数据</span></span><br><span class=\"line\">rm -rf mysql/data</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">5.启动所有, -d 参数是后台启动</span></span><br><span class=\"line\">docker compose up -d</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">结果：</span></span><br><span class=\"line\">[+] Building 15.5s (8/8) FINISHED</span><br><span class=\"line\"> =&gt; [internal] load build definition from Dockerfile                                    0.0s</span><br><span class=\"line\"> =&gt; =&gt; transferring dockerfile: 358B                                                    0.0s</span><br><span class=\"line\"> =&gt; [internal] load .dockerignore                                                       0.0s</span><br><span class=\"line\"> =&gt; =&gt; transferring context: 2B                                                         0.0s</span><br><span class=\"line\"> =&gt; [internal] load metadata for docker.io/library/openjdk:11.0-jre-buster             15.4s</span><br><span class=\"line\"> =&gt; [1/3] FROM docker.io/library/openjdk:11.0-jre-buster@sha256:3546a17e6fb4ff4fa681c3  0.0s</span><br><span class=\"line\"> =&gt; [internal] load build context                                                       0.0s</span><br><span class=\"line\"> =&gt; =&gt; transferring context: 98B                                                        0.0s</span><br><span class=\"line\"> =&gt; CACHED [2/3] RUN ln -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; echo   0.0s</span><br><span class=\"line\"> =&gt; CACHED [3/3] COPY hm-service.jar /app.jar                                           0.0s</span><br><span class=\"line\"> =&gt; exporting to image                                                                  0.0s</span><br><span class=\"line\"> =&gt; =&gt; exporting layers                                                                 0.0s</span><br><span class=\"line\"> =&gt; =&gt; writing image sha256:32eebee16acde22550232f2eb80c69d2ce813ed099640e4cfed2193f71  0.0s</span><br><span class=\"line\"> =&gt; =&gt; naming to docker.io/library/root-hmall                                           0.0s</span><br><span class=\"line\">[+] Running 4/4</span><br><span class=\"line\"> ✔ Network hmall    Created                                                             0.2s</span><br><span class=\"line\"> ✔ Container mysql  Started                                                             0.5s</span><br><span class=\"line\"> ✔ Container hmall  Started                                                             0.9s</span><br><span class=\"line\"> ✔ Container nginx  Started                                                             1.5s</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">6.查看镜像</span></span><br><span class=\"line\">docker compose images</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">结果</span></span><br><span class=\"line\">CONTAINER           REPOSITORY          TAG                 IMAGE ID            SIZE</span><br><span class=\"line\">hmall               root-hmall          latest              32eebee16acd        362MB</span><br><span class=\"line\">mysql               mysql               latest              3218b38490ce        516MB</span><br><span class=\"line\">nginx               nginx               latest              605c77e624dd        141MB</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">7.查看容器</span></span><br><span class=\"line\">docker compose ps</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">结果</span></span><br><span class=\"line\">NAME                IMAGE               COMMAND                  SERVICE             CREATED             STATUS              PORTS</span><br><span class=\"line\">hmall               root-hmall          &quot;java -jar /app.jar&quot;     hmall               54 seconds ago      Up 52 seconds       0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp</span><br><span class=\"line\">mysql               mysql               &quot;docker-entrypoint.s…&quot;   mysql               54 seconds ago      Up 53 seconds       0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp</span><br><span class=\"line\">nginx               nginx               &quot;/docker-entrypoint.…&quot;   nginx               54 seconds ago      Up 52 seconds       80/tcp, 0.0.0.0:18080-18081-&gt;18080-18081/tcp, :::18080-18081-&gt;18080-18081/tcp</span><br></pre></td></tr></table></figure>\n<p>打开浏览器，访问：<span class=\"exturl\" data-url=\"aHR0cDovL3lvdXJJcDo4MDgw\">http://yourIp:8080</span></p>\n<img data-src=\"https://i.makeagif.com/media/9-15-2015/bQkqor.gif\" class=\"abc\" width=\"600\" height=\"350\">",
            "tags": [
                "docker"
            ]
        },
        {
            "id": "https://superrjohn.github.io/John/2023/11/08/java/pay/alipay",
            "url": "https://superrjohn.github.io/John/2023/11/08/java/pay/alipay",
            "title": "整合支付寶",
            "date_published": "2023-11-08T09:27:06.236Z",
            "content_html": "<p>在此特别感謝黑馬程序員提供的課程: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWo4NDExTjdCbS8=\">學成在線</span></p>\n<p>前言<br>\n於由實習項目快做完才做記錄，而且項目模塊較多，故挑部份來記錄<br>\n<span class=\"rainbow\">完整项目地址</span>：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3N1cGVycmpvaG4vamF2YV93ZWI=\">https://github.com/superrjohn/java_web</span></p>\n<h1 id=\"整合第三方支付\"><a class=\"markdownIt-Anchor\" href=\"#整合第三方支付\">#</a> 整合第三方支付</h1>\n<h2 id=\"執行流程\"><a class=\"markdownIt-Anchor\" href=\"#執行流程\">#</a> 執行流程</h2>\n<p>用戶去學習收費課程時引導其去支付，如下圖：<br>\n當使用者點擊微信支付或支付寶支付時執行流程如下：</p>\n<img data-src=\"/John/img/java/pay/alipay/1.png\" class=\"abc\">\n<p>1️⃣請求學習中心服務建立選課記錄<br>\n2️⃣請求訂單服務建立商品訂單、產生支付二維碼。<br>\n3️⃣用戶掃碼請求訂單支付服務，訂單支付服務請求第三方支付平台產生支付訂單。<br>\n4️⃣前端喚起支付客戶端，使用者輸入密碼完成付款。<br>\n5️⃣第三方支付平台支付完成發起支付通知。<br>\n6️⃣訂單支付服務接收第三方支付通知結果。<br>\n7️⃣用戶在前端查詢付款結果，請求訂單支付服務查詢支付結果。<br>\n8️⃣訂單支付服務向學習中心服務通知支付結果。<br>\n9️⃣學習中心服務收到付款結果，如果支付成功則更新選課記錄，並添加到我的課程表。</p>\n<h2 id=\"通用訂單服務設計\"><a class=\"markdownIt-Anchor\" href=\"#通用訂單服務設計\">#</a> 通用訂單服務設計</h2>\n<p>在本項目中不僅選課需要下單，購買學習資料、老師一對一答疑等所有收費項目都需要支付下單<br>\n所以本項目設計通用的訂單服務，通用的訂單服務承接各業務模組的收費支付需求，當用戶需要交費時，統一產生商品訂單進行支付<br>\n所有收費業務最終轉換為訂單記錄，在訂單服務的商品訂單表中存儲<br>\n以選課為例，選課記錄表的 ID 在商品訂單表的 out_business_id 字段</p>\n<h1 id=\"準備開發環境\"><a class=\"markdownIt-Anchor\" href=\"#準備開發環境\">#</a> 準備開發環境</h1>\n<h2 id=\"支付寶開發環境\"><a class=\"markdownIt-Anchor\" href=\"#支付寶開發環境\">#</a> 支付寶開發環境</h2>\n<p>1️⃣配置沙箱環境<br>\n沙箱環境是支付寶開放平台為開發者提供的與生產環境完全隔離的聯調測試環境，開發者在沙箱環境中完成的接口呼叫不會對生產環境中的資料造成任何影響。<br>\n接入手機網站支付需具備以下條件：</p>\n<p>🔴申請前必須擁有經過實名認證的支付寶帳戶；</p>\n<p>🔴企業或個體工商戶可申請；</p>\n<p>🔴需提供真實有效的營業執照，且支付寶帳戶名稱需與營業執照主體一致；</p>\n<p>🔴網站能正常存取且頁面顯示完整，網站需要明確經營內容且有完整的商品資訊；</p>\n<p>🔴網站必須透過 ICP 備案。 如為個體工商戶，網站備案主體需與支付寶帳戶主體名稱一致；</p>\n<p>詳細參考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm9wZW4uYWxpcGF5LmNvbS8yMDM=\">https://docs.open.alipay.com/203</span></p>\n<p>本文檔使用支付寶沙箱進行開發測試，這裡主要介紹支付寶沙箱環境配置。</p>\n<p>詳細參考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm9wZW4uYWxpcGF5LmNvbS8yMDAvMTA1MzExLw==\">https://docs.open.alipay.com/200/105311/</span></p>\n<p>2️⃣模擬器</p>\n<p>下載模擬器：<span class=\"exturl\" data-url=\"aHR0cDovL211bXUuMTYzLmNvbS8=\">http://mumu.163.com/</span></p>\n<p>安裝模擬器，安裝在沒有空格和中文的目錄。</p>\n<p>安裝成功，啟動模擬器</p>\n<p>3️⃣在模擬器中安裝沙箱版本的支付寶</p>\n<p>使用沙箱環境的買家帳號登入沙箱版本的支付寶</p>\n<img data-src=\"/John/img/java/pay/alipay/2.png\" class=\"abc\">\n<h1 id=\"建立訂單服務\"><a class=\"markdownIt-Anchor\" href=\"#建立訂單服務\">#</a> 建立訂單服務</h1>\n<p>拷貝課程資料目錄下的訂單服務工程 xuecheng-plus-orders 到自己的工程目錄</p>\n<p>然後在 nacos 中添加配置文件<br>\n orders-api-dev.yaml</p>\n<figure class=\"highlight yaml\"><figcaption><span>yaml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">servlet:</span></span><br><span class=\"line\">    <span class=\"attr\">context-path:</span> <span class=\"string\">/orders</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">63030</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"> <span class=\"attr\">cloud:</span></span><br><span class=\"line\">  <span class=\"attr\">config:</span></span><br><span class=\"line\">    <span class=\"attr\">override-none:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>orders-service-dev.yaml</p>\n<figure class=\"highlight yaml\"><figcaption><span>yaml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/xc_orders?serverTimezone=UTC&amp;userUnicode=true&amp;useSSL=false&amp;</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">xxl:</span></span><br><span class=\"line\">  <span class=\"attr\">job:</span></span><br><span class=\"line\">    <span class=\"attr\">admin:</span> </span><br><span class=\"line\">      <span class=\"attr\">addresses:</span> <span class=\"string\">http://192.168.101.128:18088/xxl-job-admin/</span></span><br><span class=\"line\">    <span class=\"attr\">executor:</span></span><br><span class=\"line\">      <span class=\"attr\">appname:</span> <span class=\"string\">payresultnotify-job</span></span><br><span class=\"line\">      <span class=\"attr\">address:</span> </span><br><span class=\"line\">      <span class=\"attr\">ip:</span> </span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">8989</span></span><br><span class=\"line\">      <span class=\"attr\">logpath:</span> <span class=\"string\">/data/applogs/xxl-job/jobhandler</span></span><br><span class=\"line\">      <span class=\"attr\">logretentiondays:</span> <span class=\"number\">30</span></span><br><span class=\"line\">    <span class=\"attr\">accessToken:</span> <span class=\"string\">default_token</span></span><br></pre></td></tr></table></figure>\n<p>建立 xc_orders 資料庫，導入黑馬提供的 SQL 腳本</p>\n<h1 id=\"支付接口測試\"><a class=\"markdownIt-Anchor\" href=\"#支付接口測試\">#</a> 支付接口測試</h1>\n<h2 id=\"閱讀接口定義\"><a class=\"markdownIt-Anchor\" href=\"#閱讀接口定義\">#</a> 閱讀接口定義</h2>\n<p>1. 手機網站支付接取流程詳細參考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm9wZW4uYWxpcGF5LmNvbS8yMDMvMTA1Mjg1Lw==\">https://docs.open.alipay.com/203/105285/</span></p>\n<p>1️⃣用戶在商家的 H5 網站下單付款後，商家系統依照手機網站支付接口 alipay.trade.wap.payAPI 的參數規格產生訂單數據</p>\n<p>2️⃣前端頁面透過 Form 表單的形式請求到支付寶。 此時支付寶會自動將頁面跳到支付寶 H5 收銀台頁面，如果用戶手機上安裝了支付寶 APP，則會自動喚起支付寶 APP。</p>\n<p>3️⃣輸入支付密碼完成付款。</p>\n<p>4️⃣用戶在支付寶 APP 或 H5 收銀台完成付款後，會根據商家在手機網站支付 API 中傳入的前台回跳地址 return_url 自動跳轉回商家頁面，同時在 URL 請求中以 Query String 的形式附帶 支付結果參數，詳細回跳參數請見「手機網站支付接口 alipay.trade.wap.pay」前台回跳參數。</p>\n<p>5️⃣支付寶也會根據原始支付 API 中傳入的非同步通知地址 notify_url，透過 POST 請求的形式將支付結果作為參數通知到商家系統，詳情請參閱支付結果非同步通知。</p>\n<p>2、接口定義</p>\n<p>文檔：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9vcGVuZG9jcy5hbGlwYXkuY29tL29wZW4vMjAzLzEwNzA5MA==\">https://opendocs.alipay.com/open/203/107090</span></p>\n<p>接口定義：外部商家要求支付寶建立訂單並支付</p>\n<p>請求地址：開發中使用沙箱位址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9vcGVuYXBpLmFsaXBheWRldi5jb20vZ2F0ZXdheS5kbw==\">https://openapi.alipaydev.com/gateway.do</span></p>\n<p>請求參數：詳細查閱<span class=\"exturl\" data-url=\"aHR0cHM6Ly9vcGVuZG9jcy5hbGlwYXkuY29tL29wZW4vMjAzLzEwNzA5MA==\"> https://opendocs.alipay.com/open/203/107090</span></p>\n<p>一部分由 sdk 設置，一部分需要編寫程式時指定。</p>\n<p>3. 示例代碼</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doPost</span><span class=\"params\">(HttpServletRequest httpRequest,</span></span><br><span class=\"line\"><span class=\"params\">                HttpServletResponse httpResponse)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\">    <span class=\"type\">AlipayClient</span> <span class=\"variable\">alipayClient</span> <span class=\"operator\">=</span> ... <span class=\"comment\">//获得初始化的AlipayClient</span></span><br><span class=\"line\">    <span class=\"type\">AlipayTradeWapPayRequest</span> <span class=\"variable\">alipayRequest</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AlipayTradeWapPayRequest</span>();<span class=\"comment\">//创建API对应的request</span></span><br><span class=\"line\">    alipayRequest.setReturnUrl(<span class=\"string\">&quot;http://domain.com/CallBack/return_url.jsp&quot;</span>);</span><br><span class=\"line\">    alipayRequest.setNotifyUrl(<span class=\"string\">&quot;http://domain.com/CallBack/notify_url.jsp&quot;</span>);<span class=\"comment\">//在公共参数中设置回跳和通知地址</span></span><br><span class=\"line\">    alipayRequest.setBizContent(<span class=\"string\">&quot;&#123;&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;    \\&quot;out_trade_no\\&quot;:\\&quot;20150320010101002\\&quot;,&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;    \\&quot;total_amount\\&quot;:88.88,&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;    \\&quot;subject\\&quot;:\\&quot;Iphone6 16G\\&quot;,&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;    \\&quot;product_code\\&quot;:\\&quot;QUICK_WAP_WAY\\&quot;&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;  &#125;&quot;</span>);<span class=\"comment\">//填充业务参数</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">form</span> <span class=\"operator\">=</span> alipayClient.pageExecute(alipayRequest).getBody(); <span class=\"comment\">//调用SDK生成表单</span></span><br><span class=\"line\">    httpResponse.setContentType(<span class=\"string\">&quot;text/html;charset=&quot;</span> + AlipayServiceEnvConstants.CHARSET);</span><br><span class=\"line\">    httpResponse.getWriter().write(form);<span class=\"comment\">//直接将完整的表单html输出到页面</span></span><br><span class=\"line\">    httpResponse.getWriter().flush();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"下單執行流程\"><a class=\"markdownIt-Anchor\" href=\"#下單執行流程\">#</a> 下單執行流程</h2>\n<p>根據接口描述，支付寶下單接口的執行流程如下：</p>\n<img data-src=\"/John/img/java/pay/alipay/3.png\" class=\"abc\">\n<h2 id=\"編寫下單程式碼\"><a class=\"markdownIt-Anchor\" href=\"#編寫下單程式碼\">#</a> 編寫下單程式碼</h2>\n<p>根據接口流程，首先在訂單服務編寫測試類別請求支付寶下單的接口。</p>\n<p>在訂單服務 api 工程添加依賴：</p>\n<figure class=\"highlight xml\"><figcaption><span>xml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 支付宝SDK --&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alipay.sdk<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>alipay-sdk-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.7.73.ALL<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 支付宝SDK依赖的日志 --&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-logging<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-logging<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span> </span><br></pre></td></tr></table></figure>\n<p>拷貝 AlipayConfig.java 到訂單服務的 service 工程，其中請求網站地址為支付寶支付接口地址</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AlipayConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 商户appid</span></span><br><span class=\"line\"><span class=\"comment\">//\tpublic static String APPID = &quot;&quot;;</span></span><br><span class=\"line\">    <span class=\"comment\">// 私钥 pkcs8格式的</span></span><br><span class=\"line\"><span class=\"comment\">//\tpublic static String RSA_PRIVATE_KEY = &quot;&quot;;</span></span><br><span class=\"line\">    <span class=\"comment\">// 服务器异步通知页面路径 需http://或者https://格式的完整路径，不能加?id=123这类自定义参数，必须外网可以正常访问</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">notify_url</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;http://商户网关地址/alipay.trade.wap.pay-JAVA-UTF-8/notify_url.jsp&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 页面跳转同步通知页面路径 需http://或者https://格式的完整路径，不能加?id=123这类自定义参数，必须外网可以正常访问 商户可以自定义同步跳转地址</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">return_url</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;http://商户网关地址/alipay.trade.wap.pay-JAVA-UTF-8/return_url.jsp&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 请求网关地址</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">URL</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;https://openapi.alipaydev.com/gateway.do&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 编码</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">CHARSET</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;UTF-8&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 返回格式</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">FORMAT</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;json&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 支付宝公钥</span></span><br><span class=\"line\"><span class=\"comment\">//\tpublic static String ALIPAY_PUBLIC_KEY = &quot;&quot;;</span></span><br><span class=\"line\">    <span class=\"comment\">// 日志记录目录</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">log_path</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;/log&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// RSA2</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">SIGNTYPE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;RSA2&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>掃碼支付其實就是請求 URL, 所以我們要寫一個 Controller, 我們要 new DefaultAlipayClient 類並修改參數</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PayTestController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;pay.alipay.APP_ID&#125;&quot;)</span></span><br><span class=\"line\">    String APP_ID;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;pay.alipay.APP_PRIVATE_KEY&#125;&quot;)</span></span><br><span class=\"line\">    String APP_PRIVATE_KEY;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;pay.alipay.ALIPAY_PUBLIC_KEY&#125;&quot;)</span></span><br><span class=\"line\">    String ALIPAY_PUBLIC_KEY;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/alipaytest&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doPost</span><span class=\"params\">(HttpServletRequest httpRequest,</span></span><br><span class=\"line\"><span class=\"params\">                    HttpServletResponse httpResponse)</span> <span class=\"keyword\">throws</span> ServletException, IOException, AlipayApiException &#123;</span><br><span class=\"line\">        <span class=\"type\">AlipayClient</span> <span class=\"variable\">alipayClient</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultAlipayClient</span>(AlipayConfig.URL, APP_ID, APP_PRIVATE_KEY, AlipayConfig.FORMAT, AlipayConfig.CHARSET, ALIPAY_PUBLIC_KEY,AlipayConfig.SIGNTYPE);</span><br><span class=\"line\">        <span class=\"comment\">//获得初始化的AlipayClient</span></span><br><span class=\"line\">        <span class=\"type\">AlipayTradeWapPayRequest</span> <span class=\"variable\">alipayRequest</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AlipayTradeWapPayRequest</span>();<span class=\"comment\">//创建API对应的request</span></span><br><span class=\"line\"><span class=\"comment\">//        alipayRequest.setReturnUrl(&quot;http://domain.com/CallBack/return_url.jsp&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//        alipayRequest.setNotifyUrl(&quot;http://domain.com/CallBack/notify_url.jsp&quot;);//在公共参数中设置回跳和通知地址</span></span><br><span class=\"line\">        alipayRequest.setBizContent(<span class=\"string\">&quot;&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;    \\&quot;out_trade_no\\&quot;:\\&quot;202210100010101002\\&quot;,&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;    \\&quot;total_amount\\&quot;:100000,&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;    \\&quot;subject\\&quot;:\\&quot;Iphone6 16G\\&quot;,&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;    \\&quot;product_code\\&quot;:\\&quot;QUICK_WAP_WAY\\&quot;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;  &#125;&quot;</span>);<span class=\"comment\">//填充业务参数</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">form</span> <span class=\"operator\">=</span> alipayClient.pageExecute(alipayRequest).getBody(); <span class=\"comment\">//调用SDK生成表单</span></span><br><span class=\"line\">        httpResponse.setContentType(<span class=\"string\">&quot;text/html;charset=&quot;</span> + AlipayConfig.CHARSET);</span><br><span class=\"line\">        httpResponse.getWriter().write(form);<span class=\"comment\">//直接将完整的表单html输出到页面</span></span><br><span class=\"line\">        httpResponse.getWriter().flush();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 nacos 中的 orders-service-dev.yaml 中配置公钥和私钥，從你的沙箱環境帳號獲得</p>\n<figure class=\"highlight yml\"><figcaption><span>yml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">pay:</span></span><br><span class=\"line\">  <span class=\"attr\">alipay:</span></span><br><span class=\"line\">    <span class=\"attr\">APP_ID:</span> <span class=\"string\">写你自己的AppID</span></span><br><span class=\"line\">    <span class=\"attr\">APP_PRIVATE_KEY:</span> <span class=\"string\">写你自己的应用私钥</span></span><br><span class=\"line\">    <span class=\"attr\">ALIPAY_PUBLIC_KEY:</span> <span class=\"string\">写你自己的支付宝公钥</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"產生二維碼\"><a class=\"markdownIt-Anchor\" href=\"#產生二維碼\">#</a> 產生二維碼</h2>\n<p>使用者在前端使用支付寶沙箱透過掃碼請求下單接口，我們需要產生訂單服務的下單接口的二維碼。</p>\n<p>ZXing 是一個開源的類別庫，是用 Java 編寫的多格式的 1D / 2D 條碼圖像處理庫，使用 ZXing 可以產生、識別 QR Code（二維碼）。 常用的二維碼處理庫還有 zbar，近幾年不再更新程式碼，下邊介紹 ZXing 產生二維碼的方法。</p>\n<p>1）在 base 工程 pom.xml 中加入依賴：</p>\n<figure class=\"highlight xml\"><figcaption><span>XML</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 二维码生成&amp;识别组件 --&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.google.zxing<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.3.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.google.zxing<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javase<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.3.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.commons<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-lang3<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span> </span><br></pre></td></tr></table></figure>\n<p>2）產生二維碼方法</p>\n<p>拷貝課程資料中 utils 下的 QRCodeUtil.java 到 base 工程 util 包下。</p>\n<p>測試根據內容產生二維碼方法，在 QRCodeUtil 中加入 main 方法，當執行代碼時會生成 base64 串，將 base64 串複製到瀏覽器位址後將顯示一個二維碼，用戶用手機掃此二維碼將要求至<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5pdGNhc3QuY24v\"> http://www.itcast.cn/</span> , 如下:</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123; </span><br><span class=\"line\">    <span class=\"type\">QRCodeUtil</span> <span class=\"variable\">qrCodeUtil</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">QRCodeUtil</span>(); </span><br><span class=\"line\">    System.out.println(qrCodeUtil.createQRCode(<span class=\"string\">&quot;http://www.itcast.cn/&quot;</span>, <span class=\"number\">200</span>, <span class=\"number\">200</span>)); </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h2 id=\"接口測試\"><a class=\"markdownIt-Anchor\" href=\"#接口測試\">#</a> 接口測試</h2>\n<p>修改我們之前的 main 方法，將 url 換成下單接口，注意這裡不要用 localhost，得用本機區域網路 ip, 現在用戶掃碼後會請求到我們寫的支付接口</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"type\">QRCodeUtil</span> <span class=\"variable\">qrCodeUtil</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">QRCodeUtil</span>();</span><br><span class=\"line\">    System.out.println(qrCodeUtil.createQRCode(<span class=\"string\">&quot;http://192.168.101.1:63030/orders/alipaytest&quot;</span>, <span class=\"number\">200</span>, <span class=\"number\">200</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>運行 main 方法，得到二維碼後，開啟模擬器，在模擬器中開啟支付寶沙箱客戶端，並使用沙箱客戶端掃生成的二維碼，就會調用 SDK 生成表單，並喚醒支付寶的 JS 窗口</p>\n<h1 id=\"支付結果查詢接口\"><a class=\"markdownIt-Anchor\" href=\"#支付結果查詢接口\">#</a> 支付結果查詢接口</h1>\n<p>支付完成可以呼叫第三方支付平台的付款結果查詢接口查詢支付結果，以下用測試類查詢</p>\n<p>文件：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9vcGVuZG9jcy5hbGlwYXkuY29tL29wZW4vMDJpdmJ0\">https://opendocs.alipay.com/open/02ivbt</span></p>\n<p>剛才訂單付款成功，可以使用 out_trade_no 商品訂單號碼或支付寶的交易流水號 trade_no 去查詢付款結果。</p>\n<p>out_trade_no 商品訂單號碼：是在下單要求時指定的商品訂單號碼。</p>\n<p>支付寶的交易流水號 trade_no：是支付完成後支付寶通知付款結果時發送的 trade_no</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AliPayTest</span> &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;pay.alipay.APP_ID&#125;&quot;)</span> </span><br><span class=\"line\">    String APP_ID; </span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;pay.alipay.APP_PRIVATE_KEY&#125;&quot;)</span> </span><br><span class=\"line\">    String APP_PRIVATE_KEY; </span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;pay.alipay.ALIPAY_PUBLIC_KEY&#125;&quot;)</span> </span><br><span class=\"line\">    String ALIPAY_PUBLIC_KEY; </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@Test</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">queryPayResult</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> AlipayApiException &#123; </span><br><span class=\"line\">    <span class=\"type\">AlipayClient</span> <span class=\"variable\">alipayClient</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultAlipayClient</span>(AlipayConfig.URL, APP_ID, APP_PRIVATE_KEY, <span class=\"string\">&quot;json&quot;</span>, AlipayConfig.CHARSET, ALIPAY_PUBLIC_KEY, AlipayConfig.SIGNTYPE); <span class=\"comment\">//获得初始化的AlipayClient </span></span><br><span class=\"line\">    <span class=\"type\">AlipayTradeQueryRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AlipayTradeQueryRequest</span>(); </span><br><span class=\"line\">    <span class=\"type\">JSONObject</span> <span class=\"variable\">bizContent</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JSONObject</span>(); </span><br><span class=\"line\">    bizContent.put(<span class=\"string\">&quot;out_trade_no&quot;</span>, <span class=\"string\">&quot;202210100010101002&quot;</span>); </span><br><span class=\"line\">    <span class=\"comment\">//bizContent.put(&quot;trade_no&quot;, &quot;2014112611001004680073956707&quot;); </span></span><br><span class=\"line\">    request.setBizContent(bizContent.toString()); </span><br><span class=\"line\">    <span class=\"type\">AlipayTradeQueryResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> alipayClient.execute(request); </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (response.isSuccess()) &#123; </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;调用成功&quot;</span>); </span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">resultJson</span> <span class=\"operator\">=</span> response.getBody(); </span><br><span class=\"line\">        <span class=\"comment\">//转map </span></span><br><span class=\"line\">        <span class=\"type\">Map</span> <span class=\"variable\">resultMap</span> <span class=\"operator\">=</span> JSON.parseObject(resultJson, Map.class); </span><br><span class=\"line\">        <span class=\"type\">Map</span> <span class=\"variable\">alipay_trade_query_response</span> <span class=\"operator\">=</span> (Map) resultMap.get(<span class=\"string\">&quot;alipay_trade_query_response&quot;</span>); </span><br><span class=\"line\">        <span class=\"comment\">//支付结果 </span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">trade_status</span> <span class=\"operator\">=</span> (String) alipay_trade_query_response.get(<span class=\"string\">&quot;trade_status&quot;</span>); </span><br><span class=\"line\">        System.out.println(trade_status); </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;调用失败&quot;</span>); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>響應回來重要的參數為:<br>\n“out_trade_no” : “20220520010101026”,</p>\n<p>“trade_no”:“2022100422001422760505740639”  ： 支付宝交易流水号</p>\n<p>“total_amount” : “1.30”</p>\n<p>“trade_status” : “TRADE_SUCCESS”：</p>\n<h2 id=\"支付結果通知接口\"><a class=\"markdownIt-Anchor\" href=\"#支付結果通知接口\">#</a> 支付結果通知接口</h2>\n<p>準備環境<br>\n對於手機網站支付產生的交易，支付寶會通知商家支付結果，有兩種通知方式，透過 return_url、notify_url 進行通知，使用 return_url 不能保證通知到位，推薦使用 notify_url 完成支付結構通知。</p>\n<p>具體的使用方法是在呼叫下單接口的 API 中傳入的非同步通知位址 notify_url，透過 POST 請求的形式將支付結果作為參數通知到商家系統。 詳情可查看 支付寶非同步通知說明 。</p>\n<p>文件：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9vcGVuZG9jcy5hbGlwYXkuY29tL29wZW4vMjAzLzEwNTI4Ng==\">https://opendocs.alipay.com/open/203/105286</span></p>\n<p>根據下單執行流程，訂單服務收到付款結果需要對內容進行驗簽，驗簽流程如下：</p>\n<p>1️⃣在通知回傳參數清單中，除去 sign、sign_type 兩個參數外，凡是通知回傳回來的參數都是待驗簽的參數。 將剩餘參數進行 url_decode，然後進行字典排序，組成字串，得到待簽名字串； 生活號非同步通知組成的待驗簽串裡需要保留 sign_type 參數。</p>\n<p>2️⃣將簽章參數（sign）使用 base64 解碼為字節碼字串；</p>\n<p>3️⃣使用 RSA 的驗簽方法，透過簽章字串、簽章參數（經過 base64 解碼）及支付寶公鑰驗證簽章。</p>\n<p>4️⃣驗證簽章正確後，必須再嚴格依照以下描述校驗通知資料的正確性。</p>\n<p>在上述驗證通過後，商家必須根據支付寶不同類型的業務通知，正確的進行不同的業務處理，並且過濾重複的通知結果資料。</p>\n<p>透過驗證 out_trade_no、total_amount、appid 參數的正確性來判斷通知請求的合法性。</p>\n<h2 id=\"編寫測試程式碼\"><a class=\"markdownIt-Anchor\" href=\"#編寫測試程式碼\">#</a> 編寫測試程式碼</h2>\n<p>在下單請求時設定通知位址 request.setNotifyUrl (“商家自己的 notify_url 位址”);</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/alipaytest&quot;)</span> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">alipaytest</span><span class=\"params\">(HttpServletRequest httpRequest, </span></span><br><span class=\"line\"><span class=\"params\">                           HttpServletResponse httpResponse)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123; </span><br><span class=\"line\">        <span class=\"comment\">//构造sdk的客户端对象 </span></span><br><span class=\"line\">        <span class=\"type\">AlipayClient</span> <span class=\"variable\">alipayClient</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultAlipayClient</span>(serverUrl, APP_ID, APP_PRIVATE_KEY, <span class=\"string\">&quot;json&quot;</span>, CHARSET, ALIPAY_PUBLIC_KEY, sign_type); <span class=\"comment\">//获得初始化的AlipayClient </span></span><br><span class=\"line\">        <span class=\"type\">AlipayTradeWapPayRequest</span> <span class=\"variable\">alipayRequest</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AlipayTradeWapPayRequest</span>();<span class=\"comment\">//创建API对应的request </span></span><br><span class=\"line\"><span class=\"comment\">//        alipayRequest.setReturnUrl(&quot;http://domain.com/CallBack/return_url.jsp&quot;); </span></span><br><span class=\"line\">        alipayRequest.setNotifyUrl(<span class=\"string\">&quot;http://tjxt-user-t.itheima.net/xuecheng/orders/paynotify&quot;</span>);<span class=\"comment\">//在公共参数中设置回跳和通知地址 </span></span><br><span class=\"line\">        ..... </span><br><span class=\"line\">         </span><br></pre></td></tr></table></figure>\n<p><span class=\"yellow\">注意由於回呼位址必須外網可存取的位址，所以這裡需要內網穿透工具，可以用 NatApp 或者花生殼</span></p>\n<p>編寫接收通知接口，接收參數並驗簽</p>\n<p>參考課程資料下的 alipay.trade.wap.pay-java-utf-8\\WebContent\\notify_url.jsp, 程式碼如下：</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//接收通知 </span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;/paynotify&quot;)</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">paynotify</span><span class=\"params\">(HttpServletRequest request,HttpServletResponse response)</span> <span class=\"keyword\">throws</span> UnsupportedEncodingException, AlipayApiException &#123; </span><br><span class=\"line\">    Map&lt;String,String&gt; params = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;String,String&gt;(); </span><br><span class=\"line\">    <span class=\"type\">Map</span> <span class=\"variable\">requestParams</span> <span class=\"operator\">=</span> request.getParameterMap(); </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">Iterator</span> <span class=\"variable\">iter</span> <span class=\"operator\">=</span> requestParams.keySet().iterator(); iter.hasNext();) &#123; </span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> (String) iter.next(); </span><br><span class=\"line\">        String[] values = (String[]) requestParams.get(name); </span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">valueStr</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>; </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; values.length; i++) &#123; </span><br><span class=\"line\">            valueStr = (i == values.length - <span class=\"number\">1</span>) ? valueStr + values[i] </span><br><span class=\"line\">                    : valueStr + values[i] + <span class=\"string\">&quot;,&quot;</span>; </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"comment\">//乱码解决，这段代码在出现乱码时使用。如果mysign和sign不相等也可以使用这段代码转化 </span></span><br><span class=\"line\">        <span class=\"comment\">//valueStr = new String(valueStr.getBytes(&quot;ISO-8859-1&quot;), &quot;gbk&quot;); </span></span><br><span class=\"line\">        params.put(name, valueStr); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"comment\">//获取支付宝的通知返回参数，可参考技术文档中页面跳转同步通知参数列表(以上仅供参考)// </span></span><br><span class=\"line\">    <span class=\"comment\">//计算得出通知验证结果 </span></span><br><span class=\"line\">    <span class=\"comment\">//boolean AlipaySignature.rsaCheckV1(Map&lt;String, String&gt; params, String publicKey, String charset, String sign_type) </span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">verify_result</span> <span class=\"operator\">=</span> AlipaySignature.rsaCheckV1(params, ALIPAY_PUBLIC_KEY, AlipayConfig.CHARSET, <span class=\"string\">&quot;RSA2&quot;</span>); </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(verify_result) &#123;<span class=\"comment\">//验证成功 </span></span><br><span class=\"line\">        <span class=\"comment\">////////////////////////////////////////////////////////////////////////////////////////// </span></span><br><span class=\"line\">        <span class=\"comment\">//请在这里加上商户的业务逻辑程序代码 </span></span><br><span class=\"line\">         <span class=\"comment\">//商户订单号 </span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">out_trade_no</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(request.getParameter(<span class=\"string\">&quot;out_trade_no&quot;</span>).getBytes(<span class=\"string\">&quot;ISO-8859-1&quot;</span>),<span class=\"string\">&quot;UTF-8&quot;</span>); </span><br><span class=\"line\">        <span class=\"comment\">//支付宝交易号     </span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">trade_no</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(request.getParameter(<span class=\"string\">&quot;trade_no&quot;</span>).getBytes(<span class=\"string\">&quot;ISO-8859-1&quot;</span>),<span class=\"string\">&quot;UTF-8&quot;</span>); </span><br><span class=\"line\">        <span class=\"comment\">//交易状态 </span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">trade_status</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(request.getParameter(<span class=\"string\">&quot;trade_status&quot;</span>).getBytes(<span class=\"string\">&quot;ISO-8859-1&quot;</span>),<span class=\"string\">&quot;UTF-8&quot;</span>); </span><br><span class=\"line\">        <span class=\"comment\">//——请根据您的业务逻辑来编写程序（以下代码仅作参考）—— </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (trade_status.equals(<span class=\"string\">&quot;TRADE_FINISHED&quot;</span>)) &#123;<span class=\"comment\">//交易结束 </span></span><br><span class=\"line\">            <span class=\"comment\">//判断该笔订单是否在商户网站中已经做过处理 </span></span><br><span class=\"line\">            <span class=\"comment\">//如果没有做过处理，根据订单号（out_trade_no）在商户网站的订单系统中查到该笔订单的详细，并执行商户的业务程序 </span></span><br><span class=\"line\">            <span class=\"comment\">//请务必判断请求时的total_fee、seller_id与通知时获取的total_fee、seller_id为一致的 </span></span><br><span class=\"line\">            <span class=\"comment\">//如果有做过处理，不执行商户的业务程序 </span></span><br><span class=\"line\">            <span class=\"comment\">//注意： </span></span><br><span class=\"line\">            <span class=\"comment\">//如果签约的是可退款协议，退款日期超过可退款期限后（如三个月可退款），支付宝系统发送该交易状态通知 </span></span><br><span class=\"line\">            <span class=\"comment\">//如果没有签约可退款协议，那么付款完成后，支付宝系统发送该交易状态通知。 </span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (trade_status.equals(<span class=\"string\">&quot;TRADE_SUCCESS&quot;</span>)) &#123;<span class=\"comment\">//交易成功 </span></span><br><span class=\"line\">            System.out.println(trade_status); </span><br><span class=\"line\">            <span class=\"comment\">//判断该笔订单是否在商户网站中已经做过处理 </span></span><br><span class=\"line\">            <span class=\"comment\">//如果没有做过处理，根据订单号（out_trade_no）在商户网站的订单系统中查到该笔订单的详细，并执行商户的业务程序 </span></span><br><span class=\"line\">            <span class=\"comment\">//请务必判断请求时的total_fee、seller_id与通知时获取的total_fee、seller_id为一致的 </span></span><br><span class=\"line\">            <span class=\"comment\">//如果有做过处理，不执行商户的业务程序 </span></span><br><span class=\"line\">            <span class=\"comment\">//注意： </span></span><br><span class=\"line\">            <span class=\"comment\">//如果签约的是可退款协议，那么付款完成后，支付宝系统发送该交易状态通知。 </span></span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        response.getWriter().write(<span class=\"string\">&quot;success&quot;</span>); </span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123; </span><br><span class=\"line\">        response.getWriter().write(<span class=\"string\">&quot;fail&quot;</span>); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>通知接口測試</p>\n<p>1️⃣重啟訂單服務，並在接收通知接口中打上斷點</p>\n<p>2️⃣配置內部網路穿透的本地端口為訂單服務端口，啟動內部網路穿透客戶端。</p>\n<p>3️⃣打開模擬器、支付寶沙箱，掃碼、付款。</p>\n<p>4️⃣觀察接收訂單支付資料等是否正常。</p>\n<p>這里成功進入到了通知接口</p>\n<img data-src=\"/John/img/java/pay/alipay/4.png\" class=\"abc\">\n<h1 id=\"生成支付二維碼\"><a class=\"markdownIt-Anchor\" href=\"#生成支付二維碼\">#</a> 生成支付二維碼</h1>\n<h2 id=\"執行流程-2\"><a class=\"markdownIt-Anchor\" href=\"#執行流程-2\">#</a> 執行流程</h2>\n<p>點選「支付寶支付」此時開啟支付二維碼，用戶掃碼支付。</p>\n<img data-src=\"/John/img/java/pay/alipay/5.png\" class=\"abc\">\n<p>執行流程：</p>\n<p>1. 前端調用學習中心服務的新增選課接口。</p>\n<p>2. 新增選課成功請求訂單服務產生支付二維碼接口。</p>\n<p>3. 產生二維碼接口：建立商品訂單、產生支付交易記錄、產生二維碼。</p>\n<p>4. 將二維碼返回前端，用戶掃碼。</p>\n<p>使用者掃碼支付流程如下：</p>\n<img data-src=\"/John/img/java/pay/alipay/6.png\" class=\"abc\">\n<p>1. 用戶輸入支付密碼，付款成功。</p>\n<p>2、接收第三方平台通知的付款結果。</p>\n<p>3、根據支付結果更新支付交易記錄的支付狀態為支付成功。</p>\n<h2 id=\"數據模型\"><a class=\"markdownIt-Anchor\" href=\"#數據模型\">#</a> 數據模型</h2>\n<p>訂單支付模式的核心由三張表組成：訂單表、訂單明細表、支付交易記錄表。</p>\n<img data-src=\"/John/img/java/pay/alipay/7.png\" class=\"abc\">\n<p>訂單號碼注意唯一性、安全性、盡量短等特點，生成方案常用的如下：</p>\n<p>1. 時間戳 + 隨機數</p>\n<p>年月日時分秒毫秒 + 隨機數</p>\n<p>2、高並發場景</p>\n<p>年月日時分秒毫秒 + 隨機數 + redis 自增序列</p>\n<p>3. 訂單號碼中加上業務標識</p>\n<p>訂單號碼加上業務識別方便客服，例如：第 10 位是業務類型，第 11 位是使用者類型等。</p>\n<p>4、雪花演算法</p>\n<p>雪花演算法是推特內部使用的分散式環境下的唯一 ID 生成演算法，它基於時間戳生成，保證有序遞增，加以入電腦硬體等元素，可以滿足高並發環境下 ID 不重複。<br>\n本項目訂單編號產生採用雪花演算法。</p>\n<p>本專案訂單號碼產生策略採用雪花演算法，導入黑馬提供的 IdWorkerUtils.java 到 base 工程的 utils 包下</p>\n<h2 id=\"接口定義\"><a class=\"markdownIt-Anchor\" href=\"#接口定義\">#</a> 接口定義</h2>\n<p>在訂單服務中定義產生支付二維碼接口。</p>\n<p>請求：訂單訊息</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span> </span><br><span class=\"line\"><span class=\"meta\">@ToString</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AddOrderDto</span>  &#123; </span><br><span class=\"line\">    <span class=\"comment\">//总价 </span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Float totalPrice; </span><br><span class=\"line\">    <span class=\"comment\">//订单类型 </span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String orderType; </span><br><span class=\"line\">    <span class=\"comment\">//订单名称 </span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String orderName; </span><br><span class=\"line\">    <span class=\"comment\">//订单描述 </span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String orderDescrip; </span><br><span class=\"line\">    <span class=\"comment\">// 订单明细json，不可为空 </span></span><br><span class=\"line\">    <span class=\"comment\">//[&#123;&quot;goodsId&quot;:&quot;&quot;,&quot;goodsType&quot;:&quot;&quot;,&quot;goodsName&quot;:&quot;&quot;,&quot;goodsPrice&quot;:&quot;&quot;,&quot;goodsDetail&quot;:&quot;&quot;&#125;,&#123;...&#125;] </span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String orderDetail; </span><br><span class=\"line\">    <span class=\"comment\">//外部系统业务id </span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String outBusinessId; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>響應：支付交易記錄資訊及二維碼訊息</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span> </span><br><span class=\"line\"><span class=\"meta\">@ToString</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PayRecordDto</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">XcPayRecord</span> &#123; </span><br><span class=\"line\">    <span class=\"comment\">//二维码 </span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String qrcode; </span><br><span class=\"line\"> </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>接口定義如下</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Api(value = &quot;订单支付接口&quot;, tags = &quot;订单支付接口&quot;)</span> </span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span> </span><br><span class=\"line\"><span class=\"meta\">@Controller</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OrderController</span> &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation(&quot;生成支付二维码&quot;)</span> </span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/generatepaycode&quot;)</span> </span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> PayRecordDto <span class=\"title function_\">generatePayCode</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> AddOrderDto addOrderDto)</span> &#123; </span><br><span class=\"line\">         </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>用户扫码请求下单，定义下单接口如下：</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ApiOperation(&quot;扫码下单接口&quot;)</span> </span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/requestpay&quot;)</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">requestpay</span><span class=\"params\">(String payNo,HttpServletResponse httpResponse)</span> <span class=\"keyword\">throws</span> IOException &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h2 id=\"接口實現\"><a class=\"markdownIt-Anchor\" href=\"#接口實現\">#</a> 接口實現</h2>\n<p>在前面的分析中，產生支付二維碼操作，其中包含了三個小操作<br>\n1️⃣插入訂單訊息<br>\n2️⃣插入付款記錄<br>\n3️⃣產生二維碼返回<br>\n下邊要做的就是實現這三個接口</p>\n<p>定義保存訂單資訊接口</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">OrderService</span> &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span> 创建商品订单 </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> addOrderDto 订单信息 </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> PayRecordDto 支付交易记录(包括二维码) </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Mr.M </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2022/10/4 11:02 </span></span><br><span class=\"line\"><span class=\"comment\">*/</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> PayRecordDto <span class=\"title function_\">createOrder</span><span class=\"params\">(String userId,AddOrderDto addOrderDto)</span>; </span><br></pre></td></tr></table></figure>\n<p>在保存訂單接口中需要完成建立商品訂單、建立支付交易記錄，接口實作方法如下：</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span> </span><br><span class=\"line\"><span class=\"meta\">@Service</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OrderServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OrderService</span> &#123; </span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span> </span><br><span class=\"line\">    XcOrdersMapper ordersMapper; </span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span> </span><br><span class=\"line\">    XcOrdersGoodsMapper ordersGoodsMapper; </span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span> </span><br><span class=\"line\">    XcPayRecordMapper payRecordMapper; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Transactional</span> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> PayRecordDto <span class=\"title function_\">createOrder</span><span class=\"params\">(String userId, AddOrderDto addOrderDto)</span> &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">//添加商品订单 </span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">//添加支付交易记录 </span></span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"comment\">//生成二维码 </span></span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>編寫建立商品訂單方法，商品訂單的資料來自選課記錄，在訂單表需要存入選課記錄的 ID，這裡需要作好冪等處理。</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Transactional</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> XcOrders <span class=\"title function_\">saveOrders</span><span class=\"params\">(String userId, AddOrderDto addOrderDto)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 幂等性判断</span></span><br><span class=\"line\">    <span class=\"type\">XcOrders</span> <span class=\"variable\">order</span> <span class=\"operator\">=</span> getOrderByBusinessId(addOrderDto.getOutBusinessId());</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (order != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> order;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 2. 插入订单表</span></span><br><span class=\"line\">    order = <span class=\"keyword\">new</span> <span class=\"title class_\">XcOrders</span>();</span><br><span class=\"line\">    BeanUtils.copyProperties(addOrderDto, order);</span><br><span class=\"line\">    order.setId(IdWorkerUtils.getInstance().nextId());</span><br><span class=\"line\">    order.setCreateDate(LocalDateTime.now());</span><br><span class=\"line\">    order.setUserId(userId);</span><br><span class=\"line\">    order.setStatus(<span class=\"string\">&quot;600001&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">insert</span> <span class=\"operator\">=</span> xcOrdersMapper.insert(order);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (insert &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        XueChengPlusException.cast(<span class=\"string\">&quot;插入订单记录失败&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 3. 插入订单明细表</span></span><br><span class=\"line\">    <span class=\"type\">Long</span> <span class=\"variable\">orderId</span> <span class=\"operator\">=</span> order.getId();</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">orderDetail</span> <span class=\"operator\">=</span> addOrderDto.getOrderDetail();</span><br><span class=\"line\">    List&lt;XcOrdersGoods&gt; xcOrdersGoodsList = JSON.parseArray(orderDetail, XcOrdersGoods.class);</span><br><span class=\"line\">    xcOrdersGoodsList.forEach(goods -&gt; &#123;</span><br><span class=\"line\">        goods.setOrderId(orderId);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">insert1</span> <span class=\"operator\">=</span> xcOrdersGoodsMapper.insert(goods);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (insert1 &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            XueChengPlusException.cast(<span class=\"string\">&quot;插入订单明细失败&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> order;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//根据业务id查询订单 </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> XcOrders <span class=\"title function_\">getOrderByBusinessId</span><span class=\"params\">(String businessId)</span> &#123; </span><br><span class=\"line\">    <span class=\"type\">XcOrders</span> <span class=\"variable\">orders</span> <span class=\"operator\">=</span> ordersMapper.selectOne(<span class=\"keyword\">new</span> <span class=\"title class_\">LambdaQueryWrapper</span>&lt;XcOrders&gt;().eq(XcOrders::getOutBusinessId, businessId)); </span><br><span class=\"line\">    <span class=\"keyword\">return</span> orders; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"建立支付交易記錄\"><a class=\"markdownIt-Anchor\" href=\"#建立支付交易記錄\">#</a> 建立支付交易記錄</h2>\n<p><span class=\"red\">為什麼要創建支付交易記錄？</span></p>\n<blockquote><p>在請求微信或支付寶下單接口時需要傳入商品訂單號，在與第三方支付平台對接時發現，當用戶支付失敗或因為其它原因最終該訂單沒有支付成功，此時再次調用第三方支付平台的 下單接口發現報錯 “訂單號碼已存在”，此時如果我們傳入一個沒有使用過的訂單號碼就可以解決問題，但是商品訂單已經創建，因為沒有支付成功重新創建一個新訂單是不合理的。</p>\n<p>解決以上問題的方案是：</p>\n<p>1、用戶每次發起都建立一個新的支付交易記錄 ，此交易記錄與商品訂單關聯。</p>\n<p>2、將支付交易記錄的流水號傳給第三方支付系統下單接口，這樣就即使沒有支付成功就不會出現上邊的問題。</p>\n<p>3、需要提醒用戶不要重複付款。</p>\n</blockquote>\n<p>編寫建立支付交易記錄的方法：</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> XcPayRecord <span class=\"title function_\">createPayRecord</span><span class=\"params\">(XcOrders orders)</span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(order==<span class=\"literal\">null</span>)&#123; </span><br><span class=\"line\">       XueChengPlusException.cast(<span class=\"string\">&quot;订单不存在&quot;</span>); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(orders.getStatus().equals(<span class=\"string\">&quot;600002&quot;</span>))&#123; </span><br><span class=\"line\">        XueChengPlusException.cast(<span class=\"string\">&quot;订单已支付&quot;</span>); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"type\">XcPayRecord</span> <span class=\"variable\">payRecord</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">XcPayRecord</span>(); </span><br><span class=\"line\">    <span class=\"comment\">//生成支付交易流水号 </span></span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">payNo</span> <span class=\"operator\">=</span> IdWorkerUtils.getInstance().nextId(); </span><br><span class=\"line\">    payRecord.setPayNo(payNo); </span><br><span class=\"line\">    payRecord.setOrderId(orders.getId());<span class=\"comment\">//商品订单号 </span></span><br><span class=\"line\">    payRecord.setOrderName(orders.getOrderName()); </span><br><span class=\"line\">    payRecord.setTotalPrice(orders.getTotalPrice()); </span><br><span class=\"line\">    payRecord.setCurrency(<span class=\"string\">&quot;CNY&quot;</span>); </span><br><span class=\"line\">    payRecord.setCreateDate(LocalDateTime.now()); </span><br><span class=\"line\">    payRecord.setStatus(<span class=\"string\">&quot;601001&quot;</span>);<span class=\"comment\">//未支付 </span></span><br><span class=\"line\">    payRecord.setUserId(orders.getUserId()); </span><br><span class=\"line\">    payRecordMapper.insert(payRecord); </span><br><span class=\"line\">    <span class=\"keyword\">return</span> payRecord; </span><br><span class=\"line\"> </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h2 id=\"產成支付二維碼\"><a class=\"markdownIt-Anchor\" href=\"#產成支付二維碼\">#</a> 產成支付二維碼</h2>\n<p>1、在 nacos 中 orders-service-dev.yaml 配置二維碼的 url</p>\n<figure class=\"highlight yaml\"><figcaption><span>YAML</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">pay:</span> </span><br><span class=\"line\"> <span class=\"attr\">qrcodeurl:</span> <span class=\"string\">http://192.168.101.1/api/orders/requestpay?payNo=%s</span> </span><br></pre></td></tr></table></figure>\n<p>2、用 format 拼接支付 URL, 完善建立訂單 service 方法:</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Value(&quot;$&#123;pay.qrcodeurl&#125;&quot;)</span> </span><br><span class=\"line\">String qrcodeurl; </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@Transactional</span> </span><br><span class=\"line\"><span class=\"meta\">@Override</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> PayRecordDto <span class=\"title function_\">createOrder</span><span class=\"params\">(String userId, AddOrderDto addOrderDto)</span> &#123; </span><br><span class=\"line\">    <span class=\"comment\">//创建商品订单 </span></span><br><span class=\"line\">    <span class=\"type\">XcOrders</span> <span class=\"variable\">orders</span> <span class=\"operator\">=</span> saveXcOrders(userId, addOrderDto); </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(orders==<span class=\"literal\">null</span>)&#123; </span><br><span class=\"line\">        XueChengPlusException.cast(<span class=\"string\">&quot;订单创建失败&quot;</span>); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(orders.getStatus().equals(<span class=\"string\">&quot;600002&quot;</span>))&#123; </span><br><span class=\"line\">        XueChengPlusException.cast(<span class=\"string\">&quot;订单已支付&quot;</span>); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"comment\">//生成支付记录 </span></span><br><span class=\"line\">    <span class=\"type\">XcPayRecord</span> <span class=\"variable\">payRecord</span> <span class=\"operator\">=</span> createPayRecord(orders); </span><br><span class=\"line\">    <span class=\"comment\">//生成二维码 </span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">qrCode</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>; </span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123; </span><br><span class=\"line\">        <span class=\"comment\">//url要可以被模拟器访问到，url为下单接口(稍后定义) </span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> String.format(qrcodeurl, payRecord.getPayNo()); </span><br><span class=\"line\">        qrCode = <span class=\"keyword\">new</span> <span class=\"title class_\">QRCodeUtil</span>().createQRCode(url, <span class=\"number\">200</span>, <span class=\"number\">200</span>); </span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123; </span><br><span class=\"line\">        XueChengPlusException.cast(<span class=\"string\">&quot;生成二维码出错&quot;</span>); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"type\">PayRecordDto</span> <span class=\"variable\">payRecordDto</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PayRecordDto</span>(); </span><br><span class=\"line\">    BeanUtils.copyProperties(payRecord,payRecordDto); </span><br><span class=\"line\">    payRecordDto.setQrcode(qrCode); </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> payRecordDto; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h2 id=\"生成二維碼接口完善\"><a class=\"markdownIt-Anchor\" href=\"#生成二維碼接口完善\">#</a> 生成二維碼接口完善</h2>\n<p>完善生成支付二维码 controller 接口</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span> </span><br><span class=\"line\">OrderService orderService; </span><br><span class=\"line\">     </span><br><span class=\"line\"><span class=\"meta\">@ApiOperation(&quot;生成支付二维码&quot;)</span> </span><br><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;/generatepaycode&quot;)</span> </span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> PayRecordDto <span class=\"title function_\">generatePayCode</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> AddOrderDto addOrderDto)</span> &#123; </span><br><span class=\"line\">    <span class=\"comment\">//登录用户 </span></span><br><span class=\"line\">    SecurityUtil.<span class=\"type\">XcUser</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> SecurityUtil.getUser(); </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(user == <span class=\"literal\">null</span>)&#123; </span><br><span class=\"line\">        XueChengPlusException.cast(<span class=\"string\">&quot;请登录后继续选课&quot;</span>); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">   <span class=\"keyword\">return</span> orderService.createOrder(user.getId(), addOrderDto); </span><br><span class=\"line\">    </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>成了支付二維碼，用戶掃碼請求第三方支付平台下單、付款。</p>\n<p>1. 定義查詢支付交易記錄的 Service 接口與實作方法</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> XcPayRecord <span class=\"title function_\">getPayRecordByPayno</span><span class=\"params\">(String payNo)</span>; </span><br></pre></td></tr></table></figure>\n<p>實現如下：</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> XcPayRecord <span class=\"title function_\">getPayRecordByPayno</span><span class=\"params\">(String payNo)</span> &#123; </span><br><span class=\"line\">    <span class=\"type\">XcPayRecord</span> <span class=\"variable\">xcPayRecord</span> <span class=\"operator\">=</span> payRecordMapper.selectOne(<span class=\"keyword\">new</span> <span class=\"title class_\">LambdaQueryWrapper</span>&lt;XcPayRecord&gt;().eq(XcPayRecord::getPayNo, payNo)); </span><br><span class=\"line\">    <span class=\"keyword\">return</span> xcPayRecord; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>2 定義下單接口如下：</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Value(&quot;$&#123;pay.alipay.APP_ID&#125;&quot;)</span> </span><br><span class=\"line\">String APP_ID; </span><br><span class=\"line\"><span class=\"meta\">@Value(&quot;$&#123;pay.alipay.APP_PRIVATE_KEY&#125;&quot;)</span> </span><br><span class=\"line\">String APP_PRIVATE_KEY; </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@Value(&quot;$&#123;pay.alipay.ALIPAY_PUBLIC_KEY&#125;&quot;)</span> </span><br><span class=\"line\">String ALIPAY_PUBLIC_KEY; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation(&quot;扫码下单接口&quot;)</span> </span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/requestpay&quot;)</span> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">requestpay</span><span class=\"params\">(String payNo,HttpServletResponse httpResponse)</span> <span class=\"keyword\">throws</span> IOException &#123; </span><br><span class=\"line\">        <span class=\"comment\">//如果payNo不存在则提示重新发起支付 </span></span><br><span class=\"line\">        <span class=\"type\">XcPayRecord</span> <span class=\"variable\">payRecord</span> <span class=\"operator\">=</span> orderService.getPayRecordByPayno(payNo); </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(payRecord == <span class=\"literal\">null</span>)&#123; </span><br><span class=\"line\">            XueChengPlusException.cast(<span class=\"string\">&quot;请重新点击支付获取二维码&quot;</span>); </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"comment\">//支付状态 </span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">status</span> <span class=\"operator\">=</span> payRecord.getStatus(); </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"string\">&quot;601002&quot;</span>.equals(status))&#123; </span><br><span class=\"line\">            XueChengPlusException.cast(<span class=\"string\">&quot;订单已支付，请勿重复支付。&quot;</span>); </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"comment\">//构造sdk的客户端对象 </span></span><br><span class=\"line\">        <span class=\"type\">AlipayClient</span> <span class=\"variable\">client</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultAlipayClient</span>(AlipayConfig.URL, APP_ID, APP_PRIVATE_KEY, AlipayConfig.FORMAT, AlipayConfig.CHARSET, ALIPAY_PUBLIC_KEY, AlipayConfig.SIGNTYPE);<span class=\"comment\">//获得初始化的AlipayClient </span></span><br><span class=\"line\">        <span class=\"type\">AlipayTradeWapPayRequest</span> <span class=\"variable\">alipayRequest</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AlipayTradeWapPayRequest</span>();<span class=\"comment\">//创建API对应的request </span></span><br><span class=\"line\"><span class=\"comment\">//        alipayRequest.setReturnUrl(&quot;http://domain.com/CallBack/return_url.jsp&quot;); </span></span><br><span class=\"line\"><span class=\"comment\">//        alipayRequest.setNotifyUrl(&quot;http://tjxt-user-t.itheima.net/xuecheng/orders/paynotify&quot;);//在公共参数中设置回跳和通知地址 </span></span><br><span class=\"line\">        alipayRequest.setBizContent(<span class=\"string\">&quot;&#123;&quot;</span> + </span><br><span class=\"line\">                <span class=\"string\">&quot; \\&quot;out_trade_no\\&quot;:\\&quot;&quot;</span>+payRecord.getPayNo()+<span class=\"string\">&quot;\\&quot;,&quot;</span> + </span><br><span class=\"line\">                <span class=\"string\">&quot; \\&quot;total_amount\\&quot;:\\&quot;&quot;</span>+payRecord.getTotalPrice()+<span class=\"string\">&quot;\\&quot;,&quot;</span> + </span><br><span class=\"line\">                <span class=\"string\">&quot; \\&quot;subject\\&quot;:\\&quot;&quot;</span>+payRecord.getOrderName()+<span class=\"string\">&quot;\\&quot;,&quot;</span> + </span><br><span class=\"line\">                <span class=\"string\">&quot; \\&quot;product_code\\&quot;:\\&quot;QUICK_WAP_PAY\\&quot;&quot;</span> + </span><br><span class=\"line\">                <span class=\"string\">&quot; &#125;&quot;</span>);<span class=\"comment\">//填充业务参数 </span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">form</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>; </span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123; </span><br><span class=\"line\">            <span class=\"comment\">//请求支付宝下单接口,发起http请求 </span></span><br><span class=\"line\">            form = client.pageExecute(alipayRequest).getBody(); <span class=\"comment\">//调用SDK生成表单 </span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (AlipayApiException e) &#123; </span><br><span class=\"line\">            e.printStackTrace(); </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        httpResponse.setContentType(<span class=\"string\">&quot;text/html;charset=&quot;</span> + AlipayConfig.CHARSET); </span><br><span class=\"line\">        httpResponse.getWriter().write(form);<span class=\"comment\">//直接将完整的表单html输出到页面 </span></span><br><span class=\"line\">        httpResponse.getWriter().flush(); </span><br><span class=\"line\">        httpResponse.getWriter().close(); </span><br><span class=\"line\">    &#125; </span><br></pre></td></tr></table></figure>\n<p>支付測試<br>\n測試準備：</p>\n<p>1、啟動網關服務、認證服務、驗證碼服務、學習中心服務、訂單服務、內容管理服務。</p>\n<p>2、發布一門收費課程。</p>\n<p>3. 使用資料目錄中的新模板 course_template.ftl</p>\n<p>測試流程：</p>\n<p>1. 進入收費課程詳細頁面，點選馬上學習。</p>\n<p>2. 追蹤瀏覽器及微服務，觀察選課記錄是否創建成功、商品訂單是否創建成功、支付交易記錄是否創建成功。</p>\n<p>3. 觀察產生二維碼是否成功</p>\n<p>4. 使用模擬器掃碼測試，是否可以正常付款。</p>\n<h2 id=\"查詢付款結果\"><a class=\"markdownIt-Anchor\" href=\"#查詢付款結果\">#</a> 查詢付款結果</h2>\n<p>接口定义:</p>\n<p>根據前邊我們調查的獲取支付結果的接口，包括：主動查詢支付結果、被動接收支付結果。<br>\n這裡先實現主動查詢支付結果，當支付完成用戶點擊「支付結果」將請求第三方支付平台查詢支付結果。<br>\n在 OrderController 類別中定義接口如下：</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ApiOperation(&quot;查询支付结果&quot;)</span> </span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/payresult&quot;)</span> </span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> PayRecordDto <span class=\"title function_\">payresult</span><span class=\"params\">(String payNo)</span> <span class=\"keyword\">throws</span> IOException &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//查询支付结果 </span></span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>; </span><br><span class=\"line\"> </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>1、定義查詢支付結果的 service</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * 请求支付宝查询支付结果 </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> payNo 支付记录id </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 支付记录信息 </span></span><br><span class=\"line\"><span class=\"comment\"> */</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> PayRecordDto <span class=\"title function_\">queryPayResult</span><span class=\"params\">(String payNo)</span>; </span><br></pre></td></tr></table></figure>\n<p>2、service 实现如下：</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> PayRecordDto <span class=\"title function_\">queryPayResult</span><span class=\"params\">(String payNo)</span>&#123; </span><br><span class=\"line\">    <span class=\"type\">XcPayRecord</span> <span class=\"variable\">payRecord</span> <span class=\"operator\">=</span> getPayRecordByPayno(payNo); </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (payRecord == <span class=\"literal\">null</span>) &#123; </span><br><span class=\"line\">        XueChengPlusException.cast(<span class=\"string\">&quot;请重新点击支付获取二维码&quot;</span>); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"comment\">//支付状态 </span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">status</span> <span class=\"operator\">=</span> payRecord.getStatus(); </span><br><span class=\"line\">    <span class=\"comment\">//如果支付成功直接返回 </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">&quot;601002&quot;</span>.equals(status)) &#123; </span><br><span class=\"line\">        <span class=\"type\">PayRecordDto</span> <span class=\"variable\">payRecordDto</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PayRecordDto</span>(); </span><br><span class=\"line\">        BeanUtils.copyProperties(payRecord, payRecordDto); </span><br><span class=\"line\">        <span class=\"keyword\">return</span> payRecordDto; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"comment\">//从支付宝查询支付结果 </span></span><br><span class=\"line\">    <span class=\"type\">PayStatusDto</span> <span class=\"variable\">payStatusDto</span> <span class=\"operator\">=</span> queryPayResultFromAlipay(payNo); </span><br><span class=\"line\">    <span class=\"comment\">//保存支付结果 </span></span><br><span class=\"line\">    currentProxy.saveAliPayStatus( payStatusDto); </span><br><span class=\"line\">    <span class=\"comment\">//重新查询支付记录 </span></span><br><span class=\"line\">    payRecord = getPayRecordByPayno(payNo); </span><br><span class=\"line\">    <span class=\"type\">PayRecordDto</span> <span class=\"variable\">payRecordDto</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PayRecordDto</span>(); </span><br><span class=\"line\">    BeanUtils.copyProperties(payRecord, payRecordDto); </span><br><span class=\"line\">    <span class=\"keyword\">return</span> payRecordDto; </span><br><span class=\"line\"> </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>定义从支付宝查询支付结果的方法</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> PayStatusDto <span class=\"title function_\">queryPayResultFromAlipay</span><span class=\"params\">(String payNo)</span> &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//========请求支付宝查询支付结果============= </span></span><br><span class=\"line\">    <span class=\"type\">AlipayClient</span> <span class=\"variable\">alipayClient</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultAlipayClient</span>(AlipayConfig.URL, APP_ID, APP_PRIVATE_KEY, <span class=\"string\">&quot;json&quot;</span>, AlipayConfig.CHARSET, ALIPAY_PUBLIC_KEY, AlipayConfig.SIGNTYPE); <span class=\"comment\">//获得初始化的AlipayClient </span></span><br><span class=\"line\">    <span class=\"type\">AlipayTradeQueryRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AlipayTradeQueryRequest</span>(); </span><br><span class=\"line\">    <span class=\"type\">JSONObject</span> <span class=\"variable\">bizContent</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JSONObject</span>(); </span><br><span class=\"line\">    bizContent.put(<span class=\"string\">&quot;out_trade_no&quot;</span>, payNo); </span><br><span class=\"line\">    request.setBizContent(bizContent.toString()); </span><br><span class=\"line\">    <span class=\"type\">AlipayTradeQueryResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>; </span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123; </span><br><span class=\"line\">        response = alipayClient.execute(request); </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!response.isSuccess()) &#123; </span><br><span class=\"line\">            XueChengPlusException.cast(<span class=\"string\">&quot;请求支付查询查询失败&quot;</span>); </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (AlipayApiException e) &#123; </span><br><span class=\"line\">        log.error(<span class=\"string\">&quot;请求支付宝查询支付结果异常:&#123;&#125;&quot;</span>, e.toString(), e); </span><br><span class=\"line\">        XueChengPlusException.cast(<span class=\"string\">&quot;请求支付查询查询失败&quot;</span>); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//获取支付结果 </span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">resultJson</span> <span class=\"operator\">=</span> response.getBody(); </span><br><span class=\"line\">    <span class=\"comment\">//转map </span></span><br><span class=\"line\">    <span class=\"type\">Map</span> <span class=\"variable\">resultMap</span> <span class=\"operator\">=</span> JSON.parseObject(resultJson, Map.class); </span><br><span class=\"line\">    <span class=\"type\">Map</span> <span class=\"variable\">alipay_trade_query_response</span> <span class=\"operator\">=</span> (Map) resultMap.get(<span class=\"string\">&quot;alipay_trade_query_response&quot;</span>); </span><br><span class=\"line\">    <span class=\"comment\">//支付结果 </span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">trade_status</span> <span class=\"operator\">=</span> (String) alipay_trade_query_response.get(<span class=\"string\">&quot;trade_status&quot;</span>); </span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">total_amount</span> <span class=\"operator\">=</span> (String) alipay_trade_query_response.get(<span class=\"string\">&quot;total_amount&quot;</span>); </span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">trade_no</span> <span class=\"operator\">=</span> (String) alipay_trade_query_response.get(<span class=\"string\">&quot;trade_no&quot;</span>); </span><br><span class=\"line\">    <span class=\"comment\">//保存支付结果 </span></span><br><span class=\"line\">    <span class=\"type\">PayStatusDto</span> <span class=\"variable\">payStatusDto</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PayStatusDto</span>(); </span><br><span class=\"line\">    payStatusDto.setOut_trade_no(payNo); </span><br><span class=\"line\">    payStatusDto.setTrade_status(trade_status); </span><br><span class=\"line\">    payStatusDto.setApp_id(APP_ID); </span><br><span class=\"line\">    payStatusDto.setTrade_no(trade_no); </span><br><span class=\"line\">    payStatusDto.setTotal_amount(total_amount); </span><br><span class=\"line\">    <span class=\"keyword\">return</span> payStatusDto; </span><br><span class=\"line\"> </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>1、定义保存支付结果的接口</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">saveAliPayStatus</span><span class=\"params\">(PayStatusDto payStatusDto)</span> ;</span><br></pre></td></tr></table></figure>\n<p>2、编写接口实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Transactional</span> </span><br><span class=\"line\"><span class=\"meta\">@Override</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">saveAliPayStatus</span><span class=\"params\">(PayStatusDto payStatusDto)</span> &#123; </span><br><span class=\"line\">    <span class=\"comment\">//支付流水号 </span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">payNo</span> <span class=\"operator\">=</span> payStatusDto.getOut_trade_no(); </span><br><span class=\"line\">    <span class=\"type\">XcPayRecord</span> <span class=\"variable\">payRecord</span> <span class=\"operator\">=</span> getPayRecordByPayno(payNo); </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (payRecord == <span class=\"literal\">null</span>) &#123; </span><br><span class=\"line\">        XueChengPlusException.cast(<span class=\"string\">&quot;支付记录找不到&quot;</span>); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"comment\">//支付结果 </span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">trade_status</span> <span class=\"operator\">=</span> payStatusDto.getTrade_status(); </span><br><span class=\"line\">    log.debug(<span class=\"string\">&quot;收到支付结果:&#123;&#125;,支付记录:&#123;&#125;&#125;&quot;</span>, payStatusDto.toString(),payRecord.toString()); </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (trade_status.equals(<span class=\"string\">&quot;TRADE_SUCCESS&quot;</span>)) &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">//支付金额变为分 </span></span><br><span class=\"line\">        <span class=\"type\">Float</span> <span class=\"variable\">totalPrice</span> <span class=\"operator\">=</span> payRecord.getTotalPrice() * <span class=\"number\">100</span>; </span><br><span class=\"line\">        <span class=\"type\">Float</span> <span class=\"variable\">total_amount</span> <span class=\"operator\">=</span> Float.parseFloat(payStatusDto.getTotal_amount()) * <span class=\"number\">100</span>; </span><br><span class=\"line\">        <span class=\"comment\">//校验是否一致 </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!payStatusDto.getApp_id().equals(APP_ID) || totalPrice.intValue() != total_amount.intValue()) &#123; </span><br><span class=\"line\">            <span class=\"comment\">//校验失败 </span></span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;校验支付结果失败,支付记录:&#123;&#125;,APP_ID:&#123;&#125;,totalPrice:&#123;&#125;&quot;</span> ,payRecord.toString(),payStatusDto.getApp_id(),total_amount.intValue()); </span><br><span class=\"line\">            XueChengPlusException.cast(<span class=\"string\">&quot;校验支付结果失败&quot;</span>); </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;更新支付结果,支付交易流水号:&#123;&#125;,支付结果:&#123;&#125;&quot;</span>, payNo, trade_status); </span><br><span class=\"line\">        <span class=\"type\">XcPayRecord</span> <span class=\"variable\">payRecord_u</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">XcPayRecord</span>(); </span><br><span class=\"line\">        payRecord_u.setStatus(<span class=\"string\">&quot;601002&quot;</span>);<span class=\"comment\">//支付成功 </span></span><br><span class=\"line\">        payRecord_u.setOutPayChannel(<span class=\"string\">&quot;Alipay&quot;</span>); </span><br><span class=\"line\">        payRecord_u.setOutPayNo(payStatusDto.getTrade_no());<span class=\"comment\">//支付宝交易号 </span></span><br><span class=\"line\">        payRecord_u.setPaySuccessTime(LocalDateTime.now());<span class=\"comment\">//通知时间 </span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">update1</span> <span class=\"operator\">=</span> payRecordMapper.update(payRecord_u, <span class=\"keyword\">new</span> <span class=\"title class_\">LambdaQueryWrapper</span>&lt;XcPayRecord&gt;().eq(XcPayRecord::getPayNo, payNo)); </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (update1 &gt; <span class=\"number\">0</span>) &#123; </span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;更新支付记录状态成功:&#123;&#125;&quot;</span>, payRecord_u.toString()); </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;更新支付记录状态失败:&#123;&#125;&quot;</span>, payRecord_u.toString()); </span><br><span class=\"line\">            XueChengPlusException.cast(<span class=\"string\">&quot;更新支付记录状态失败&quot;</span>); </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"comment\">//关联的订单号 </span></span><br><span class=\"line\">        <span class=\"type\">Long</span> <span class=\"variable\">orderId</span> <span class=\"operator\">=</span> payRecord.getOrderId(); </span><br><span class=\"line\">        <span class=\"type\">XcOrders</span> <span class=\"variable\">orders</span> <span class=\"operator\">=</span> ordersMapper.selectById(orderId); </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (orders == <span class=\"literal\">null</span>) &#123; </span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;根据支付记录[&#123;&#125;&#125;]找不到订单&quot;</span>, payRecord_u.toString()); </span><br><span class=\"line\">            XueChengPlusException.cast(<span class=\"string\">&quot;根据支付记录找不到订单&quot;</span>); </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"type\">XcOrders</span> <span class=\"variable\">order_u</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">XcOrders</span>(); </span><br><span class=\"line\">        order_u.setStatus(<span class=\"string\">&quot;600002&quot;</span>);<span class=\"comment\">//支付成功 </span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">update</span> <span class=\"operator\">=</span> ordersMapper.update(order_u, <span class=\"keyword\">new</span> <span class=\"title class_\">LambdaQueryWrapper</span>&lt;XcOrders&gt;().eq(XcOrders::getId, orderId)); </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (update &gt; <span class=\"number\">0</span>) &#123; </span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;更新订单表状态成功,订单号:&#123;&#125;&quot;</span>, orderId); </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;更新订单表状态失败,订单号:&#123;&#125;&quot;</span>, orderId); </span><br><span class=\"line\">            XueChengPlusException.cast(<span class=\"string\">&quot;更新订单表状态失败&quot;</span>); </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h1 id=\"接口測試-2\"><a class=\"markdownIt-Anchor\" href=\"#接口測試-2\">#</a> 接口測試</h1>\n<p>1、完善接口</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ApiOperation(&quot;查询支付结果&quot;)</span> </span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/payresult&quot;)</span> </span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> PayRecordDto <span class=\"title function_\">payresult</span><span class=\"params\">(String payNo)</span> <span class=\"keyword\">throws</span> IOException &#123; </span><br><span class=\"line\">    <span class=\"comment\">//调用支付宝接口查询 </span></span><br><span class=\"line\">    <span class=\"type\">PayRecordDto</span> <span class=\"variable\">payRecordDto</span> <span class=\"operator\">=</span> orderService.queryPayResult(payNo); </span><br><span class=\"line\">    <span class=\"keyword\">return</span> payRecordDto; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>導入黑馬提供的 LocalDateTimeConfig.java 到 base 工程的 config 包下，用於處理前端 Long 精度遺失的問題，然後使用前後端聯調</p>\n<h2 id=\"接收支付通知\"><a class=\"markdownIt-Anchor\" href=\"#接收支付通知\">#</a> 接收支付通知</h2>\n<p>接口定义<br>\n支付完成后第三方支付系统会主动通知支付结果，要实现主动通知需要在请求支付系统下单时传入 NotifyUrl，这里有两个 url：NotifyUrl 和 ReturnUrl，ReturnUrl 是支付完成后支付系统携带支付结果重定向到 ReturnUrl 地址，NotifyUrl 是支付完成后支付系统在后台定时去通知，使用 NotifyUrl 比使用 ReturnUrl 有保证。</p>\n<p>根据接口描述：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9vcGVuZG9jcy5hbGlwYXkuY29tL29wZW4vMjAzLzEwNTI4NiVFNyU5QSU4NCVFNSU4NiU4NSVFNSVBRSVCOSVFNCVCOCU4QiVFOCVCRSVCOSVFNSU5QyVBOCVFOCVBRSVBMiVFNSU4RCU5NSVFNiU5QyU4RCVFNSU4QSVBMSVFNSVBRSU5QSVFNCVCOSU4OSVFNiU4RSVBNSVFNiU5NCVCNiVFNiU5NCVBRiVFNCVCQiU5OCVFNyVCQiU5MyVFNiU5RSU5QyVFOSU4MCU5QSVFNyU5RiVBNSVFNyU5QSU4NCVFNiU4RSVBNSVFNSU4RiVBMyVFMyU4MCU4Mg==\">https://opendocs.alipay.com/open/203/105286 的内容下边在订单服务定义接收支付结果通知的接口。</span></p>\n<p>首先在下单时指定 NotifyUrl:</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alipayRequest.setNotifyUrl(<span class=\"string\">&quot;http://tjxt-user-t.itheima.net/xuecheng/orders/receivenotify&quot;</span>); </span><br></pre></td></tr></table></figure>\n<p>接收支付结果通知接口如下：</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ApiOperation(&quot;接收支付结果通知&quot;)</span> </span><br><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;/receivenotify&quot;)</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">receivenotify</span><span class=\"params\">(HttpServletRequest request)</span> <span class=\"keyword\">throws</span> UnsupportedEncodingException, AlipayApiException &#123; </span><br><span class=\"line\">    Map&lt;String,String&gt; params = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;String,String&gt;(); </span><br><span class=\"line\">    <span class=\"type\">Map</span> <span class=\"variable\">requestParams</span> <span class=\"operator\">=</span> request.getParameterMap(); </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">Iterator</span> <span class=\"variable\">iter</span> <span class=\"operator\">=</span> requestParams.keySet().iterator(); iter.hasNext();) &#123; </span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> (String) iter.next(); </span><br><span class=\"line\">        String[] values = (String[]) requestParams.get(name); </span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">valueStr</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>; </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; values.length; i++) &#123; </span><br><span class=\"line\">            valueStr = (i == values.length - <span class=\"number\">1</span>) ? valueStr + values[i] </span><br><span class=\"line\">                    : valueStr + values[i] + <span class=\"string\">&quot;,&quot;</span>; </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        params.put(name, valueStr); </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"comment\">//验签 </span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">verify_result</span> <span class=\"operator\">=</span> AlipaySignature.rsaCheckV1(params, ALIPAY_PUBLIC_KEY, AlipayConfig.CHARSET, <span class=\"string\">&quot;RSA2&quot;</span>);  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(verify_result) &#123;<span class=\"comment\">//验证成功 </span></span><br><span class=\"line\">        <span class=\"comment\">//商户订单号 </span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">out_trade_no</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(request.getParameter(<span class=\"string\">&quot;out_trade_no&quot;</span>).getBytes(<span class=\"string\">&quot;ISO-8859-1&quot;</span>),<span class=\"string\">&quot;UTF-8&quot;</span>); </span><br><span class=\"line\">        <span class=\"comment\">//支付宝交易号 </span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">trade_no</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(request.getParameter(<span class=\"string\">&quot;trade_no&quot;</span>).getBytes(<span class=\"string\">&quot;ISO-8859-1&quot;</span>),<span class=\"string\">&quot;UTF-8&quot;</span>); </span><br><span class=\"line\">        <span class=\"comment\">//交易状态 </span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">trade_status</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(request.getParameter(<span class=\"string\">&quot;trade_status&quot;</span>).getBytes(<span class=\"string\">&quot;ISO-8859-1&quot;</span>),<span class=\"string\">&quot;UTF-8&quot;</span>); </span><br><span class=\"line\">        <span class=\"comment\">//appid </span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">app_id</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(request.getParameter(<span class=\"string\">&quot;app_id&quot;</span>).getBytes(<span class=\"string\">&quot;ISO-8859-1&quot;</span>),<span class=\"string\">&quot;UTF-8&quot;</span>); </span><br><span class=\"line\">        <span class=\"comment\">//total_amount </span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">total_amount</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(request.getParameter(<span class=\"string\">&quot;total_amount&quot;</span>).getBytes(<span class=\"string\">&quot;ISO-8859-1&quot;</span>),<span class=\"string\">&quot;UTF-8&quot;</span>);  </span><br><span class=\"line\">        <span class=\"comment\">//交易成功处理 </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (trade_status.equals(<span class=\"string\">&quot;TRADE_SUCCESS&quot;</span>)) &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"type\">PayStatusDto</span> <span class=\"variable\">payStatusDto</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PayStatusDto</span>(); </span><br><span class=\"line\">            payStatusDto.setOut_trade_no(out_trade_no); </span><br><span class=\"line\">            payStatusDto.setTrade_status(trade_status); </span><br><span class=\"line\">            payStatusDto.setApp_id(app_id); </span><br><span class=\"line\">            payStatusDto.setTrade_no(trade_no); </span><br><span class=\"line\">            payStatusDto.setTotal_amount(total_amount); </span><br><span class=\"line\">           <span class=\"comment\">//处理逻辑。。。 </span></span><br><span class=\"line\">            orderService.saveAliPayStatus(payStatusDto); </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>接口测试:</p>\n<p>1、启动网关服务、认证服务、验证码服务、学习中心服务、内容管理服务。</p>\n<p>2、发布一门收费课程。</p>\n<p>测试流程：</p>\n<p>1、对选课进行支付</p>\n<p>2、支付成功跟踪 service 方法的日志，支付成功需要更新支付交易表记录的状态、通知时间、支付宝交易号、支付渠道 (Alipay)</p>\n<p>支付成功更新订单表的状态为空。</p>\n<h1 id=\"支付通知\"><a class=\"markdownIt-Anchor\" href=\"#支付通知\">#</a> 支付通知</h1>\n<p>訂單服務作為通用服務在訂單支付成功後需要將支付結果非同步通知給其它微服務。<br>\n下圖使用了訊息隊列完成支付結果通知：</p>\n<img data-src=\"/John/img/java/pay/alipay/8.png\" class=\"abc\">\n<p>學習中心服務：收費課程選課需支付，與訂單服務對接完成支付。</p>\n<p>學習資源服務：收費的學習資料需要購買後下載，與訂單服務對接完成付款。</p>\n<p>訂單服務完成付款後將付款結果發給每一個與訂單服務對接的微服務，訂單服務將訊息發給交換機，由交換機廣播訊息，每個訂閱訊息的微服務都可以接收到支付結果.</p>\n<p>微服務收到付款結果會根據訂單的類型去更新自己的業務資料。</p>\n<h2 id=\"技术方案\"><a class=\"markdownIt-Anchor\" href=\"#技术方案\">#</a> 技术方案</h2>\n<p>使用訊息隊列進行非同步通知需要保證訊息的可靠性，即生產端將訊息成功通知到消費端。<br>\n訊息從生產端發送到消費端經歷瞭如下過程：</p>\n<p>1、訊息發送到交換機</p>\n<p>2、訊息由交換器發送到隊列</p>\n<p>3. 訊息者收到訊息進行處理</p>\n<p>保證訊息的可靠性需要保證以上過程的可靠性，本專案使用 RabbitMQ 可以透過以下方面保證訊息的可靠性。</p>\n<p>1. 生產者確認機制</p>\n<p>發送訊息前使用資料庫事務將訊息保證到資料庫表中<br>\n成功傳送到交換器將訊息從資料庫中刪除</p>\n<p>2、mq 持久化</p>\n<p>mq 收到訊息進行持久化，當 mq 重啟即使訊息沒有消費完也不會遺失。<br>\n需要配置交換器持久化、隊列持久化、發送訊息時設定持久化。</p>\n<p>3. 消費者確認機制</p>\n<p>消費者消費成功自動發送 ack，否則重試消費。</p>\n<h2 id=\"訂單服務整合mq\"><a class=\"markdownIt-Anchor\" href=\"#訂單服務整合mq\">#</a> 訂單服務整合 MQ</h2>\n<p>1. 首先在訂單服務新增訊息隊列依賴</p>\n<figure class=\"highlight xml\"><figcaption><span>XML</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span> </span><br></pre></td></tr></table></figure>\n<p>2. 在 nacos 配置 rabbitmq-dev.yaml 為通用配置文件</p>\n<figure class=\"highlight yaml\"><figcaption><span>YAML</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span> </span><br><span class=\"line\">  <span class=\"attr\">rabbitmq:</span> </span><br><span class=\"line\">    <span class=\"attr\">host:</span> <span class=\"number\">192.168</span><span class=\"number\">.101</span><span class=\"number\">.65</span> </span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">5672</span> </span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">guest</span> </span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">guest</span> </span><br><span class=\"line\">    <span class=\"attr\">virtual-host:</span> <span class=\"string\">/</span> </span><br><span class=\"line\">    <span class=\"attr\">publisher-confirm-type:</span> <span class=\"string\">correlated</span> <span class=\"comment\">#correlated 异步回调，定义ConfirmCallback，MQ返回结果时会回调这个ConfirmCallback </span></span><br><span class=\"line\">    <span class=\"attr\">publisher-returns:</span> <span class=\"literal\">false</span> <span class=\"comment\">#开启publish-return功能，同样是基于callback机制，需要定义ReturnCallback </span></span><br><span class=\"line\">    <span class=\"attr\">template:</span> </span><br><span class=\"line\">      <span class=\"attr\">mandatory:</span> <span class=\"literal\">false</span> <span class=\"comment\">#定义消息路由失败时的策略。true，则调用ReturnCallback；false：则直接丢弃消息 </span></span><br><span class=\"line\">    <span class=\"attr\">listener:</span> </span><br><span class=\"line\">      <span class=\"attr\">simple:</span> </span><br><span class=\"line\">        <span class=\"attr\">acknowledge-mode:</span> <span class=\"string\">none</span> <span class=\"comment\">#出现异常时返回unack，消息回滚到mq；没有异常，返回ack ,manual:手动控制,none:丢弃消息，不回滚到mq </span></span><br><span class=\"line\">        <span class=\"attr\">retry:</span> </span><br><span class=\"line\">          <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span> <span class=\"comment\">#开启消费者失败重试 </span></span><br><span class=\"line\">          <span class=\"attr\">initial-interval:</span> <span class=\"string\">1000ms</span> <span class=\"comment\">#初识的失败等待时长为1秒 </span></span><br><span class=\"line\">          <span class=\"attr\">multiplier:</span> <span class=\"number\">1</span> <span class=\"comment\">#失败的等待时长倍数，下次等待时长 = multiplier * last-interval </span></span><br><span class=\"line\">          <span class=\"attr\">max-attempts:</span> <span class=\"number\">3</span> <span class=\"comment\">#最大重试次数 </span></span><br><span class=\"line\">          <span class=\"attr\">stateless:</span> <span class=\"literal\">true</span> <span class=\"comment\">#true无状态；false有状态。如果业务中包含事务，这里改为false </span></span><br></pre></td></tr></table></figure>\n<p>`3. 在訂單服務隊列工程引入 rabbitmq-dev.yaml 設定檔</p>\n<figure class=\"highlight yaml\"><figcaption><span>YAML</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">shared-configs:</span> </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">data-id:</span> <span class=\"string\">rabbitmq-$&#123;spring.profiles.active&#125;.yaml</span> </span><br><span class=\"line\">    <span class=\"attr\">group:</span> <span class=\"string\">xuecheng-plus-common</span> </span><br><span class=\"line\">    <span class=\"attr\">refresh:</span> <span class=\"literal\">true</span> </span><br></pre></td></tr></table></figure>\n<p>4. 在訂單服務 service 工程編寫 MQ 配置類，配置交換機</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span> </span><br><span class=\"line\"><span class=\"meta\">@Configuration</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PayNotifyConfig</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ApplicationContextAware</span> &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//交换机 </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">PAYNOTIFY_EXCHANGE_FANOUT</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;paynotify_exchange_fanout&quot;</span>; </span><br><span class=\"line\">    <span class=\"comment\">//支付结果通知消息类型 </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">MESSAGE_TYPE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;payresult_notify&quot;</span>; </span><br><span class=\"line\">    <span class=\"comment\">//支付通知隊列 </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">PAYNOTIFY_QUEUE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;paynotify_queue&quot;</span>; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//声明交换机，且持久化 </span></span><br><span class=\"line\">    <span class=\"meta\">@Bean(PAYNOTIFY_EXCHANGE_FANOUT)</span> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> FanoutExchange <span class=\"title function_\">paynotify_exchange_fanout</span><span class=\"params\">()</span> &#123; </span><br><span class=\"line\">        <span class=\"comment\">// 三个参数：交换机名称、是否持久化、当没有queue与其绑定时是否自动删除 </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FanoutExchange</span>(PAYNOTIFY_EXCHANGE_FANOUT, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"comment\">//支付通知隊列,且持久化 </span></span><br><span class=\"line\">    <span class=\"meta\">@Bean(PAYNOTIFY_QUEUE)</span> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Queue <span class=\"title function_\">course_publish_queue</span><span class=\"params\">()</span> &#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> QueueBuilder.durable(PAYNOTIFY_QUEUE).build(); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//交换机和支付通知隊列绑定 </span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Binding <span class=\"title function_\">binding_course_publish_queue</span><span class=\"params\">(<span class=\"meta\">@Qualifier(PAYNOTIFY_QUEUE)</span> Queue queue, <span class=\"meta\">@Qualifier(PAYNOTIFY_EXCHANGE_FANOUT)</span> FanoutExchange exchange)</span> &#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(queue).to(exchange); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setApplicationContext</span><span class=\"params\">(ApplicationContext applicationContext)</span> <span class=\"keyword\">throws</span> BeansException &#123; </span><br><span class=\"line\">        <span class=\"comment\">// 获取RabbitTemplate </span></span><br><span class=\"line\">        <span class=\"type\">RabbitTemplate</span> <span class=\"variable\">rabbitTemplate</span> <span class=\"operator\">=</span> applicationContext.getBean(RabbitTemplate.class); </span><br><span class=\"line\">        <span class=\"comment\">//消息处理service </span></span><br><span class=\"line\">        <span class=\"type\">MqMessageService</span> <span class=\"variable\">mqMessageService</span> <span class=\"operator\">=</span> applicationContext.getBean(MqMessageService.class); </span><br><span class=\"line\">        <span class=\"comment\">// 设置ReturnCallback </span></span><br><span class=\"line\">        rabbitTemplate.setReturnCallback((message, replyCode, replyText, exchange, routingKey) -&gt; &#123; </span><br><span class=\"line\">            <span class=\"comment\">// 投递失败，记录日志 </span></span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;消息发送失败，应答码&#123;&#125;，原因&#123;&#125;，交换机&#123;&#125;，路由键&#123;&#125;,消息&#123;&#125;&quot;</span>, </span><br><span class=\"line\">                    replyCode, replyText, exchange, routingKey, message.toString()); </span><br><span class=\"line\">            <span class=\"type\">MqMessage</span> <span class=\"variable\">mqMessage</span> <span class=\"operator\">=</span> JSON.parseObject(message.toString(), MqMessage.class); </span><br><span class=\"line\">            <span class=\"comment\">//将消息再添加到消息表 </span></span><br><span class=\"line\">            mqMessageService.addMessage(mqMessage.getMessageType(),mqMessage.getBusinessKey1(),mqMessage.getBusinessKey2(),mqMessage.getBusinessKey3()); </span><br><span class=\"line\"> </span><br><span class=\"line\">        &#125;); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"發送支付結果\"><a class=\"markdownIt-Anchor\" href=\"#發送支付結果\">#</a> 發送支付結果</h2>\n<p>在 OrderService 中定义接口</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * 发送通知结果 </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> message </span></span><br><span class=\"line\"><span class=\"comment\"> */</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">notifyPayResult</span><span class=\"params\">(MqMessage message)</span>; </span><br></pre></td></tr></table></figure>\n<p>編寫接口實作方法：</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">notifyPayResult</span><span class=\"params\">(MqMessage message)</span> &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//1、消息体，转json </span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">msg</span> <span class=\"operator\">=</span> JSON.toJSONString(message); </span><br><span class=\"line\">    <span class=\"comment\">//设置消息持久化 </span></span><br><span class=\"line\">    <span class=\"type\">Message</span> <span class=\"variable\">msgObj</span> <span class=\"operator\">=</span> MessageBuilder.withBody(msg.getBytes(StandardCharsets.UTF_8)) </span><br><span class=\"line\">            .setDeliveryMode(MessageDeliveryMode.PERSISTENT) </span><br><span class=\"line\">            .build(); </span><br><span class=\"line\">    <span class=\"comment\">// 2.全局唯一的消息ID，需要封装到CorrelationData中 </span></span><br><span class=\"line\">    <span class=\"type\">CorrelationData</span> <span class=\"variable\">correlationData</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CorrelationData</span>(message.getId().toString()); </span><br><span class=\"line\">    <span class=\"comment\">// 3.添加callback </span></span><br><span class=\"line\">    correlationData.getFuture().addCallback( </span><br><span class=\"line\">            result -&gt; &#123; </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(result.isAck())&#123; </span><br><span class=\"line\">                    <span class=\"comment\">// 3.1.ack，消息成功 </span></span><br><span class=\"line\">                    log.debug(<span class=\"string\">&quot;通知支付结果消息发送成功, ID:&#123;&#125;&quot;</span>, correlationData.getId()); </span><br><span class=\"line\">                    <span class=\"comment\">//删除消息表中的记录 </span></span><br><span class=\"line\">                    mqMessageService.completed(message.getId()); </span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123; </span><br><span class=\"line\">                    <span class=\"comment\">// 3.2.nack，消息失败 </span></span><br><span class=\"line\">                    log.error(<span class=\"string\">&quot;通知支付结果消息发送失败, ID:&#123;&#125;, 原因&#123;&#125;&quot;</span>,correlationData.getId(), result.getReason()); </span><br><span class=\"line\">                &#125; </span><br><span class=\"line\">            &#125;, </span><br><span class=\"line\">            ex -&gt; log.error(<span class=\"string\">&quot;消息发送异常, ID:&#123;&#125;, 原因&#123;&#125;&quot;</span>,correlationData.getId(),ex.getMessage()) </span><br><span class=\"line\">    ); </span><br><span class=\"line\">    <span class=\"comment\">// 发送消息 </span></span><br><span class=\"line\">    rabbitTemplate.convertAndSend(PayNotifyConfig.PAYNOTIFY_EXCHANGE_FANOUT, <span class=\"string\">&quot;&quot;</span>, msgObj,correlationData); </span><br><span class=\"line\"> </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>订单服务收到第三方平台的支付结果时，在 saveAliPayStatus 方法中添加代码，向数据库消息表添加消息并进行发送消息，如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Transactional</span> </span><br><span class=\"line\"><span class=\"meta\">@Override</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">saveAliPayStatus</span><span class=\"params\">(PayStatusDto payStatusDto)</span> &#123; </span><br><span class=\"line\">        ....... </span><br><span class=\"line\">        <span class=\"comment\">//保存消息记录,参数1：支付结果通知类型，2: 业务id，3:业务类型 </span></span><br><span class=\"line\">        <span class=\"type\">MqMessage</span> <span class=\"variable\">mqMessage</span> <span class=\"operator\">=</span> mqMessageService.addMessage(<span class=\"string\">&quot;payresult_notify&quot;</span>, orders.getOutBusinessId(), orders.getOrderType(), <span class=\"literal\">null</span>); </span><br><span class=\"line\">        <span class=\"comment\">//通知消息 </span></span><br><span class=\"line\">        notifyPayResult(mqMessage); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>配置交换机和隊列</p>\n<p>在 order-service 工程配置</p>\n<p>消息发送方法</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * 发送通知结果 </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> message </span></span><br><span class=\"line\"><span class=\"comment\"> */</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">notifyPayResult</span><span class=\"params\">(MqMessage message)</span>; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"學習中心服務集成mq\"><a class=\"markdownIt-Anchor\" href=\"#學習中心服務集成mq\">#</a> 學習中心服務集成 MQ</h2>\n<p>1、在学习中心服务添加消息隊列依赖</p>\n<figure class=\"highlight xml\"><figcaption><span>XML</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span> </span><br></pre></td></tr></table></figure>\n<p>2、在学习中心服务接口工程引入 rabbitmq-dev.yaml 配置文件</p>\n<figure class=\"highlight yaml\"><figcaption><span>YAML</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">shared-configs:</span> </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">data-id:</span> <span class=\"string\">rabbitmq-$&#123;spring.profiles.active&#125;.yaml</span> </span><br><span class=\"line\">    <span class=\"attr\">group:</span> <span class=\"string\">xuecheng-plus-common</span> </span><br><span class=\"line\">    <span class=\"attr\">refresh:</span> <span class=\"literal\">true</span> </span><br></pre></td></tr></table></figure>\n<p>3、添加配置类</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span> </span><br><span class=\"line\"><span class=\"meta\">@Configuration</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PayNotifyConfig</span> &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//交换机 </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">PAYNOTIFY_EXCHANGE_FANOUT</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;paynotify_exchange_fanout&quot;</span>; </span><br><span class=\"line\">    <span class=\"comment\">//支付结果通知消息类型 </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">MESSAGE_TYPE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;payresult_notify&quot;</span>; </span><br><span class=\"line\">    <span class=\"comment\">//支付通知隊列 </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">PAYNOTIFY_QUEUE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;paynotify_queue&quot;</span>; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//声明交换机，且持久化 </span></span><br><span class=\"line\">    <span class=\"meta\">@Bean(PAYNOTIFY_EXCHANGE_FANOUT)</span> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> FanoutExchange <span class=\"title function_\">paynotify_exchange_fanout</span><span class=\"params\">()</span> &#123; </span><br><span class=\"line\">        <span class=\"comment\">// 三个参数：交换机名称、是否持久化、当没有queue与其绑定时是否自动删除 </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FanoutExchange</span>(PAYNOTIFY_EXCHANGE_FANOUT, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"comment\">//支付通知隊列,且持久化 </span></span><br><span class=\"line\">    <span class=\"meta\">@Bean(PAYNOTIFY_QUEUE)</span> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Queue <span class=\"title function_\">course_publish_queue</span><span class=\"params\">()</span> &#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> QueueBuilder.durable(PAYNOTIFY_QUEUE).build(); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//交换机和支付通知隊列绑定 </span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Binding <span class=\"title function_\">binding_course_publish_queue</span><span class=\"params\">(<span class=\"meta\">@Qualifier(PAYNOTIFY_QUEUE)</span> Queue queue, <span class=\"meta\">@Qualifier(PAYNOTIFY_EXCHANGE_FANOUT)</span> FanoutExchange exchange)</span> &#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(queue).to(exchange); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"接收支付结果\"><a class=\"markdownIt-Anchor\" href=\"#接收支付结果\">#</a> 接收支付结果</h2>\n<p>监听 MQ，接收支付结果，定义 ReceivePayNotifyService 类如下：</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span> </span><br><span class=\"line\"><span class=\"meta\">@Service</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReceivePayNotifyService</span> &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span> </span><br><span class=\"line\">    <span class=\"keyword\">private</span> RabbitTemplate rabbitTemplate; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span> </span><br><span class=\"line\">    MqMessageService mqMessageService; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span> </span><br><span class=\"line\">    MyCourseTablesService myCourseTablesService; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//监听消息隊列接收支付结果通知 </span></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener(queues = PayNotifyConfig.PAYNOTIFY_QUEUE)</span> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">receive</span><span class=\"params\">(Message message, Channel channel)</span> &#123; </span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123; </span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">5000</span>); </span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123; </span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e); </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"comment\">//获取消息 </span></span><br><span class=\"line\">        <span class=\"type\">MqMessage</span> <span class=\"variable\">mqMessage</span> <span class=\"operator\">=</span> JSON.parseObject(message.getBody(), MqMessage.class); </span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;学习中心服务接收支付结果:&#123;&#125;&quot;</span>, mqMessage); </span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">//消息类型 </span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">messageType</span> <span class=\"operator\">=</span> mqMessage.getMessageType(); </span><br><span class=\"line\">        <span class=\"comment\">//订单类型,60201表示购买课程 </span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">businessKey2</span> <span class=\"operator\">=</span> mqMessage.getBusinessKey2(); </span><br><span class=\"line\">        <span class=\"comment\">//这里只处理支付结果通知 </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (PayNotifyConfig.MESSAGE_TYPE.equals(messageType) &amp;&amp; <span class=\"string\">&quot;60201&quot;</span>.equals(businessKey2)) &#123; </span><br><span class=\"line\">            <span class=\"comment\">//选课记录id </span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">choosecourseId</span> <span class=\"operator\">=</span> mqMessage.getBusinessKey1(); </span><br><span class=\"line\">            <span class=\"comment\">//添加选课 </span></span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> myCourseTablesService.saveChooseCourseStauts(choosecourseId); </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!b)&#123; </span><br><span class=\"line\">                <span class=\"comment\">//添加选课失败，抛出异常，消息重回隊列 </span></span><br><span class=\"line\">                XueChengPlusException.cast(<span class=\"string\">&quot;收到支付结果，添加选课失败&quot;</span>); </span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"通知支付结果測試\"><a class=\"markdownIt-Anchor\" href=\"#通知支付结果測試\">#</a> 通知支付结果測試</h2>\n<p>测试准备：</p>\n<p>1️⃣找一門已發布的收費課程。</p>\n<p>2️⃣如果在我的課程表儲存則刪除。</p>\n<p>3️⃣刪除此課程的選課紀錄及訂單資訊。</p>\n<p>測試流程：</p>\n<p>1️⃣進入課程詳細頁面，點選馬上學習，產生二維碼進行付款。</p>\n<p>2️⃣付款完成點擊 “付款完成”，觀察訂單服務控制台是否發送訊息。</p>\n<p>3️⃣觀察學習中心服務控制台是否接收到訊息。</p>\n<p>4️⃣觀察資料庫中的消息表的相應記錄是否已刪除。</p>\n<p>消費重試測試：</p>\n<p>1️⃣在學習中心服務接收支付結果方法中製造異常。</p>\n<p>2️⃣重新執行上邊的測試流程，觀察是否消費重試。</p>\n<img data-src=\"https://usagif.com/wp-content/uploads/gifs/thanks-for-watching-9.gif\" class=\"abc\" width=\"600\" height=\"350\">",
            "tags": [
                "支付"
            ]
        },
        {
            "id": "https://superrjohn.github.io/John/2023/11/07/java/radis/redis_interview",
            "url": "https://superrjohn.github.io/John/2023/11/07/java/radis/redis_interview",
            "title": "Redis面試題整理",
            "date_published": "2023-11-07T14:59:14.136Z",
            "content_html": "<p>前言:<br>\n 內容出自<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXlUNDExSDdZSy8/dmRfc291cmNlPTA5ZDY2YTFmMDcyNWM1NDU5MzQ4OTJmMDhlZjZjYmE1\">黑馬高頻面試題</span><br>\n經消化整理內容後再作出記錄</p>\n<h1 id=\"緩存穿透\"><a class=\"markdownIt-Anchor\" href=\"#緩存穿透\">#</a> 緩存穿透</h1>\n<p>緩存穿透：查詢一個不存在的數據，因 MySQL 查不到數據導致緩存也沒有數據，所以每次都會請求數據庫<br>\n解決方法一：查詢 MYSQL 也沒有數據時，返回空值到緩存，這方法簡單，但會消耗內存，有可能發生不一致問題<br>\n解決方法二：布隆過濾器，實現模複雜，但查詢空間和時間都大幅提升</p>\n<h1 id=\"緩存擊穿\"><a class=\"markdownIt-Anchor\" href=\"#緩存擊穿\">#</a> 緩存擊穿</h1>\n<p>緩存擊穿：某一個熱門 KEY 的過期時間過期時，剛好對這 KEY 有大量的請求，因為沒有緩存阻擋所以直接到達數據庫，可能會把 DB 壓垮<br>\n解決一：在強一致場景用互斥鎖，因為在線程加上鎖後，獲得鎖的線程才能查數據庫，防止高併發場景下請求數據庫，使用鎖的關係性能較差<br>\n解決二：在高可用的場景用邏輯過期，因為這個 KEY 是熱門 KEY 所以不設過期時間手動維護，但設邏輯過期值，當重置邏輯過期時間更新數據時，用戶還是可以查詢到緩存，但不保證數據絕對一致</p>\n<h1 id=\"緩存雪崩\"><a class=\"markdownIt-Anchor\" href=\"#緩存雪崩\">#</a> 緩存雪崩</h1>\n<p>緩存雪崩：指同一時間大量的 KEY 同時過期或者 redis 服務宕機，導致大量請求到數據庫，造成壓力<br>\n解決 KEY 失效：給 key 設失效時間為隨機值<br>\n解決宕機：集群、降級限流、多級緩存</p>\n<h1 id=\"數據庫與redis如何進行同步雙寫一致\"><a class=\"markdownIt-Anchor\" href=\"#數據庫與redis如何進行同步雙寫一致\">#</a> 數據庫與 redis 如何進行同步 (雙寫一致)</h1>\n<p>改數據庫的數據時，同時更新緩存，讓數據庫和緩存保持一致<br>\n強一致時，可以用排他鎖阻塞其他線程寫操作<br>\n高可用時，可以利用 MQ, 讓數據最終一致</p>\n<h1 id=\"緩存持久化\"><a class=\"markdownIt-Anchor\" href=\"#緩存持久化\">#</a> 緩存持久化</h1>\n<p>有 AOF 和 RDB 兩種方法，通常兩種一起使用</p>\n<p>AOF:redis 每一個寫入命令都被記錄在 AOF 文件，修改 redis.com 配置文件開啟，因為記錄命令所以文件較大<br>\n RDB:background save 時主進程 fork 到子進程，複製頁表給子進程，頁表就是虛擬機與內存之間的映射關係，而子進程會將新數據寫入磁盤。</p>\n<h1 id=\"緩存過期策略\"><a class=\"markdownIt-Anchor\" href=\"#緩存過期策略\">#</a> 緩存過期策略</h1>\n<p>定期刪除：每隔一段時間，查詢一些 KEY 刪除里面過期的 KEY, 可以修改配置文件調整清理模式，對 CPU 和內存較好，但刪除時間和頻率難以確定<br>\n惰性刪除：當我們查詢 KEY 時，會檢查其是否過期，過期就刪除，反之返回 KEY, 對 CPU 友好，但對內存不友好</p>\n<h1 id=\"淘汰策略\"><a class=\"markdownIt-Anchor\" href=\"#淘汰策略\">#</a> 淘汰策略</h1>\n<p>當 redis 中的內存不夠時，此時又有新的 KEY 添加，redis 會以某種規則將內存中的數據刪除<br>\n有 8 種不同的策略，最常用的有 2 種:<br>\nLRU: 最近最少使用，用當前時間減去最後一次訪問時間，值愈大則淘汰優先愈高<br>\n LFU: 最少頻率使用，會統計每個 KEY 的訪問頻率，值愈小淘汰優先愈高</p>\n<p>1. 優先使用 allkeys-lru, 把最近常訪問的數據留在緩存<br>\n 2. 訪問頻率差不多，可以用 allkeys-random<br>\n3. 業務有置頂需求，可以用 volatile-lru<br>\n4. 如果數據庫有 1000 萬數據，Redis 只能緩存 20 萬數據，如何保證 Redis 中都是熱點數據？<br>\n 使用 allkeys-lru 淘汰策略，留下來的都是熱點數據。<br>\n5.Redis 的內存用完會發生什麼事？<br>\n 要看數據淘汰策略是什麼，如果是默認配置 (noeviction), 不允許存入新數據，會報錯</p>\n<h1 id=\"如何實現分布式鎖\"><a class=\"markdownIt-Anchor\" href=\"#如何實現分布式鎖\">#</a> 如何實現分布式鎖</h1>\n<p>使用場景：定時任務，搶單，冪等性場景<br>\n問題：因為在集群下鎖在自己的 JVM 虛擬機上，只能鎖住自己的服務，所以集群下鎖會失效，導致數據不一致<br>\n解決：利用 redissonClient, 讓多台服務器搶同一把鎖，而且有 WatchDog 監聽，確保業務成功，同一線程下鎖可以重入</p>\n<h1 id=\"主從同步\"><a class=\"markdownIt-Anchor\" href=\"#主從同步\">#</a> 主從同步</h1>\n<p>好處：提高併發，讀寫分離</p>\n<p>全量同步：從會向主請求數據同步，主會檢查從有沒有 replId, 沒有則說明第一次同步，返回數據信息 replId、offset, 執行 BgSave 生成 RDB 文<br>\n增量同步：如果主檢查從不是第一次同步，會查看 offset 值，根據主與從的 offset 差值，同步後期變化的數據</p>\n<h1 id=\"哨兵機制\"><a class=\"markdownIt-Anchor\" href=\"#哨兵機制\">#</a> 哨兵機制</h1>\n<p>1️⃣監控：哨兵會向 redis 集群發送 PING 命令，如果配置發現實例未定時間響應 PONG, 則認為該實例主觀下線，或者超過指定數量的 sentinel 都認為該實例下線，則客觀下線。<br>\n主節點上線後，哨兵會根據 offset 愈大的從節點成為主，因為 offset 值愈大說明數據愈完整</p>\n<p>2️⃣自動故障恢復：如果主節點故障，Sentinel 會將一個 slave 提升為 master。</p>\n<p>3️⃣通知：Sentinel 充當 Redis 客戶端的服務發現來源，當集群發生故障轉移時，會將最新信息推送給 redis 的客戶端</p>\n<p>4️⃣哨兵腦裂：集群腦裂是由於主節點和從節點和 sentinel 處於不同的網路分區，使得 sentinel 沒有能夠心跳感知到主節點，所以通過選舉的方式提升了一個從節點為主，這樣就存在兩個 master, 就像大腦分裂一樣，會導致客戶端還在舊的主節點那寫入數據，新節點無法同步數據，當網路恢復後，sentinel 會將舊的主節點降為從節點，這時再從新的 master 同步數據，就會導致數據掉失</p>\n<p>解決：可以修改 redis 的配置，可以設置最少的從節點數量以及縮短主從數據同步的延遲時間，達不到要求就拒絕請求，可以避免大量數據掉失</p>\n<h1 id=\"分片集群\"><a class=\"markdownIt-Anchor\" href=\"#分片集群\">#</a> 分片集群</h1>\n<p>主從和哨兵解決了高可用和高併發，但沒有解決:<br>\n1️⃣海量數據存儲問題<br>\n2️⃣高併發寫的問題</p>\n<p>使用分片集群可以解決上述問題:<br>\n1️⃣集群中有多個 master, 每個 master 可以保存不同數據，假設一個主保存 20W 數據，3 個就可以保存 60W 數據</p>\n<p>2️⃣每個主節點可以有多個從節點</p>\n<p>3️⃣主節點之間可以通過 ping 監聽彼此</p>\n<p>4️⃣客戶端請求可以訪問集群任意節點，最終都會被轉發到正確節點</p>\n<p>5️⃣分片集群引入了 hash 槽概念，redis 集群有 16384 個哈希槽，每個 key 通過算法後對 16384 取餘數，如果想將一類 KEY 放在一起提升性能，key 的命名可以這樣 set {F1A} name john</p>\n<h1 id=\"redis的io多路複用模型\"><a class=\"markdownIt-Anchor\" href=\"#redis的io多路複用模型\">#</a> Redis 的 IO 多路複用模型</h1>\n<p>1️⃣redis 是單程線，但為什麼那麼快？因為 redis 是純內存操作，執行速度非常快</p>\n<p>2️⃣採用單線程，避免不必要的上下文切換，多程線還要考慮線程安全</p>\n<p>3️⃣使用 IO 多路複用模型</p>\n<p>所以 redis 是純內存操作，它的性能瓶頸是網路延遲而不是執行速度。</p>\n<p>而 Redis 網路模型通過 IO 多路複用提高性能，而且支持各種不同的多路複用實現，將這些實現進行封裝，提供了統一的高性能事件庫</p>\n<p>所以 redis 在 IO 多路複用的基礎下，添加了自己的事件派發，將寫數據和讀數據改為多程線接收數據，增加命令轉換速度，命令執行時是依然是單線程</p>\n<img data-src=\"https://usagif.com/wp-content/uploads/gifs/thanks-for-watching-9.gif\" class=\"abc\" width=\"600\" height=\"350\">",
            "tags": [
                "Radis"
            ]
        },
        {
            "id": "https://superrjohn.github.io/John/2023/11/03/java/SpringSecurity/WeChat_login",
            "url": "https://superrjohn.github.io/John/2023/11/03/java/SpringSecurity/WeChat_login",
            "title": "SpringSecurity 微信登錄",
            "date_published": "2023-11-03T15:39:05.235Z",
            "content_html": "<p>在此特别感謝黑馬程序員提供的課程: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWo4NDExTjdCbS8=\">學成在線</span></p>\n<p>前言<br>\n於由實習項目快做完才做記錄，而且項目模塊較多，故挑部份來記錄，所以這遍主要是 SpringSecurity 內容。<br>\n<span class=\"rainbow\">完整项目地址</span>：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3N1cGVycmpvaG4vamF2YV93ZWI=\">https://github.com/superrjohn/java_web</span></p>\n<p><span class=\"green\">上篇:</span><a href=\"/John/2023/10/30/java/SpringSecurity/SpringSecurity\">認證授權</a></p>\n<h1 id=\"驗證碼服務\"><a class=\"markdownIt-Anchor\" href=\"#驗證碼服務\">#</a> 驗證碼服務</h1>\n<h2 id=\"部署驗證碼服務工程\"><a class=\"markdownIt-Anchor\" href=\"#部署驗證碼服務工程\">#</a> 部署驗證碼服務工程</h2>\n<p>🔴在認證時一般都需要輸入驗證碼，驗證碼有什麼用？</p>\n<blockquote><p>驗證碼可以防止惡性攻擊，例如：XSS 跨站腳本攻擊、CSRF 跨站請求偽造攻擊，一些比較複雜的圖形驗證碼可以有效的防止惡性攻擊。<br>\n為了保護系統的安全性在一些比較重要的操作都需要驗證碼。</p>\n</blockquote>\n<p>本專案建立單獨的驗證碼服務為各業務提供驗證碼的產生、校驗等服務。<br>\n拷貝課程資料目錄 xuecheng-plus-checkcode 驗證碼服務工程到自己的工程目錄。<br>\n然後定義 nacos 設定檔</p>\n<figure class=\"highlight yaml\"><figcaption><span>YAML</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span> </span><br><span class=\"line\">  <span class=\"attr\">servlet:</span> </span><br><span class=\"line\">    <span class=\"attr\">context-path:</span> <span class=\"string\">/checkcode</span> </span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">63075</span> </span><br></pre></td></tr></table></figure>\n<p>注意修改 bootstrap.yml 中的命名空間為自己定義的命名空間。<br>\n配置 redis-dev.yaml，儲存 redis 服務啟動</p>\n<figure class=\"highlight xml\"><figcaption><span>XML</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:  </span><br><span class=\"line\">  redis: </span><br><span class=\"line\">    host: 192.168.101.65 </span><br><span class=\"line\">    port: 6379 </span><br><span class=\"line\">    password: redis </span><br><span class=\"line\">    database: 0 </span><br><span class=\"line\">    lettuce: </span><br><span class=\"line\">      pool: </span><br><span class=\"line\">        max-active: 20 </span><br><span class=\"line\">        max-idle: 10 </span><br><span class=\"line\">        min-idle: 0 </span><br><span class=\"line\">    timeout: 10000 </span><br><span class=\"line\">    #redisson: </span><br><span class=\"line\">      #配置文件目录 </span><br><span class=\"line\">      #config: classpath:singleServerConfig.yaml </span><br></pre></td></tr></table></figure>\n<h2 id=\"驗證碼介面測試\"><a class=\"markdownIt-Anchor\" href=\"#驗證碼介面測試\">#</a> 驗證碼介面測試</h2>\n<p>1️⃣黑馬提供的驗證碼服務中的 Controller 中有一個方法，是用來產生驗證碼圖片的</p>\n<figure class=\"highlight java\"><figcaption><span>JAVA</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ApiOperation(value=&quot;生成验证信息&quot;, notes=&quot;生成验证信息&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping(value = &quot;/pic&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CheckCodeResultDto <span class=\"title function_\">generatePicCheckCode</span><span class=\"params\">(CheckCodeParamsDto checkCodeParamsDto)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> picCheckCodeService.generate(checkCodeParamsDto);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2️⃣我們使用 HttpClient 測試該介面</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#### 获取验证码图片</span><br><span class=\"line\">POST localhost:<span class=\"number\">53075</span>/checkcode/pic</span><br></pre></td></tr></table></figure>\n<p>3️⃣回應結果如下，圖片是以 base64 編碼格式儲存的，我們可以複製直接在瀏覽器中開啟</p>\n<img data-src=\"/John/img/java/SpringSecurity/14.png\" class=\"abc\">\n<p>4️⃣驗證碼服務如何產生併校驗驗證碼？</p>\n<img data-src=\"/John/img/java/SpringSecurity/15.png\" class=\"abc\">\n<p>1. 給產生的驗證碼分配一個 key，將 key 和驗證碼一同存入 redis。 這個 key 和圖片一同回頁給頁面。<br>\n2. 使用者輸入驗證碼，連同 key 一同提交至認證服務，只是這個 key 被隱藏起來，自動輸入。<br>\n3. 驗證碼服務根據 key 從快取取出正確的驗證碼和使用者輸入的驗證碼進行比對，如果相同則校驗通過，否則不通過。</p>\n<p>5️⃣校驗驗證碼介面，code 需要改為圖片顯示的值</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 校验验证码 </span><br><span class=\"line\">POST &#123;&#123;checkcode_host&#125;&#125;/checkcode/verify?key=checkcode4506b95bddbe46cdb0d56810b747db1b&amp;code=70dl </span><br></pre></td></tr></table></figure>\n<h2 id=\"帳號密碼認證\"><a class=\"markdownIt-Anchor\" href=\"#帳號密碼認證\">#</a> 帳號密碼認證</h2>\n<p>執行流程如下：</p>\n<img data-src=\"/John/img/java/SpringSecurity/16.png\" class=\"abc\">\n<p>1、在認證服務定義遠端呼叫驗證碼服務的接口，FeignClient 的參數 value 為服務名，CheckCodeClientFactory 為降級方法</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FeignClient(value = &quot;checkcode&quot;,fallbackFactory = CheckCodeClientFactory.class)</span> </span><br><span class=\"line\"> <span class=\"meta\">@RequestMapping(&quot;/checkcode&quot;)</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">CheckCodeClient</span> &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"meta\">@PostMapping(value = &quot;/verify&quot;)</span> </span><br><span class=\"line\"> <span class=\"keyword\">public</span> Boolean <span class=\"title function_\">verify</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;key&quot;)</span> String key,<span class=\"meta\">@RequestParam(&quot;code&quot;)</span> String code)</span>; </span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.CheckCodeClientFactory:</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span> </span><br><span class=\"line\"><span class=\"meta\">@Component</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CheckCodeClientFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">FallbackFactory</span>&lt;CheckCodeClient&gt; &#123; </span><br><span class=\"line\">    <span class=\"meta\">@Override</span> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> CheckCodeClient <span class=\"title function_\">create</span><span class=\"params\">(Throwable throwable)</span> &#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CheckCodeClient</span>() &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"meta\">@Override</span> </span><br><span class=\"line\">            <span class=\"keyword\">public</span> Boolean <span class=\"title function_\">verify</span><span class=\"params\">(String key, String code)</span> &#123; </span><br><span class=\"line\">                log.debug(<span class=\"string\">&quot;调用验证码服务熔断异常:&#123;&#125;&quot;</span>, throwable.getMessage()); </span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">null</span>; </span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">        &#125;; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>3. 啟動類添加，basePackages 為遠程調用接口的目錄</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableFeignClients(basePackages=&#123;&quot;com.xuecheng.*.feignclient&quot;&#125;)</span> </span><br></pre></td></tr></table></figure>\n<p>配置文件引入 feign-dev.yaml</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- data-id: feign-$&#123;spring.profiles.active&#125;.yaml </span><br><span class=\"line\">  group: xuecheng-plus-common </span><br><span class=\"line\">  refresh: <span class=\"literal\">true</span> </span><br></pre></td></tr></table></figure>\n<p>4. 完善 PasswordAuthServiceImpl</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service(&quot;password_authservice&quot;)</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PasswordAuthServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AuthService</span> &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"meta\">@Autowired</span> </span><br><span class=\"line\"> XcUserMapper xcUserMapper; </span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"meta\">@Autowired</span> </span><br><span class=\"line\"> PasswordEncoder passwordEncoder; </span><br><span class=\"line\"> <span class=\"meta\">@Autowired</span> </span><br><span class=\"line\"> CheckCodeClient checkCodeClient; </span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"meta\">@Override</span> </span><br><span class=\"line\"> <span class=\"keyword\">public</span> XcUser <span class=\"title function_\">execute</span><span class=\"params\">(AuthParamsDto authParamsDto)</span> &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">//校验验证码 </span></span><br><span class=\"line\">  <span class=\"type\">String</span> <span class=\"variable\">checkcode</span> <span class=\"operator\">=</span> authParamsDto.getCheckcode(); </span><br><span class=\"line\">  <span class=\"type\">String</span> <span class=\"variable\">checkcodekey</span> <span class=\"operator\">=</span> authParamsDto.getCheckcodekey(); </span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(StringUtils.isBlank(checkcodekey) || StringUtils.isBlank(checkcode))&#123; </span><br><span class=\"line\">   <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;验证码为空&quot;</span>); </span><br><span class=\"line\"> </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"type\">Boolean</span> <span class=\"variable\">verify</span> <span class=\"operator\">=</span> checkCodeClient.verify(checkcodekey, checkcode); </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!verify)&#123; </span><br><span class=\"line\">   <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;验证码输入错误&quot;</span>); </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"comment\">//账号 </span></span><br><span class=\"line\">  <span class=\"type\">String</span> <span class=\"variable\">username</span> <span class=\"operator\">=</span> authParamsDto.getUsername(); </span><br><span class=\"line\">  <span class=\"type\">XcUser</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> xcUserMapper.selectOne(<span class=\"keyword\">new</span> <span class=\"title class_\">LambdaQueryWrapper</span>&lt;XcUser&gt;().eq(XcUser::getUsername, username)); </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(user==<span class=\"literal\">null</span>)&#123; </span><br><span class=\"line\">   <span class=\"comment\">//返回空表示用户不存在 </span></span><br><span class=\"line\">   <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;账号不存在&quot;</span>); </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"comment\">//校验密码 </span></span><br><span class=\"line\">  <span class=\"comment\">//取出数据库存储的正确密码 </span></span><br><span class=\"line\">  <span class=\"type\">String</span> <span class=\"variable\">passwordDb</span>  <span class=\"operator\">=</span>user.getPassword(); </span><br><span class=\"line\">  <span class=\"type\">String</span> <span class=\"variable\">passwordForm</span> <span class=\"operator\">=</span> authParamsDto.getPassword(); </span><br><span class=\"line\">  <span class=\"type\">boolean</span> <span class=\"variable\">matches</span> <span class=\"operator\">=</span> passwordEncoder.matches(passwordForm, passwordDb); </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!matches)&#123; </span><br><span class=\"line\">   <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;账号或密码错误&quot;</span>); </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> user; </span><br><span class=\"line\"> &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"帳號密碼認證測試\"><a class=\"markdownIt-Anchor\" href=\"#帳號密碼認證測試\">#</a> 帳號密碼認證測試</h2>\n<img data-src=\"/John/img/java/SpringSecurity/17.png\" class=\"abc\">\n<p>1. 使用瀏覽器造訪 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy41MXh1ZWNoZW5nLmNuL3NpZ24uaHRtbA==\">http://www.51xuecheng.cn/sign.html</span><br>\n2. 先測試驗證碼，分別輸入正確的驗證碼、錯誤的驗證碼進行測試<br>\n 3. 輸入正確的帳號密碼和錯誤的帳號密碼進行測試<br>\n登入成功將 jwt 令牌儲存 cookie.<br>\n4. 測試自動登入<br>\n勾選自動登入 cookie 產生時間為 30 天，不勾選自動登入關閉瀏覽器視窗後自動刪除 cookie。</p>\n<h1 id=\"微信掃碼登入\"><a class=\"markdownIt-Anchor\" href=\"#微信掃碼登入\">#</a> 微信掃碼登入</h1>\n<h2 id=\"接入流程\"><a class=\"markdownIt-Anchor\" href=\"#接入流程\">#</a> 接入流程</h2>\n<p>前言：先要在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9vcGVuLndlaXhpbi5xcS5jb20v\">网站应用开发</span>，並擁有已審核通過的網站應用，並取得相應的 AppID 和 AppSecret，申請微信登入且通過審核後，可開始接取流程 (上網找可以找到資源)</p>\n<p>微信掃碼登入基於 OAuth2 協定的授權碼模式，</p>\n<p>介面文檔：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vZG9jL29wbGF0Zm9ybS9XZWJzaXRlX0FwcC9XZUNoYXRfTG9naW4vV2VjaGF0X0xvZ2luLmh0bWw=\">https://developers.weixin.qq.com/doc/oplatform/Website_App/WeChat_Login/Wechat_Login.html</span></p>\n<p>微信 OAuth2.0 授權登入目前支援 authorization_code 模式，適用於擁有 server 端的應用程式授權。 此模式整體流程為：<br>\n1️⃣第三方發起微信授權登入要求，微信使用者允許授權第三方應用程式後，微信會拉起應用程式或重定向到第三方網站，並且帶上授權臨時票據 code 參數；<br>\n2️⃣透過 code 參數加上 AppID 和 AppSecret 等，透過 API 換取 access_token；<br>\n3️⃣透過 access_token 進行介面調用，取得使用者基本資料資源或幫助使用者實現基本操作。</p>\n<img data-src=\"/John/img/java/SpringSecurity/18.png\" class=\"abc\">\n<p>步驟 1：在頁面中先引入以下 JS 檔案（支援 https）：</p>\n<figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://res.wx.qq.com/connect/zh_CN/htmledition/js/wxLogin.js </span><br></pre></td></tr></table></figure>\n<p>步驟 2：在需要使用微信登入的地方實例以下 JS 物件：</p>\n<p>var obj = new WxLogin({<br>\nself_redirect:true,<br>\nid:“login_container”,<br>\nappid: “<span class=\"yellow\">網站應用審核通過後獲得</span>”,<br>\nscope: “”,<br>\nredirect_uri: “<span class=\"yellow\">用戶按下同意後，網站應用重定向</span>”,<br>\nstate: “”,<br>\nstyle: “”,<br>\nhref: “”<br>\n});</p>\n<h1 id=\"接入微信登入\"><a class=\"markdownIt-Anchor\" href=\"#接入微信登入\">#</a> 接入微信登入</h1>\n<h2 id=\"接入分析\"><a class=\"markdownIt-Anchor\" href=\"#接入分析\">#</a> 接入分析</h2>\n <img data-src=\"/John/img/java/SpringSecurity/19.png\" class=\"abc\">\n<p>1️⃣需要定義介面接收微信下發的授權碼。<br>\n2️⃣收到授權碼呼叫微信介面申請令牌。<br>\n3️⃣申請到令牌調用微信獲取用戶信息<br>\n4️⃣取得使用者資訊成功將其寫入本專案用戶中心資料庫。<br>\n5️⃣最後重定向到瀏覽器自動登入。</p>\n<h2 id=\"定義接口\"><a class=\"markdownIt-Anchor\" href=\"#定義接口\">#</a> 定義接口</h2>\n<p>參考介面規格中「請求取得授權碼」 定義接收微信下發的授權碼接口，<br>\n定義 WxLoginController 類，當用戶在前端掃碼時，用戶同意後會跳轉到這個方法，收到用戶信息後再執行微信認證的 service 自動登錄，如下:</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span> </span><br><span class=\"line\"><span class=\"meta\">@Controller</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WxLoginController</span> &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/wxLogin&quot;)</span> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">wxLogin</span><span class=\"params\">(String code, String state)</span> <span class=\"keyword\">throws</span> IOException &#123; </span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;微信扫码回调,code:&#123;&#125;,state:&#123;&#125;&quot;</span>,code,state); </span><br><span class=\"line\">        <span class=\"comment\">//请求微信申请令牌，拿到令牌查询用户信息，将用户信息写入本项目数据库 </span></span><br><span class=\"line\">        <span class=\"type\">XcUser</span> <span class=\"variable\">xcUser</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">XcUser</span>(); </span><br><span class=\"line\">        <span class=\"comment\">//暂时硬编写，目的是调试环境 </span></span><br><span class=\"line\">        xcUser.setUsername(<span class=\"string\">&quot;t1&quot;</span>); </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(xcUser==<span class=\"literal\">null</span>)&#123; </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;redirect:http://www.51xuecheng.cn/error.html&quot;</span>; </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">username</span> <span class=\"operator\">=</span> xcUser.getUsername(); </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;redirect:http://www.51xuecheng.cn/sign.html?username=&quot;</span>+username+<span class=\"string\">&quot;&amp;authType=wx&quot;</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>定義微信認證的 service</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span> </span><br><span class=\"line\"><span class=\"meta\">@Service(&quot;wx_authservice&quot;)</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WxAuthServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AuthService</span> &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span> </span><br><span class=\"line\">    XcUserMapper xcUserMapper; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> XcUserExt <span class=\"title function_\">execute</span><span class=\"params\">(AuthParamsDto authParamsDto)</span> &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">//账号 </span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">username</span> <span class=\"operator\">=</span> authParamsDto.getUsername(); </span><br><span class=\"line\">        <span class=\"type\">XcUser</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> xcUserMapper.selectOne(<span class=\"keyword\">new</span> <span class=\"title class_\">LambdaQueryWrapper</span>&lt;XcUser&gt;().eq(XcUser::getUsername, username)); </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(user==<span class=\"literal\">null</span>)&#123; </span><br><span class=\"line\">            <span class=\"comment\">//返回空表示用户不存在 </span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;账号不存在&quot;</span>); </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"type\">XcUserExt</span> <span class=\"variable\">xcUserExt</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">XcUserExt</span>(); </span><br><span class=\"line\">        BeanUtils.copyProperties(user,xcUserExt); </span><br><span class=\"line\">        <span class=\"keyword\">return</span> xcUserExt; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"接入微信認證\"><a class=\"markdownIt-Anchor\" href=\"#接入微信認證\">#</a> 接入微信認證</h2>\n<p>接下来请求微信申请令牌。<br>\n1️⃣因為和第三方進行遠程調用，所以使用 restTemplate 请求微信，配置 RestTemplate bean</p>\n<p>在啟動類配置 restTemplate</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span> </span><br><span class=\"line\">RestTemplate <span class=\"title function_\">restTemplate</span><span class=\"params\">()</span>&#123; </span><br><span class=\"line\">    <span class=\"type\">RestTemplate</span> <span class=\"variable\">restTemplate</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RestTemplate</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">OkHttp3ClientHttpRequestFactory</span>()); </span><br><span class=\"line\">    <span class=\"keyword\">return</span>  restTemplate; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>2️⃣定義與微信認證的 service 介面：</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">WxAuthService</span> &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> XcUser <span class=\"title function_\">wxAuth</span><span class=\"params\">(String code)</span>; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>3️⃣下邊在 controller 中呼叫 wxAuth 介面：</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span> </span><br><span class=\"line\"><span class=\"meta\">@Controller</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WxLoginController</span> &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span> </span><br><span class=\"line\">    WxAuthService wxAuthService; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/wxLogin&quot;)</span> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">wxLogin</span><span class=\"params\">(String code, String state)</span> <span class=\"keyword\">throws</span> IOException &#123; </span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;微信扫码回调,code:&#123;&#125;,state:&#123;&#125;&quot;</span>,code,state); </span><br><span class=\"line\">        <span class=\"comment\">//请求微信申请令牌，拿到令牌查询用户信息，将用户信息写入本项目数据库 </span></span><br><span class=\"line\">        <span class=\"type\">XcUser</span> <span class=\"variable\">xcUser</span> <span class=\"operator\">=</span> wxAuthService.wxAuth(code); </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(xcUser==<span class=\"literal\">null</span>)&#123; </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;redirect:http://www.51xuecheng.cn/error.html&quot;</span>; </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">username</span> <span class=\"operator\">=</span> xcUser.getUsername(); </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;redirect:http://www.51xuecheng.cn/sign.html?username=&quot;</span>+username+<span class=\"string\">&quot;&amp;authType=wx&quot;</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>4️⃣在 WxAuthService 的 wxAuth 方法中實作申請令牌、查詢使用者資訊等內容，appid 和 secret 是在微信開放平台註冊後獲得的，將它們配在 nacos 的 auth-service-dev.yaml 配置文件中，然而把值注入進來使用</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span> </span><br><span class=\"line\"><span class=\"meta\">@Service(&quot;wx_authservice&quot;)</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WxAuthServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AuthService</span>, WxAuthService &#123; </span><br><span class=\"line\"><span class=\"meta\">@Autowired</span> </span><br><span class=\"line\">XcUserMapper xcUserMapper; </span><br><span class=\"line\"><span class=\"meta\">@Autowired</span> </span><br><span class=\"line\">RestTemplate restTemplate; </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@Value(&quot;$&#123;weixin.appid&#125;&quot;)</span> </span><br><span class=\"line\">String appid; </span><br><span class=\"line\"><span class=\"meta\">@Value(&quot;$&#123;weixin.secret&#125;&quot;)</span> </span><br><span class=\"line\">String secret; </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> XcUser <span class=\"title function_\">wxAuth</span><span class=\"params\">(String code)</span>&#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//收到code调用微信接口申请access_token </span></span><br><span class=\"line\">    Map&lt;String, String&gt; access_token_map = getAccess_token(code); </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(access_token_map==<span class=\"literal\">null</span>)&#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    System.out.println(access_token_map); </span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">openid</span> <span class=\"operator\">=</span> access_token_map.get(<span class=\"string\">&quot;openid&quot;</span>); </span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">access_token</span> <span class=\"operator\">=</span> access_token_map.get(<span class=\"string\">&quot;access_token&quot;</span>); </span><br><span class=\"line\">    <span class=\"comment\">//拿access_token查询用户信息 </span></span><br><span class=\"line\">    Map&lt;String, String&gt; userinfo = getUserinfo(access_token, openid); </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(userinfo==<span class=\"literal\">null</span>)&#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"comment\">//添加用户到数据库 </span></span><br><span class=\"line\">    <span class=\"type\">XcUser</span> <span class=\"variable\">xcUser</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>; </span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">return</span> xcUser; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>5️⃣getAccess_token 方法，拿著授權碼申請令牌方法，因微信返回是 JSON, 所以我們用 Map 接收，把原本請求微信地址的關鍵參數用 % s 佔位，然後用 format 方法把佔位參數修改成我們的數據，重新拼接 url</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Map&lt;String,String&gt; <span class=\"title function_\">getAccess_token</span><span class=\"params\">(String code)</span> &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">wxUrl_template</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;https://api.weixin.qq.com/sns/oauth2/access_token?appid=%s&amp;secret=%s&amp;code=%s&amp;grant_type=authorization_code&quot;</span>; </span><br><span class=\"line\">    <span class=\"comment\">//请求微信地址 </span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">wxUrl</span> <span class=\"operator\">=</span> String.format(wxUrl_template, appid, secret, code); </span><br><span class=\"line\"> </span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;调用微信接口申请access_token, url:&#123;&#125;&quot;</span>, wxUrl); </span><br><span class=\"line\">    <span class=\"comment\">//遠程調用微信url</span></span><br><span class=\"line\">    ResponseEntity&lt;String&gt; exchange = restTemplate.exchange(wxUrl, HttpMethod.POST, <span class=\"literal\">null</span>, String.class); </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> exchange.getBody(); </span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;调用微信接口申请access_token: 返回值:&#123;&#125;&quot;</span>, result); </span><br><span class=\"line\">    <span class=\"comment\">//json轉為map</span></span><br><span class=\"line\">    Map&lt;String,String&gt; resultMap = JSON.parseObject(result, Map.class); </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> resultMap; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>6️⃣getUserinfo, 攜帶令牌查詢用戶信息，關鍵 url 的參數用 % s 佔位，把令牌獲得的值填上</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Map&lt;String,String&gt; <span class=\"title function_\">getUserinfo</span><span class=\"params\">(String access_token,String openid)</span> &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">wxUrl_template</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;https://api.weixin.qq.com/sns/userinfo?access_token=%s&amp;openid=%s&quot;</span>; </span><br><span class=\"line\">    <span class=\"comment\">//请求微信地址 </span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">wxUrl</span> <span class=\"operator\">=</span> String.format(wxUrl_template, access_token,openid); </span><br><span class=\"line\"> </span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;调用微信接口申请access_token, url:&#123;&#125;&quot;</span>, wxUrl); </span><br><span class=\"line\"> </span><br><span class=\"line\">    ResponseEntity&lt;String&gt; exchange = restTemplate.exchange(wxUrl, HttpMethod.POST, <span class=\"literal\">null</span>, String.class); </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//防止乱码进行转码 </span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(exchange.getBody().getBytes(StandardCharsets.ISO_8859_1),StandardCharsets.UTF_8); </span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;调用微信接口申请access_token: 返回值:&#123;&#125;&quot;</span>, result); </span><br><span class=\"line\">    Map&lt;String,String&gt; resultMap = JSON.parseObject(result, Map.class); </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> resultMap; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h2 id=\"儲存使用者資訊\"><a class=\"markdownIt-Anchor\" href=\"#儲存使用者資訊\">#</a> 儲存使用者資訊</h2>\n<p>向資料庫保存使用者訊息，如果使用者不存在將其保存在資料庫中，事務控制</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span> </span><br><span class=\"line\">XcUserRoleMapper xcUserRoleMapper; </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@Transactional</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> XcUser <span class=\"title function_\">addWxUser</span><span class=\"params\">(Map userInfo_map)</span>&#123; </span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">unionid</span> <span class=\"operator\">=</span> userInfo_map.get(<span class=\"string\">&quot;unionid&quot;</span>).toString(); </span><br><span class=\"line\">    <span class=\"comment\">//根据unionid查询数据库 </span></span><br><span class=\"line\">    <span class=\"type\">XcUser</span> <span class=\"variable\">xcUser</span> <span class=\"operator\">=</span> xcUserMapper.selectOne(<span class=\"keyword\">new</span> <span class=\"title class_\">LambdaQueryWrapper</span>&lt;XcUser&gt;().eq(XcUser::getWxUnionid, unionid)); </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(xcUser!=<span class=\"literal\">null</span>)&#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> xcUser; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">userId</span> <span class=\"operator\">=</span> UUID.randomUUID().toString(); </span><br><span class=\"line\">    xcUser = <span class=\"keyword\">new</span> <span class=\"title class_\">XcUser</span>(); </span><br><span class=\"line\">    xcUser.setId(userId); </span><br><span class=\"line\">    xcUser.setWxUnionid(unionid); </span><br><span class=\"line\">    <span class=\"comment\">//记录从微信得到的昵称 </span></span><br><span class=\"line\">    xcUser.setNickname(userInfo_map.get(<span class=\"string\">&quot;nickname&quot;</span>).toString()); </span><br><span class=\"line\">    xcUser.setUserpic(userInfo_map.get(<span class=\"string\">&quot;headimgurl&quot;</span>).toString()); </span><br><span class=\"line\">    xcUser.setName(userInfo_map.get(<span class=\"string\">&quot;nickname&quot;</span>).toString()); </span><br><span class=\"line\">    xcUser.setUsername(unionid); </span><br><span class=\"line\">    xcUser.setPassword(unionid); </span><br><span class=\"line\">    xcUser.setUtype(<span class=\"string\">&quot;101001&quot;</span>);<span class=\"comment\">//学生类型 </span></span><br><span class=\"line\">    xcUser.setStatus(<span class=\"string\">&quot;1&quot;</span>);<span class=\"comment\">//用户状态 </span></span><br><span class=\"line\">    xcUser.setCreateTime(LocalDateTime.now()); </span><br><span class=\"line\">    xcUserMapper.insert(xcUser); </span><br><span class=\"line\">    <span class=\"comment\">//向用戶角色關係表新增記錄</span></span><br><span class=\"line\">    <span class=\"type\">XcUserRole</span> <span class=\"variable\">xcUserRole</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">XcUserRole</span>(); </span><br><span class=\"line\">    xcUserRole.setId(UUID.randomUUID().toString()); </span><br><span class=\"line\">    xcUserRole.setUserId(userId); </span><br><span class=\"line\">    xcUserRole.setRoleId(<span class=\"string\">&quot;17&quot;</span>);<span class=\"comment\">//学生角色 </span></span><br><span class=\"line\">    xcUserRoleMapper.insert(xcUserRole); </span><br><span class=\"line\">    <span class=\"keyword\">return</span> xcUser; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>調用保存用户信息方法，</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@Autowired</span> </span><br><span class=\"line\">WxAuthServiceImpl currentProxy; </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> XcUser <span class=\"title function_\">wxAuth</span><span class=\"params\">(String code)</span>&#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//收到code调用微信接口申请access_token </span></span><br><span class=\"line\">    Map&lt;String, String&gt; access_token_map = getAccess_token(code); </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(access_token_map==<span class=\"literal\">null</span>)&#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"comment\">//System.out.println(access_token_map); </span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">openid</span> <span class=\"operator\">=</span> access_token_map.get(<span class=\"string\">&quot;openid&quot;</span>); </span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">access_token</span> <span class=\"operator\">=</span> access_token_map.get(<span class=\"string\">&quot;access_token&quot;</span>); </span><br><span class=\"line\">    <span class=\"comment\">//拿access_token查询用户信息 </span></span><br><span class=\"line\">    Map&lt;String, String&gt; userinfo = getUserinfo(access_token, openid); </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(userinfo==<span class=\"literal\">null</span>)&#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"comment\">//将用户信息保存到数据库 </span></span><br><span class=\"line\">    <span class=\"type\">XcUser</span> <span class=\"variable\">xcUser</span> <span class=\"operator\">=</span> currentProxy.addWxUser(userinfo); </span><br><span class=\"line\">    <span class=\"keyword\">return</span> xcUser; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<blockquote><p>注意：非事務方法調用事務方法，要使用代理物件調用，前面也提到這點<br>\n這裡的 addWxUser () 方法涉及了多表操作，所以需要進行事務控制，而 wxAuth () 是非事務方法，所以這裡我們需要注入自身，然後呼叫 addWxUser ()</p>\n</blockquote>\n<p>重啟服務，掃碼登入測試，登入成功，並在數據庫記錄了微信用戶的信息！</p>\n<img data-src=\"/John/img/java/SpringSecurity/20.png\" class=\"abc\">\n<img data-src=\"/John/img/java/SpringSecurity/21.png\" class=\"abc\">\n<p><span class=\"rainbow\">總結</span>:<br>\n1️⃣從微信拿到 JS 文件代碼在前端顯示，當用戶掃碼同意後，url 會重定向我們指定的地址</p>\n<figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = new WxLogin(&#123; </span><br><span class=\"line\">self_redirect:true, </span><br><span class=\"line\">id:&quot;login_container&quot;,  </span><br><span class=\"line\">appid: &quot;網站應用審核通過後獲得&quot;,  </span><br><span class=\"line\">scope: &quot;&quot;,  </span><br><span class=\"line\">redirect_uri: http://localhost:8160/auth/wxLogin&quot;, </span><br><span class=\"line\"> state: &quot;&quot;, </span><br><span class=\"line\">style: &quot;&quot;, </span><br><span class=\"line\">href: &quot;&quot; </span><br><span class=\"line\">&#125;); </span><br></pre></td></tr></table></figure>\n<p>2️⃣會重定向本項目 wxLogin 的 API, 執行 wxAuth 方法<br>\n3️⃣wxAuth 方法會用 restTemplate 遠程調用微信接口：申請令牌、拿著令牌查詢用戶信息，並保存到我們的數據庫<br>\n4️⃣執行完 wxAuth 方法，因為我們數據庫已有用戶信息，所以最後會重定向到項目的統一認證登錄入口，並執行 execute 方法自動登入</p>\n <img data-src=\"https://i.makeagif.com/media/9-15-2015/bQkqor.gif\" class=\"abc\" width=\"600\" height=\"350\">\n",
            "tags": [
                "SpringSecurity"
            ]
        },
        {
            "id": "https://superrjohn.github.io/John/2023/10/30/java/SpringSecurity/SpringSecurity",
            "url": "https://superrjohn.github.io/John/2023/10/30/java/SpringSecurity/SpringSecurity",
            "title": "SpringSecurity 認證授權",
            "date_published": "2023-10-30T14:10:06.589Z",
            "content_html": "<p>在此特别感謝黑馬程序員提供的課程: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWo4NDExTjdCbS8=\">學成在線</span></p>\n<p>前言<br>\n於由實習項目快做完才做記錄，而且項目模塊較多，故挑部份來記錄，所以這遍主要是 SpringSecurity 內容。<br>\n<span class=\"rainbow\">完整项目地址</span>：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3N1cGVycmpvaG4vamF2YV93ZWI=\">https://github.com/superrjohn/java_web</span></p>\n<h1 id=\"模塊需求分析\"><a class=\"markdownIt-Anchor\" href=\"#模塊需求分析\">#</a> 模塊需求分析</h1>\n<p>什麼是認證授權？<br>\n<span class=\"yellow\"> 什麼是認證？</span></p>\n<blockquote><p>認證即使用者去存取系統資源時系統要求驗證使用者的身分訊息，身分合法方可繼續存取。 常見的用戶身份認證的表現形式有：用戶名密碼登錄，微信掃碼等方式。</p>\n</blockquote>\n<p><span class=\"yellow\">什麼是授權？</span></p>\n<blockquote><p>使用者認證通過後去存取系統的資源，系統會判斷使用者是否擁有存取資源的權限，只允許存取有權限的系統資源，沒有權限的資源將無法存取。</p>\n</blockquote>\n<h2 id=\"業務流程\"><a class=\"markdownIt-Anchor\" href=\"#業務流程\">#</a> 業務流程</h2>\n<p>1️⃣統一認證：計畫包括學生、學習機構的老師、平台營運人員三類用戶，三類用戶將使用統一的認證入口。</p>\n <img data-src=\"/John/img/java/SpringSecurity/2.png\" class=\"abc\" width=\"600\" height=\"350\">\n<p>2️⃣單點登陸：單一登入（Single Sign On），簡稱 SSO，是目前較流行的企業業務整合的解決方案之一。 SSO 的定義是在多個應用系統中，使用者只需要登入一次就可以存取所有互信的應用系統。</p>\n<p>3️⃣第三方認證：掃碼登入的功能，如：微信掃碼登入、QQ 掃碼登入等。 掃碼登入的好處是用戶不用輸入帳號和密碼，省去用戶註冊的成本，是一種非常有效的推廣手段。</p>\n<h1 id=\"spring-security-認證研究\"><a class=\"markdownIt-Anchor\" href=\"#spring-security-認證研究\">#</a> Spring Security 認證研究</h1>\n<h2 id=\"spring-security介紹\"><a class=\"markdownIt-Anchor\" href=\"#spring-security介紹\">#</a> Spring Security 介紹</h2>\n<p>認證功能幾乎是每個專案都要具備的功能，而且它與業務無關，市面上有許多認證框架，例如：Apache Shiro、CAS、Spring Security 等。 由於本專案是基於 Spring Cloud 技術構建，Spring Security 是 spring 家族的一份子且和 Spring Cloud 整合的很好，因此本專案選用 Spring Security 作為認證服務的技術框架。</p>\n<p>Spring Security 是一個功能強大且高度可自訂的身份驗證和存取控制框架，它是一個專注於為 Java 應用程式提供身份驗證和授權的框架。</p>\n<p>專案首頁：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcHJpbmcuaW8vcHJvamVjdHMvc3ByaW5nLXNlY3VyaXR5\">https://spring.io/projects/spring-security</span></p>\n<p>Spring cloud Security： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcHJpbmcuaW8vcHJvamVjdHMvc3ByaW5nLWNsb3VkLXNlY3VyaXR5\">https://spring.io/projects/spring-cloud-security</span></p>\n<h3 id=\"認證授權入門\"><a class=\"markdownIt-Anchor\" href=\"#認證授權入門\">#</a> 認證授權入門</h3>\n<p>1️⃣部署認證服務工程</p>\n<p>從課程資料拷貝 xuecheng-plus-auth 工程到自己的工程目錄下。</p>\n<p>此工程是一個普通的 spring boot 工程，可以連接資料庫。</p>\n<p>此工程不具備認證授權的功能。</p>\n<p>2️⃣建立資料庫</p>\n<p>建立 xc_users 資料庫</p>\n<p>匯入課程資料中的 xcplus_users.sql 腳本。</p>\n<p>3️⃣修改配置文件和在 nacos 註冊，端口為 63070</p>\n<h3 id=\"認證測試\"><a class=\"markdownIt-Anchor\" href=\"#認證測試\">#</a> 認證測試</h3>\n<p>1️⃣下邊向 auth 認證工程整合 Spring security，向 pom.xml 加入 Spring Security 所需的依賴</p>\n<figure class=\"highlight xml\"><figcaption><span>pom.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-security<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-oauth2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span> </span><br></pre></td></tr></table></figure>\n<p>2️⃣初始工程自備了一個 Controller 類，如下：</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span> </span><br><span class=\"line\"><span class=\"meta\">@RestController</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LoginController</span> &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"meta\">@Autowired</span> </span><br><span class=\"line\">  XcUserMapper userMapper; </span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"meta\">@RequestMapping(&quot;/login-success&quot;)</span> </span><br><span class=\"line\">  <span class=\"keyword\">public</span> String <span class=\"title function_\">loginSuccess</span><span class=\"params\">()</span>&#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;登录成功&quot;</span>; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"meta\">@RequestMapping(&quot;/user/&#123;id&#125;&quot;)</span> </span><br><span class=\"line\">  <span class=\"keyword\">public</span> XcUser <span class=\"title function_\">getuser</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> String id)</span>&#123; </span><br><span class=\"line\">    <span class=\"type\">XcUser</span> <span class=\"variable\">xcUser</span> <span class=\"operator\">=</span> userMapper.selectById(id); </span><br><span class=\"line\">    <span class=\"keyword\">return</span> xcUser; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"meta\">@RequestMapping(&quot;/r/r1&quot;)</span> </span><br><span class=\"line\">  <span class=\"keyword\">public</span> String <span class=\"title function_\">r1</span><span class=\"params\">()</span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;访问r1资源&quot;</span>; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"meta\">@RequestMapping(&quot;/r/r2&quot;)</span> </span><br><span class=\"line\">  <span class=\"keyword\">public</span> String <span class=\"title function_\">r2</span><span class=\"params\">()</span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;访问r2资源&quot;</span>; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>3️⃣在資料中找到 WebSecurityConfig 設定類放到本工程中，它繼承 WebSecurityConfigurerAdapter, 它有三部份內容:<br>\n1. 用戶資訊：在記憶體配置兩個使用者：zhangsan、lisi,zhangsan 使用者擁有的權限為 p1,lisi 使用者擁有的權限為 p2</p>\n<p>2、密碼方式：暫時採用明文方式</p>\n<p>3. 安全攔截機制:/r/** 開頭的請求需要認證，登入成功到成功頁面，程式碼如下：</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//配置用户信息服务 </span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> UserDetailsService <span class=\"title function_\">userDetailsService</span><span class=\"params\">()</span> &#123; </span><br><span class=\"line\">    <span class=\"comment\">//这里配置用户信息,这里暂时使用这种方式将用户存储在内存中 </span></span><br><span class=\"line\">    <span class=\"type\">InMemoryUserDetailsManager</span> <span class=\"variable\">manager</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InMemoryUserDetailsManager</span>(); </span><br><span class=\"line\">        manager.createUser(User.withUsername(<span class=\"string\">&quot;zhangsan&quot;</span>).password(<span class=\"string\">&quot;123&quot;</span>).authorities(<span class=\"string\">&quot;p1&quot;</span>).build()); </span><br><span class=\"line\">        manager.createUser(User.withUsername(<span class=\"string\">&quot;lisi&quot;</span>).password(<span class=\"string\">&quot;456&quot;</span>).authorities(<span class=\"string\">&quot;p2&quot;</span>).build()); </span><br><span class=\"line\">        <span class=\"keyword\">return</span> manager; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Bean</span> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> PasswordEncoder <span class=\"title function_\">passwordEncoder</span><span class=\"params\">()</span> &#123; </span><br><span class=\"line\">        <span class=\"comment\">//密码为明文方式 </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> NoOpPasswordEncoder.getInstance(); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//配置安全拦截机制 </span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span> </span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123; </span><br><span class=\"line\">        http </span><br><span class=\"line\">                .authorizeRequests() </span><br><span class=\"line\">                .antMatchers(<span class=\"string\">&quot;/r/**&quot;</span>).authenticated()<span class=\"comment\">//访问/r开始的请求需要认证通过 </span></span><br><span class=\"line\">                .anyRequest().permitAll()<span class=\"comment\">//其它请求全部放行 </span></span><br><span class=\"line\">                .and() </span><br><span class=\"line\">                .formLogin().successForwardUrl(<span class=\"string\">&quot;/login-success&quot;</span>);<span class=\"comment\">//登录成功跳转到/login-success </span></span><br><span class=\"line\">                http.logout().logoutUrl(<span class=\"string\">&quot;/logout&quot;</span>);<span class=\"comment\">//退出地址 </span></span><br><span class=\"line\">    &#125; </span><br></pre></td></tr></table></figure>\n<p>1. 訪問 localhost:63070/auth/login<br>\n2. 輸入帳號 zhangsan, 密碼 123<br>\n3. 登錄成功後，頁面會跳轉，這樣認證身份就完成了</p>\n<p>4️⃣添加授權<br>\n🔴使用者認證透過去存取系統資源時 spring security 進行授權控制，判斷使用者是否有該資源的存取權限，如果有則繼續訪問，如果沒有則拒絕存取。<br>\n1. 在 WebSecurityConfig 類別設定 zhangsan 擁有 p1 權限，lisi 擁有 p2 權限。</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> UserDetailsService <span class=\"title function_\">userDetailsService</span><span class=\"params\">()</span> &#123; </span><br><span class=\"line\">    <span class=\"comment\">//这里配置用户信息,这里暂时使用这种方式将用户存储在内存中 </span></span><br><span class=\"line\">    <span class=\"type\">InMemoryUserDetailsManager</span> <span class=\"variable\">manager</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InMemoryUserDetailsManager</span>(); </span><br><span class=\"line\">    manager.createUser(User.withUsername(<span class=\"string\">&quot;zhangsan&quot;</span>).password(<span class=\"string\">&quot;123&quot;</span>).authorities(<span class=\"string\">&quot;p1&quot;</span>).build()); </span><br><span class=\"line\">    manager.createUser(User.withUsername(<span class=\"string\">&quot;lisi&quot;</span>).password(<span class=\"string\">&quot;456&quot;</span>).authorities(<span class=\"string\">&quot;p2&quot;</span>).build()); </span><br><span class=\"line\">    <span class=\"keyword\">return</span> manager; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>2. 在 controller 中配置 /r/r1 需要 p1 權限，/r/r2 需要 p2 權限。</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LoginController</span> &#123; </span><br><span class=\"line\">    .... </span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/r/r1&quot;)</span> </span><br><span class=\"line\">    <span class=\"meta\">@PreAuthorize(&quot;hasAuthority(&#x27;p1&#x27;)&quot;)</span><span class=\"comment\">//拥有p1权限方可访问 </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">r1</span><span class=\"params\">()</span>&#123; </span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;访问r1资源&quot;</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/r/r2&quot;)</span> </span><br><span class=\"line\">    <span class=\"meta\">@PreAuthorize(&quot;hasAuthority(&#x27;p2&#x27;)&quot;)</span><span class=\"comment\">//拥有p2权限方可访问 </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">r2</span><span class=\"params\">()</span>&#123; </span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;访问r2资源&quot;</span>; </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    ... </span><br></pre></td></tr></table></figure>\n<p>現在當用戶訪問 /r/r1 時，url 會判斷用戶有沒有訪問權限 p1, 所以 zhangsan 可以成功訪問，而 lisi 不能，因為 lisi 的權限為 p2</p>\n<img data-src=\"/John/img/java/SpringSecurity/r1r2.png\" class=\"abc\">\n<p>5️⃣工作原理<br>\n Spring Security 對 Web 資源的保護是靠 Filter 實現的，所以從這個 Filter 來入手，逐步深入 Spring Security 原理。 當初始化 Spring Security 時，會建立一個名為 SpringSecurityFilterChain 的 Servlet 過濾器，類型為 org.springframework.security.web.FilterChainProxy，它實作了 javax.servlet.Filter，因此外部的要求會經過此類，下圖是 Spring Security 過慮器鏈結構圖：</p>\n<img data-src=\"/John/img/java/SpringSecurity/3.png\" class=\"abc\" width=\"400\" height=\"300\">\n<p>FilterChainProxy 是一個代理，真正運作的是 FilterChainProxy 中 SecurityFilterChain 所包含的各個 Filter，而 Filter 不會直接處理認證和授權，而是把它們交給了認證管理器（AuthenticationManager）和決策管理器（AccessDecisionManager）進行處理。</p>\n<h1 id=\"oauth2認證流程\"><a class=\"markdownIt-Anchor\" href=\"#oauth2認證流程\">#</a> OAuth2 認證流程</h1>\n<p>在前邊我們提到微信掃碼認證，這是一種第三方認證的方式，這種認證方式是基於 OAuth2 協定實現，</p>\n<p>OAUTH 協定為使用者資源的授權提供了一個安全的、開放而又簡易的標準。 同時，任何第三方都可以使用 OAUTH 認證服務，任何服務提供者都可以實現自身的 OAUTH 認證服務，因而 OAUTH 是開放的。 業界提供了 OAUTH 的多種實作如 PHP、JavaScript，Java，Ruby 等各種語言開發包，大大節省了程式設計師的時間，因而 OAUTH 是簡易的。 網路許多服務如 Open API，許多大公司如穀歌，Yahoo，Microsoft 等都提供了 OAUTH 認證服務，這些都足以說明 OAUTH 標準逐漸成為開放資源授權的標準。</p>\n<pre><code>     Oauth協定目前發展到2.0版本，1.0版本過於複雜，2.0版本已廣泛應用。\n</code></pre>\n<p>參考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9vQXV0aC83MTUzMTM0P2ZyPWFsYWRkaW4=\">https://baike.baidu.com/item/oAuth/7153134?fr=aladdin</span></p>\n<p>Oauth 協議：<span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzY3NDk=\">https://tools.ietf.org/html/rfc6749</span></p>\n<p>現在搞清楚幾個概念：</p>\n<p><span class=\"green\">資源</span>：使用者訊息，在微信中儲存。</p>\n<p><span class=\"green\">資源擁有者</span>：使用者是使用者資訊資源的擁有者。</p>\n<p><span class=\"green\">認證服務</span>：微信負責認證目前使用者的身份，負責為客戶端頒發令牌。</p>\n<p><span class=\"green\">客戶端</span>：客戶端會攜帶令牌請求微信獲取使用者訊息，黑馬程式設計師網站即客戶端，黑馬網站需要在瀏覽器中開啟。</p>\n<img data-src=\"/John/img/java/SpringSecurity/4.png\" class=\"abc\" width=\"700\" height=\"300\">\n<p>1. 用戶進入到網站打開掃碼界面，進行微信掃碼<br>\n 2. 微信返回信息，詢問用戶是否授權客戶端使用個人資料，用戶按同意<br>\n 3. 微信下發授權碼，網站應用帶著授權碼申請令牌，微信下發令牌 (過程不可見)<br>\n 4. 網站應用帶著令牌請求用戶個人信息，成功並返回網站應用 (過程不可見)<br>\n 5. 用戶登錄成功</p>\n<h2 id=\"oauth2在本項目的應用\"><a class=\"markdownIt-Anchor\" href=\"#oauth2在本項目的應用\">#</a> OAuth2 在本項目的應用</h2>\n<p>了解微信掃碼登入黑馬網站的流程，接下來認識 Oauth2.0 的認證流程，引自 Oauth2.0 協定 rfc6749 <span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzY3NDk=\">https://tools.ietf.org/html/rfc6749</span> ,<br>\nOauth2 是一個標準的開放的授權協議，用於應用程式需要用到第三方平台的資源，應用程式可以根據自己的要求去使用 Oauth2，本專案使用 Oauth2 實現以下目標：<br>\n1️⃣學成在線上存取第三方系統的資源。</p>\n<p>本專案要存取微信掃碼登入所以本專案要使用 OAuth2 協定存取微信中的使用者資訊。</p>\n<p>2️⃣外部系統訪問學成在線的資源 。</p>\n<p>同樣當第三方系統想要存取學成線上網站的資源也可以基於 OAuth2 協議。</p>\n<p>3️⃣學成線上前端（客戶端） 存取學成線上微服務的資源。</p>\n<p>本專案是前後端分離架構，前端存取微服務資源也可以基於 OAuth2 協定進行認證。</p>\n<h2 id=\"oauth2的授權模式\"><a class=\"markdownIt-Anchor\" href=\"#oauth2的授權模式\">#</a> OAuth2 的授權模式</h2>\n<p>Spring Security 支援 OAuth2 認證，OAuth2 提供授權碼模式、密碼模式、簡化模式、客戶端模式等四種授權模式，本項目只會用授權碼模式、密碼模式。<br>\n授權碼模式簡單瞭解是使用授權碼去取得令牌，要想取得令牌先要取得授權碼，授權碼的取得需要資源擁有者親自授權同意才可以取得。</p>\n<p>下圖是授權碼模式的互動圖：</p>\n<img data-src=\"/John/img/java/SpringSecurity/5.png\" class=\"abc\" width=\"600\" height=\"400\">\n<h3 id=\"授權碼模式測試\"><a class=\"markdownIt-Anchor\" href=\"#授權碼模式測試\">#</a> 授權碼模式測試</h3>\n<p>若要測試授權模式首先要設定授權伺服器即上圖中的認證伺服器，需要設定授權服務及令牌策略。<br>\n1️⃣從課程資料拷貝 AuthorizationServer.java、TokenConfig.java 到認證服務的 config 套件下。<br>\n說明：AuthorizationServer 用 @EnableAuthorizationServer 註解標識並繼承 AuthorizationServerConfigurerAdapter 來設定 OAuth2.0 授權伺服器。</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span> </span><br><span class=\"line\"><span class=\"meta\">@EnableAuthorizationServer</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AuthorizationServer</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AuthorizationServerConfigurerAdapter</span> &#123; </span><br><span class=\"line\">... </span><br></pre></td></tr></table></figure>\n<p>2️⃣AuthorizationServerConfigurerAdapter 要求配置以下幾個類別：</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AuthorizationServerConfigurerAdapter</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AuthorizationServerConfigurer</span> &#123; </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">AuthorizationServerConfigurerAdapter</span><span class=\"params\">()</span> &#123;&#125; </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configure</span><span class=\"params\">(AuthorizationServerSecurityConfigurer security)</span> <span class=\"keyword\">throws</span> Exception &#123;&#125; </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configure</span><span class=\"params\">(ClientDetailsServiceConfigurer clients)</span> <span class=\"keyword\">throws</span> Exception &#123;&#125; </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configure</span><span class=\"params\">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class=\"keyword\">throws</span> Exception &#123;&#125; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>1）ClientDetailsServiceConfigurer：用來設定客戶端詳情服務（ClientDetailsService），</p>\n<p>隨便一個客戶端都可以隨便接取它的認證服務嗎？ 答案是否定的，服務提供者會給批准存取的客戶端一個身份，用於存取時的憑證，有客戶端標識和客戶端秘鑰，在這裡配置批准存取的客戶端的詳細資訊。</p>\n<p>2）AuthorizationServerEndpointsConfigurer：用來設定令牌（token）的存取端點和令牌服務 (token services)。</p>\n<p>3）AuthorizationServerSecurityConfigurer：用來設定令牌端點的安全性限制.</p>\n<p>2、TokenConfig 為令牌策略配置類</p>\n<p>暫時先使用 InMemoryTokenStore 在記憶體儲存令牌，令牌的有效期限等資訊配置如下：</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//令牌管理服务 </span></span><br><span class=\"line\"><span class=\"meta\">@Bean(name=&quot;authorizationServerTokenServicesCustom&quot;)</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> AuthorizationServerTokenServices <span class=\"title function_\">tokenService</span><span class=\"params\">()</span> &#123; </span><br><span class=\"line\">    DefaultTokenServices service=<span class=\"keyword\">new</span> <span class=\"title class_\">DefaultTokenServices</span>(); </span><br><span class=\"line\">    service.setSupportRefreshToken(<span class=\"literal\">true</span>);<span class=\"comment\">//支持刷新令牌 </span></span><br><span class=\"line\">    service.setTokenStore(tokenStore);<span class=\"comment\">//令牌存储策略 </span></span><br><span class=\"line\">    service.setAccessTokenValiditySeconds(<span class=\"number\">7200</span>); <span class=\"comment\">// 令牌默认有效期2小时 </span></span><br><span class=\"line\">    service.setRefreshTokenValiditySeconds(<span class=\"number\">259200</span>); <span class=\"comment\">// 刷新令牌默认有效期3天 </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> service; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>3️⃣配置認證管理 bean</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableWebSecurity</span> </span><br><span class=\"line\"><span class=\"meta\">@EnableGlobalMethodSecurity(securedEnabled = true,prePostEnabled = true)</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebSecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebSecurityConfigurerAdapter</span> &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Bean</span> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> AuthenticationManager <span class=\"title function_\">authenticationManagerBean</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.authenticationManagerBean(); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    .... </span><br></pre></td></tr></table></figure>\n<p>4️⃣重啟認證服務</p>\n<p>1.get 請求取得授權碼</p>\n<p>位址: <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo2MzA3MC9hdXRoL29hdXRoL2F1dGhvcml6ZT9jbGllbnRfaWQ9WGNXZWJBcHAmYW1wO3Jlc3BvbnNlX3R5cGU9Y29kZSZhbXA7c2NvcGU9YWxsJmFtcDtyZWRpcmVjdF91cmk9aHR0cDovL3d3dy41MXh1ZWNoZW5nLmNu\">http://localhost:63070/auth/oauth/authorize?client_id=XcWebApp&amp;response_type=code&amp;scope=all&amp;redirect_uri=http://www.51xuecheng.cn</span></p>\n<p>參數列表如下：</p>\n<p>client_id：客戶端准入標識。</p>\n<p>response_type：授權碼模式固定為 code。</p>\n<p>scope：客戶端權限。</p>\n<p>redirect_uri：跳轉 uri，授權碼申請成功後會跳到此位址，後邊帶上 code 參數（授權碼）。</p>\n<p>輸入帳號 zhangsan、密碼 123 登入成功，輸入 /oauth/authorize?client_id=XcWebApp&amp;response_type=code&amp;scope=all&amp;redirect_uri=<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy41MXh1ZWNoZW5nLmNu\">http://www.51xuecheng.cn</span></p>\n<p>顯示授權頁面</p>\n<img data-src=\"/John/img/java/SpringSecurity/6.png\" class=\"abc\">\n<p>授權「XcWebApp」存取自己的受保護資源？</p>\n<p>選擇同意。</p>\n<p>2. 請求成功，重新導向至<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy41MXh1ZWNoZW5nLmNuLz9jb2RlPSVFNiU4RSU4OCVFNiVBQyU4QSVFNyVBMiVCQyVFRiVCQyU4QyVFNCVCRSU4QiVFNSVBNiU4MiVFRiVCQyU5QWh0dHA6Ly93d3cuNTF4dWVjaGVuZy5jbi8/Y29kZT1XcWpiNUg=\"> http://www.51xuecheng.cn/?code = 授權碼，例如：http://www.51xuecheng.cn/?code=Wqjb5H</span><br>\n3. 使用 httpclient 工具 post 申請令牌</p>\n<p>/oauth/token?client_id=XcWebApp&amp;client_secret=XcWebApp&amp;grant_type=authorization_code&amp;code = 授權碼 &amp; redirect_uri=<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy41MXh1ZWNoZW5nLmNuLw==\">http://www.51xuecheng.cn/</span></p>\n<p>參數列表如下</p>\n<p>client_id：客戶端准入標識。</p>\n<p>client_secret：客戶端秘鑰。</p>\n<p>grant_type：授權類型，填入 authorization_code，表示授權碼模式</p>\n<p>code：授權碼，就是剛剛取得的授權碼，注意：授權碼只使用一次就無效了，需要重新申請。</p>\n<p>redirect_uri：申請授權碼時的跳到 url，一定和申請授權碼時用的 redirect_uri 一致。</p>\n<p>httpclient 腳本如下：</p>\n<figure class=\"highlight text\"><figcaption><span>text</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 第二步申请令牌 </span><br><span class=\"line\">POST &#123;&#123;auth_host&#125;&#125;/auth/oauth/token?client_id=XcWebApp&amp;client_secret=XcWebApp&amp;grant_type=authorization_code&amp;code=CTvCrB&amp;redirect_uri=http://www.51xuecheng.cn1</span><br></pre></td></tr></table></figure>\n<p>申請令牌成功如下所示：</p>\n<figure class=\"highlight json\"><figcaption><span>json</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;access_token&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;368b1ee7-a9ee-4e9a-aae6-0fcab243aad2&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;token_type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;bearer&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;refresh_token&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;3d56e139-0ee6-4ace-8cbe-1311dfaa991f&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;expires_in&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">7199</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;scope&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;all&quot;</span> </span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span> </span><br></pre></td></tr></table></figure>\n<p>說明：<br>\n1、access_token，存取令牌，用於存取資源使用。<br>\n2、token_type，bearer 是在 RFC6750 中定義的一種 token 類型，在攜帶令牌存取資源時需要在 head 中加入 bearer 空格 令牌內容<br>\n 3、refresh_token，當令牌快過期時使用刷新令牌可以再次產生令牌。<br>\n4、expires_in：過期時間（秒）<br>\n5、scope，令牌的權限範圍，服務端可以根據令牌的權限範圍去對令牌授權。</p>\n<h3 id=\"密碼模式\"><a class=\"markdownIt-Anchor\" href=\"#密碼模式\">#</a> 密碼模式</h3>\n<p>密碼模式相對授權碼模式簡單，授權碼模式需使用瀏覽器供使用者親自授權，密碼模式不用使用瀏覽器<br>\n 1. 資源擁有者提供帳號及密碼</p>\n<p>2、客戶端向認證服務申請令牌，請求中攜帶帳號及密碼</p>\n<p>3、認證服務校驗帳號及密碼正確核發令牌。<br>\n1、POST 請求取得令牌</p>\n<p>/oauth/token?client_id=XcWebApp&amp;client_secret=XcWebApp&amp;grant_type=password&amp;username=shangsan&amp;password=123</p>\n<p>參數列表如下：</p>\n<p>client_id：客戶端准入標識。</p>\n<p>client_secret：客戶端秘鑰。</p>\n<p>grant_type：授權類型，填入 password 表示密碼模式</p>\n<p>username：資源擁有者使用者名稱。</p>\n<p>password：資源擁有者密碼。</p>\n<p>2、授權伺服器將令牌（access_token）傳送給 client</p>\n<p>使用 httpclient 進行測試</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 密码模式 </span><br><span class=\"line\">POST &#123;&#123;auth_host&#125;&#125;/auth/oauth/token?client_id=XcWebApp&amp;client_secret=XcWebApp&amp;grant_type=password&amp;username=zhangsan&amp;password=<span class=\"number\">123</span> </span><br></pre></td></tr></table></figure>\n<p>返回示例：</p>\n<figure class=\"highlight json\"><figcaption><span>json</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;access_token&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;368b1ee7-a9ee-4e9a-aae6-0fcab243aad2&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;token_type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;bearer&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;refresh_token&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;3d56e139-0ee6-4ace-8cbe-1311dfaa991f&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;expires_in&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">6806</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;scope&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;all&quot;</span> </span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span> </span><br></pre></td></tr></table></figure>\n<h1 id=\"jwt令牌\"><a class=\"markdownIt-Anchor\" href=\"#jwt令牌\">#</a> JWT 令牌</h1>\n<h2 id=\"普通令牌的問題\"><a class=\"markdownIt-Anchor\" href=\"#普通令牌的問題\">#</a> 普通令牌的問題</h2>\n<p>客戶端申請到令牌，接下來客戶端攜帶令牌去存取資源，到資源伺服器將會校驗令牌的合法性。<br>\n資源伺服器如何校驗令牌的合法性？我們以 OAuth2 的密碼模式為例進行說明：</p>\n<img data-src=\"/John/img/java/SpringSecurity/7.png\" class=\"abc\" width=\"700\" height=\"400\">\n<p>🍉這裡存在一個問題：<br>\n就是校驗令牌需要遠端請求認證服務，客戶端的每次存取都會遠端校驗，執行效能低。<br>\n如果能夠讓資源服務自己校驗令牌的合法性將省去遠端請求認證服務的成本，提高了效能</p>\n<p>🍉如何解決上邊的問題，實現資源服務自行校驗令牌:</p>\n<h2 id=\"什么是jwt\"><a class=\"markdownIt-Anchor\" href=\"#什么是jwt\">#</a> 什么是 JWT</h2>\n<p>🟢令牌採用 JWT 格式即可解決上邊的問題，用戶認證通過後會得到一個 JWT 令牌，JWT 令牌中已經包括了用戶相關的信息，客戶端只需要攜帶 JWT 訪問資源服務，資源服務根據事先約定 的演算法自行完成令牌校驗，無需每次都請求認證服務完成授權。</p>\n<p>🟡JSON Web Token（JWT）是一種使用 JSON 格式傳遞資料的網路令牌技術，它是一個開放的行業標準（RFC 7519），它定義了一種簡潔的、自包含的協議格式，用於在通信 雙方傳遞 json 對象，傳遞的訊息經過數位簽章可以驗證和信任，它可以使用 HMAC 演算法或使用 RSA 的公鑰 / 私鑰對來簽名，防止內容篡改。 官網：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qd3QuaW8v\">https://jwt.io/</span></p>\n<p>🔴傳統的基於 session 的方式是有狀態認證，使用者登入成功將使用者的身份資訊儲存在服務端，這樣加大了服務端的儲存壓力，並且這種方式不適合在分散式系統中應用。<br>\n如下圖，當用戶訪問應用服務，每個應用服務都會去伺服器查看 session 信息，如果 session 中沒有該用戶則說明用戶沒有登錄，此時就會重新認證，而解決這個問題的方法是 Session 複製、Session 黏貼。</p>\n<img data-src=\"/John/img/java/SpringSecurity/8.png\" class=\"abc\" width=\"700\" height=\"400\">\n<p>🟢如果是基於令牌技術在分散式系統中實現認證則服務端不用儲存 session，可以將用戶識別資訊儲存在令牌中，用戶認證透過後認證服務頒發令牌給用戶，用戶將令牌儲存在客戶 端，去訪問應用服務時攜帶令牌去訪問，服務端從 jwt 解析出用戶資訊。 這個過程就是無狀態認證。</p>\n<p>JWT 令牌的優點：<br>\n1️⃣jwt 基於 json，非常方便解析。<br>\n2️⃣可以在令牌中自訂豐富的內容，易擴充。<br>\n3️⃣透過非對稱加密演算法及數位簽章技術，JWT 防止竄改，安全性高。<br>\n4️⃣資源服務使用 JWT 可不依賴認證服務即可完成授權。<br>\n缺點：<br>\nJWT 令牌較長，佔儲存空間比較大。</p>\n<p>JWT 令牌由三部分組成，每部分中間使用点（.）分隔，比如：xxxxx.yyyyy.zzzzz<br>\n1️⃣Header<br>\n 頭部包括令牌的類型（即 JWT）及使用的哈希算法（如 HMAC SHA256 或 RSA）<br>\n内容使用 Base64Url 编码，得到一个字符串就是 JWT 令牌的第一部分。</p>\n  <figure class=\"highlight json\"><figcaption><span>json</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"punctuation\">&#123;</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;alg&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;HS256&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;typ&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;JWT&quot;</span> </span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span> </span><br></pre></td></tr></table></figure>\n<p>2️⃣Payload<br>\n 第二部分是負載，內容也是一個 json 對象，它是存放有效資訊的地方，它可以存放 jwt 提供的資訊字段，例如：iss（簽發者）,exp（過期時間戳記）, sub（面向的使用者） 等，也可自訂欄位。<br>\n此部分不建議存放敏感訊息，因為此部分可以解碼還原原始內容。<br>\n最後將第二部分負載使用 Base64Url 編碼，得到一個字串就是 JWT 令牌的第二部分。</p>\n<figure class=\"highlight json\"><figcaption><span>json</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;sub&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1234567890&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;456&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;admin&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span> </span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span> </span><br></pre></td></tr></table></figure>\n<p>3️⃣Signature<br>\n 第三部分是簽名，此部分用於防止 jwt 內容被竄改。<br>\n這個部分使用 base64url 將前兩部分編碼，編碼後使用點（.）連接組成字串，最後使用 header 中聲明的簽章演算法進行簽章。</p>\n<figure class=\"highlight json\"><figcaption><span>json</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HMACSHA256( </span><br><span class=\"line\">  base64UrlEncode(header) + <span class=\"string\">&quot;.&quot;</span> + </span><br><span class=\"line\">  base64UrlEncode(payload)<span class=\"punctuation\">,</span> </span><br><span class=\"line\">  secret) </span><br></pre></td></tr></table></figure>\n<p><span class=\"green\">為什麼 JWT 可以防止篡改？</span></p>\n<blockquote><p>第三部分使用簽名演算法對第一部分和第二部分的內容進行簽名，常用的簽名演算法是 HS256，常見的還有 md5,sha 等，簽名演算法需要使用金鑰進行簽名，金鑰不對外公開，且 簽章是不可逆的，如果第三方更改了內容那麼伺服器驗證簽章就會失敗，要想保證驗證簽章正確必須保證內容、金鑰與簽章前一致。</p>\n</blockquote>\n<img data-src=\"/John/img/java/SpringSecurity/9.png\" class=\"abc\" width=\"700\" height=\"400\">\n<p>從上圖可以看出認證服務和資源服務使用相同的金鑰，這叫對稱加密，對稱加密效率高，如果一旦金鑰外洩可以偽造 jwt 令牌，JWT 還可以使用非對稱加密，認證服務自己保留私鑰，將公鑰下發給受信任的客戶端、資源服務，公鑰和私鑰是配對的，成對的公鑰和私鑰才可以正常 加密和解密，非對稱加密效率低但相比對稱加密非對稱加密更安全一些。</p>\n<h2 id=\"243-測試產生jwt令牌\"><a class=\"markdownIt-Anchor\" href=\"#243-測試產生jwt令牌\">#</a> 2.4.3 測試產生 JWT 令牌</h2>\n<p>1️⃣在認證服務中配置 jwt 令牌服務，即可實現產生 jwt 格式的令牌</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TokenConfig</span> &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">String</span> <span class=\"variable\">SIGNING_KEY</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;mq123&quot;</span>; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span> </span><br><span class=\"line\">    TokenStore tokenStore; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span> </span><br><span class=\"line\">    <span class=\"keyword\">private</span> JwtAccessTokenConverter accessTokenConverter; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Bean</span> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> TokenStore <span class=\"title function_\">tokenStore</span><span class=\"params\">()</span> &#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JwtTokenStore</span>(accessTokenConverter()); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Bean</span> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> JwtAccessTokenConverter <span class=\"title function_\">accessTokenConverter</span><span class=\"params\">()</span> &#123; </span><br><span class=\"line\">        <span class=\"type\">JwtAccessTokenConverter</span> <span class=\"variable\">converter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JwtAccessTokenConverter</span>(); </span><br><span class=\"line\">        converter.setSigningKey(SIGNING_KEY); </span><br><span class=\"line\">        <span class=\"keyword\">return</span> converter; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//令牌管理服务 </span></span><br><span class=\"line\">    <span class=\"meta\">@Bean(name=&quot;authorizationServerTokenServicesCustom&quot;)</span> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> AuthorizationServerTokenServices <span class=\"title function_\">tokenService</span><span class=\"params\">()</span> &#123; </span><br><span class=\"line\">        DefaultTokenServices service=<span class=\"keyword\">new</span> <span class=\"title class_\">DefaultTokenServices</span>(); </span><br><span class=\"line\">        service.setSupportRefreshToken(<span class=\"literal\">true</span>);<span class=\"comment\">//支持刷新令牌 </span></span><br><span class=\"line\">        service.setTokenStore(tokenStore);<span class=\"comment\">//令牌存储策略 </span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"type\">TokenEnhancerChain</span> <span class=\"variable\">tokenEnhancerChain</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TokenEnhancerChain</span>(); </span><br><span class=\"line\">        tokenEnhancerChain.setTokenEnhancers(Arrays.asList(accessTokenConverter)); </span><br><span class=\"line\">        service.setTokenEnhancer(tokenEnhancerChain); </span><br><span class=\"line\"> </span><br><span class=\"line\">        service.setAccessTokenValiditySeconds(<span class=\"number\">7200</span>); <span class=\"comment\">// 令牌默认有效期2小时 </span></span><br><span class=\"line\">        service.setRefreshTokenValiditySeconds(<span class=\"number\">259200</span>); <span class=\"comment\">// 刷新令牌默认有效期3天 </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> service; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2️⃣使用 httpclient 通过密码模式申请令牌</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 密码模式 </span><br><span class=\"line\">POST &#123;&#123;auth_host&#125;&#125;/oauth/token?client_id=XcWebApp&amp;client_secret=XcWebApp&amp;grant_type=password&amp;username=zhangsan&amp;password=<span class=\"number\">123</span> </span><br></pre></td></tr></table></figure>\n<p>生成 jwt 的示例如下：</p>\n<figure class=\"highlight json\"><figcaption><span>json</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;access_token&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsicmVzMSJdLCJ1c2VyX25hbWUiOiJ6aGFuZ3NhbiIsInNjb3BlIjpbImFsbCJdLCJleHAiOjE2NjQzMzE2OTUsImF1dGhvcml0aWVzIjpbInAxIl0sImp0aSI6ImU5ZDNkMGZkLTI0Y2ItNDRjOC04YzEwLTI1NmIzNGY4ZGZjYyIsImNsaWVudF9pZCI6ImMxIn0.-9SKI-qUqKhKcs8Gb80Rascx-JxqsNZxxXoPo82d8SM&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;token_type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;bearer&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;refresh_token&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsicmVzMSJdLCJ1c2VyX25hbWUiOiJ6aGFuZ3NhbiIsInNjb3BlIjpbImFsbCJdLCJhdGkiOiJlOWQzZDBmZC0yNGNiLTQ0YzgtOGMxMC0yNTZiMzRmOGRmY2MiLCJleHAiOjE2NjQ1ODM2OTUsImF1dGhvcml0aWVzIjpbInAxIl0sImp0aSI6ImRjNTRjNTRkLTA0YTMtNDIzNS04MmY3LTFkOWZkMmFjM2VmNSIsImNsaWVudF9pZCI6ImMxIn0.Wsw1Jc-Kd_GFqEugzdfoSsMY6inC8OQsraA21WjWtT8&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;expires_in&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">7199</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;scope&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;all&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;jti&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;e9d3d0fd-24cb-44c8-8c10-256b34f8dfcc&quot;</span> </span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span> </span><br></pre></td></tr></table></figure>\n<p>3️⃣我们可以通过 check_token 接口校验 jwt 令牌</p>\n<figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">###校验jwt令牌 </span><br><span class=\"line\">POST &#123;&#123;auth_host&#125;&#125;/oauth/check_token?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsicmVzMSJdLCJ1c2VyX25hbWUiOiJzdHUxIiwic2NvcGUiOlsiYWxsIl0sImV4cCI6MTY2NDM3MTc4MCwiYXV0aG9yaXRpZXMiOlsicDEiXSwianRpIjoiZjBhM2NkZWItMzk5ZC00OGYwLTg4MDQtZWNhNjM4YWQ4ODU3IiwiY2xpZW50X2lkIjoiYzEifQ.qy46CSCJsH3eXWTHgdcntZhzcSzfRQlBU0dxAjZcsUw </span><br></pre></td></tr></table></figure>\n<p>響應示例如下：</p>\n<figure class=\"highlight json\"><figcaption><span>json</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;aud&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span> </span><br><span class=\"line\">    <span class=\"string\">&quot;res1&quot;</span> </span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;user_name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;zhangsan&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;scope&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span> </span><br><span class=\"line\">    <span class=\"string\">&quot;all&quot;</span> </span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;active&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;exp&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">1664371780</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;authorities&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span> </span><br><span class=\"line\">    <span class=\"string\">&quot;p1&quot;</span> </span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;jti&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;f0a3cdeb-399d-48f0-8804-eca638ad8857&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">  <span class=\"attr\">&quot;client_id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;c1&quot;</span> </span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span> </span><br></pre></td></tr></table></figure>\n<h2 id=\"網關認證\"><a class=\"markdownIt-Anchor\" href=\"#網關認證\">#</a> 網關認證</h2>\n<img data-src=\"/John/img/java/SpringSecurity/10.png\" class=\"abc\">\n<p>🟡所有存取微服務的請求都要經過網關，在網關進行使用者身分的認證可以將許多非法的請求攔截到微服務以外，這叫做網關認證。</p>\n<p>下邊需要明確網關的職責：</p>\n<p>1、網站白名單維護：針對不用認證的 URL 全部放行。</p>\n<p>2、校驗 jwt 的合法性：除了白名單剩下的就是需要認證的請求，網關需要驗證 jwt 的合法性，jwt 合法則說明用戶身份合法，否則說明身份不合法則拒絕繼續訪問。</p>\n<p>🟡網關負責授權嗎？</p>\n<p>網關不負責授權，對請求的授權操作在各個微服務進行，因為微服務最清楚使用者有哪些權限存取哪些介面。</p>\n<h2 id=\"實現網關認證\"><a class=\"markdownIt-Anchor\" href=\"#實現網關認證\">#</a> 實現網關認證</h2>\n<p>下邊實現網關認證，實現以下職責：</p>\n<p>1️⃣網站白名單維護</p>\n<p>針對不用認證的 URL 全部放行。</p>\n<p>2️⃣校驗 jwt 的合法性。</p>\n<p>除了白名單剩下的就是需要認證的請求，網關需要驗證 jwt 的合法性，jwt 合法則說明用戶身份合法，否則說明身份不合法則拒絕繼續訪問。</p>\n<p>1️⃣在網關工程添加依賴</p>\n<figure class=\"highlight xml\"><figcaption><span>XML</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-security<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-oauth2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span> </span><br></pre></td></tr></table></figure>\n<p>2️⃣拷貝課程資料下網關認證配置類別到網關工程的 config 包下。</p>\n<p>3️⃣設定白名單檔 security-whitelist.properties</p>\n<figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**=临时全部放行 </span><br><span class=\"line\">/auth/**=认证地址 </span><br><span class=\"line\">/content/open/**=内容管理公开访问接口 </span><br><span class=\"line\">/media/open/**=媒资管理公开访问接口 </span><br></pre></td></tr></table></figure>\n<p>重啟網關工程，進行測試<br>\n 1、申請令牌<br>\n 2、透過網關存取資源服務<br>\n這裡存取內容管理服務</p>\n<figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 通过网关访问资源服务 </span><br><span class=\"line\">GET http://localhost:63010/content/course/2 </span><br><span class=\"line\">Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsicmVzMSJdLCJ1c2VyX25hbWUiOiJ6aGFuZ3NhbiIsInNjb3BlIjpbImFsbCJdLCJleHAiOjE2NjQzNjIzMTAsImF1dGhvcml0aWVzIjpbInAxIl0sImp0aSI6Ijc2OTkwMGNiLWM1ZjItNGRiNC1hZWJmLWY1MzgxZDQxZWMyZCIsImNsaWVudF9pZCI6ImMxIn0.lOITjUgYg2HCh5mDPK9EvJJqz-tIupKVfmP8yWJQIKs </span><br></pre></td></tr></table></figure>\n<p>現在我們的網關作用:1️⃣路由轉發2️⃣認證和校驗 JWT 令牌的合法性3️⃣維護一份白名單</p>\n<h1 id=\"用户認證\"><a class=\"markdownIt-Anchor\" href=\"#用户認證\">#</a> 用户認證</h1>\n<h2 id=\"連結用戶中心資料庫\"><a class=\"markdownIt-Anchor\" href=\"#連結用戶中心資料庫\">#</a> 連結用戶中心資料庫</h2>\n<p>我們要在認證服務中連接用戶中心資料庫查詢用戶資訊。</p>\n<p>前邊學習 Spring Security 運作原理時有一張執行流程圖，如下圖：</p>\n<img data-src=\"/John/img/java/SpringSecurity/11.png\" class=\"abc\">\n<p>使用者提交帳號和密碼由 DaoAuthenticationProvider 呼叫 UserDetailsService 的 loadUserByUsername () 方法取得 UserDetails 使用者資訊。</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserDetailsService</span> &#123; </span><br><span class=\"line\">    UserDetails <span class=\"title function_\">loadUserByUsername</span><span class=\"params\">(String var1)</span> <span class=\"keyword\">throws</span> UsernameNotFoundException; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>UserDetails 是用户信息接口</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserDetails</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Serializable</span> &#123; </span><br><span class=\"line\">    Collection&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">GrantedAuthority</span>&gt; getAuthorities(); </span><br><span class=\"line\"> </span><br><span class=\"line\">    String <span class=\"title function_\">getPassword</span><span class=\"params\">()</span>; </span><br><span class=\"line\"> </span><br><span class=\"line\">    String <span class=\"title function_\">getUsername</span><span class=\"params\">()</span>; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">isAccountNonExpired</span><span class=\"params\">()</span>; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">isAccountNonLocked</span><span class=\"params\">()</span>; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">isCredentialsNonExpired</span><span class=\"params\">()</span>; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">isEnabled</span><span class=\"params\">()</span>; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>我們只要實作 UserDetailsService 介面查詢資料庫得到使用者資訊回傳 UserDetails 類型的使用者資訊即可</p>\n<p>首先屏蔽原来定义的 UserDetailsService。</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">//配置用户信息服务 </span></span><br><span class=\"line\"><span class=\"comment\">//    @Bean </span></span><br><span class=\"line\"><span class=\"comment\">//    public UserDetailsService userDetailsService() &#123; </span></span><br><span class=\"line\"><span class=\"comment\">//        //这里配置用户信息,这里暂时使用这种方式将用户存储在内存中 </span></span><br><span class=\"line\"><span class=\"comment\">//        InMemoryUserDetailsManager manager = new InMemoryUserDetailsManager(); </span></span><br><span class=\"line\"><span class=\"comment\">//        manager.createUser(User.withUsername(&quot;zhangsan&quot;).password(&quot;123&quot;).authorities(&quot;p1&quot;).build()); </span></span><br><span class=\"line\"><span class=\"comment\">//        manager.createUser(User.withUsername(&quot;lisi&quot;).password(&quot;456&quot;).authorities(&quot;p2&quot;).build()); </span></span><br><span class=\"line\"><span class=\"comment\">//        return manager; </span></span><br><span class=\"line\"><span class=\"comment\">//    &#125; </span></span><br></pre></td></tr></table></figure>\n<p>下边自定义 UserDetailsService</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserDetailsImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">UserDetailsService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    XcUserMapper xcUserMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> name     用户输入的登录账号</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span>         UserDetails</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@throws</span>         UsernameNotFoundException</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> UserDetails <span class=\"title function_\">loadUserByUsername</span><span class=\"params\">(String name)</span> <span class=\"keyword\">throws</span> UsernameNotFoundException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 没别的意思，只是变量名看着舒服</span></span><br><span class=\"line\">        <span class=\"comment\">// 根据username去XcUser表中查询对应的用户信息</span></span><br><span class=\"line\">        <span class=\"type\">XcUser</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> xcUserMapper.selectOne(<span class=\"keyword\">new</span> <span class=\"title class_\">LambdaQueryWrapper</span>&lt;XcUser&gt;().eq(XcUser::getUsername, name));</span><br><span class=\"line\">        <span class=\"comment\">// 返回NULL表示用户不存在，SpringSecurity会帮我们处理，框架抛出异常用户不存在</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (user == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 取出数据库存储的密码</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">password</span> <span class=\"operator\">=</span> user.getPassword();</span><br><span class=\"line\">        <span class=\"comment\">//如果查到了用户拿到正确的密码，最终封装成一个UserDetails对象给spring security框架返回，由框架进行密码比对</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> User.withUsername(user.getUsername()).password(password).authorities(<span class=\"string\">&quot;test&quot;</span>).build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>查詢用戶流程:</p>\n<img data-src=\"/John/img/java/SpringSecurity/12.png\" class=\"abc\">\n<p>資料庫中的密碼加過密的，使用者輸入的密碼是明文，我們需要修改密碼格式器 PasswordEncoder，原來使用的是 NoOpPasswordEncoder，它是透過明文方式比較密碼，現在我們修改為 BCryptPasswordEncoder，它是將使用者輸入的 密碼編碼為 BCrypt 格式與資料庫中的密碼進行比對。</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"meta\">@Bean</span> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> PasswordEncoder <span class=\"title function_\">passwordEncoder</span><span class=\"params\">()</span> &#123; </span><br><span class=\"line\"><span class=\"comment\">//        //密码为明文方式 </span></span><br><span class=\"line\"><span class=\"comment\">//        return NoOpPasswordEncoder.getInstance(); </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BCryptPasswordEncoder</span>(); </span><br><span class=\"line\">    &#125; </span><br></pre></td></tr></table></figure>\n<p>我们通过测试代码测试 BCryptPasswordEncoder，如下</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123; </span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">password</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;111111&quot;</span>; </span><br><span class=\"line\">    <span class=\"type\">PasswordEncoder</span> <span class=\"variable\">passwordEncoder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BCryptPasswordEncoder</span>(); </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++) &#123; </span><br><span class=\"line\">        <span class=\"comment\">//每个计算出的Hash值都不一样 </span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">hashPass</span> <span class=\"operator\">=</span> passwordEncoder.encode(password); </span><br><span class=\"line\">        System.out.println(hashPass); </span><br><span class=\"line\">        <span class=\"comment\">//虽然每次计算的密码Hash值不一样但是校验是通过的 </span></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> passwordEncoder.matches(password, hashPass); </span><br><span class=\"line\">        System.out.println(f); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>修改資料庫中的密碼為 Bcrypt 格式，並且記錄明文密碼，稍後申請令牌時需要。<br>\n由於修改密碼編碼方式還需要將客戶端的金鑰更改為 Bcrypt 格式.</p>\n<figure class=\"highlight java\"><figcaption><span>Java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">@Override</span> </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configure</span><span class=\"params\">(ClientDetailsServiceConfigurer clients)</span> </span><br><span class=\"line\">          <span class=\"keyword\">throws</span> Exception &#123; </span><br><span class=\"line\">        clients.inMemory()<span class=\"comment\">// 使用in-memory存储 </span></span><br><span class=\"line\">                .withClient(<span class=\"string\">&quot;XcWebApp&quot;</span>)<span class=\"comment\">// client_id </span></span><br><span class=\"line\"><span class=\"comment\">//                .secret(&quot;secret&quot;)//客户端密钥 </span></span><br><span class=\"line\">                .secret(<span class=\"keyword\">new</span> <span class=\"title class_\">BCryptPasswordEncoder</span>().encode(<span class=\"string\">&quot;XcWebApp&quot;</span>))<span class=\"comment\">//客户端密钥 </span></span><br><span class=\"line\">                .resourceIds(<span class=\"string\">&quot;xuecheng-plus&quot;</span>)<span class=\"comment\">//资源列表 </span></span><br><span class=\"line\">                .authorizedGrantTypes(<span class=\"string\">&quot;authorization_code&quot;</span>, <span class=\"string\">&quot;password&quot;</span>,<span class=\"string\">&quot;client_credentials&quot;</span>,<span class=\"string\">&quot;implicit&quot;</span>,<span class=\"string\">&quot;refresh_token&quot;</span>)<span class=\"comment\">// 该client允许的授权类型authorization_code,password,refresh_token,implicit,client_credentials </span></span><br><span class=\"line\">                .scopes(<span class=\"string\">&quot;all&quot;</span>)<span class=\"comment\">// 允许的授权范围 </span></span><br><span class=\"line\">                .autoApprove(<span class=\"literal\">false</span>)<span class=\"comment\">//false跳转到授权页面 </span></span><br><span class=\"line\">                <span class=\"comment\">//客户端接收授权码的重定向地址 </span></span><br><span class=\"line\">                .redirectUris(<span class=\"string\">&quot;http://www.51xuecheng.cn&quot;</span>) </span><br><span class=\"line\">   ; </span><br><span class=\"line\">  &#125; </span><br></pre></td></tr></table></figure>\n<p>現在重啟認證服務<br>\n下邊使用 httpclient 測試：</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 密码模式 </span><br><span class=\"line\">POST &#123;&#123;auth_host&#125;&#125;/oauth/token?client_id=XcWebApp&amp;client_secret=XcWebApp&amp;grant_type=password&amp;username=stu1&amp;password=<span class=\"number\">111111</span> </span><br></pre></td></tr></table></figure>\n<h3 id=\"擴展用戶身份資訊\"><a class=\"markdownIt-Anchor\" href=\"#擴展用戶身份資訊\">#</a> 擴展用戶身份資訊</h3>\n<p>使用者表中儲存了使用者的帳號、手機號碼、email，暱稱、頭像等訊息，UserDetails 介面只回傳了 username、密碼等訊息，如下：</p>\n<figure class=\"highlight java\"><figcaption><span>Java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserDetails</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Serializable</span> &#123; </span><br><span class=\"line\">    Collection&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">GrantedAuthority</span>&gt; getAuthorities(); </span><br><span class=\"line\"> </span><br><span class=\"line\">    String <span class=\"title function_\">getPassword</span><span class=\"params\">()</span>; </span><br><span class=\"line\"> </span><br><span class=\"line\">    String <span class=\"title function_\">getUsername</span><span class=\"params\">()</span>; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">isAccountNonExpired</span><span class=\"params\">()</span>; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">isAccountNonLocked</span><span class=\"params\">()</span>; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">isCredentialsNonExpired</span><span class=\"params\">()</span>; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">isEnabled</span><span class=\"params\">()</span>; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>我們需要擴展使用者身分的訊息，在 jwt 令牌中儲存使用者的暱稱、頭像、電郵等資訊。</p>\n<p>🟡如何擴展 Spring Security 的使用者識別資訊呢？</p>\n<p>在認證階段 DaoAuthenticationProvider 會呼叫 UserDetailService 查詢使用者的信息，這裡是可以獲取到齊全的使用者資訊的。 由於 JWT 令牌中用戶身份資訊來自 UserDetails，UserDetails 中僅定義了 username 為用戶的身份信息，這裡有兩個思路：第一個是可以擴展 UserDetails，使之包括更多的自定義屬性，第二也 可以擴充 username 的內容，例如存入 json 資料內容作為 username 的內容。 相比較而言，方案二比較簡單還不用破壞 UserDetails 的結構，我們採用方案二。<br>\n修改 UserServiceImpl 如下：</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserDetailsImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">UserDetailsService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    XcUserMapper xcUserMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> s     用户输入的登录账号</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span>      UserDetails</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> UsernameNotFoundException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> UserDetails <span class=\"title function_\">loadUserByUsername</span><span class=\"params\">(String s)</span> <span class=\"keyword\">throws</span> UsernameNotFoundException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 没别的意思，只是变量名看着舒服</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> s;</span><br><span class=\"line\">        <span class=\"comment\">// 根据username去XcUser表中查询对应的用户信息</span></span><br><span class=\"line\">        <span class=\"type\">XcUser</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> xcUserMapper.selectOne(<span class=\"keyword\">new</span> <span class=\"title class_\">LambdaQueryWrapper</span>&lt;XcUser&gt;().eq(XcUser::getUsername, name));</span><br><span class=\"line\">        <span class=\"comment\">// 返回空表示用户不存在，SpringSecurity会帮我们处理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (user == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 取出数据库存储的密码</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">password</span> <span class=\"operator\">=</span> user.getPassword();</span><br><span class=\"line\">+       <span class=\"comment\">// 用户敏感信息不要设置</span></span><br><span class=\"line\">+       user.setPassword(<span class=\"literal\">null</span>);</span><br><span class=\"line\">+       <span class=\"type\">String</span> <span class=\"variable\">userString</span> <span class=\"operator\">=</span> JSON.toJSONString(user);</span><br><span class=\"line\">        <span class=\"comment\">// 创建UserDetails对象，并返回，注意这里的authorities必须指定</span></span><br><span class=\"line\">-       <span class=\"keyword\">return</span> User.withUsername(user.getUsername()).password(password).authorities(<span class=\"string\">&quot;test&quot;</span>).build();</span><br><span class=\"line\">+       <span class=\"keyword\">return</span> User.withUsername(userString).password(password).authorities(<span class=\"string\">&quot;test&quot;</span>).build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重启认证服务，重新生成令牌，生成成功。<br>\n我们可以使用 check_token 查询 jwt 的内容</p>\n<figure class=\"highlight json\"><figcaption><span>json</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">###校验jwt令牌 </span><br><span class=\"line\">POST <span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#123;</span>auth_host<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span>/oauth/check_token?token= </span><br></pre></td></tr></table></figure>\n<p>user_name 儲存了使用者資訊的 json 格式，在資源服務中就可以取出該 json 格式的內容轉為使用者物件去使用。</p>\n<h3 id=\"資源服務取得使用者身份\"><a class=\"markdownIt-Anchor\" href=\"#資源服務取得使用者身份\">#</a> 資源服務取得使用者身份</h3>\n<p>下面編寫一個工具類別在各個微服務中去使用，取得目前登入使用者的物件。 在 content-api 中定義此類:</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SecurityUtil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> XcUser <span class=\"title function_\">getUser</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Object</span> <span class=\"variable\">principal</span> <span class=\"operator\">=</span> SecurityContextHolder.getContext().getAuthentication().getPrincipal();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (principal <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">userJson</span> <span class=\"operator\">=</span> principal.toString();</span><br><span class=\"line\">                <span class=\"type\">XcUser</span> <span class=\"variable\">xcUser</span> <span class=\"operator\">=</span> JSON.parseObject(userJson, XcUser.class);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> xcUser;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;获取当前登录用户身份信息出错：&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 这里使用内部类，是为了不让content工程去依赖auth工程</span></span><br><span class=\"line\">    <span class=\"meta\">@Data</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">XcUser</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String salt;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String nickname;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String wxUnionid;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String companyId;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">        * 头像</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String userpic;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String utype;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> LocalDateTime birthday;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String sex;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String cellphone;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String qq;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">        * 用户状态</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String status;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> LocalDateTime createTime;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> LocalDateTime updateTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以下在內容管理服務中測試此工具類，以查詢課程資訊介面為例</p>\n<figure class=\"highlight json\"><figcaption><span>json</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    @ApiOperation(<span class=\"string\">&quot;根据课程id查询课程基础信息&quot;</span>)</span><br><span class=\"line\">    @GetMapping(<span class=\"string\">&quot;/course/&#123;courseId&#125;&quot;</span>)</span><br><span class=\"line\">    public CourseBaseInfoDto getCourseBaseById(@PathVariable Long courseId) <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">+       SecurityUtil.XcUser user = SecurityUtil.getUser();</span><br><span class=\"line\">-       Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();</span><br><span class=\"line\">-       System.out.println(<span class=\"string\">&quot;当前用户身份为：&quot;</span> + principal);</span><br><span class=\"line\">+       System.out.println(<span class=\"string\">&quot;当前用户身份为：&quot;</span> + user);</span><br><span class=\"line\">        return courseBaseInfoService.getCourseBaseInfo(courseId);</span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>重啟內容管理服務：<br>\n1、啟動認證服務、網關、內容管理服務<br>\n 2、產生新的令牌<br>\n 3、攜帶令牌存取內容管理服務的查詢課程接口</p>\n<img data-src=\"/John/img/java/SpringSecurity/13.png\" class=\"abc\">\n<h1 id=\"支援認證方式多樣\"><a class=\"markdownIt-Anchor\" href=\"#支援認證方式多樣\">#</a> 支援認證方式多樣</h1>\n<h2 id=\"統一認證入口\"><a class=\"markdownIt-Anchor\" href=\"#統一認證入口\">#</a> 統一認證入口</h2>\n<p>🍉目前各大網站的認證方式非常豐富：帳號密碼認證、手機驗證碼認證、掃碼登入等<br>\n🍉基於目前研究的 Spring Security 認證流程如何支援多樣化的認證方案呢？<br>\n1️⃣支援帳號和密碼認證：採用 OAuth2 協議的密碼模式即可實現<br>\n2️⃣支援手機號加驗證碼認證：使用者認證提交的是手機號碼和驗證碼，並不是帳號和密碼<br>\n3️⃣微信掃碼認證：基於 OAuth2 協議與微信交互，學成在線網站會向微信伺服器申請一個令牌，然後攜帶令牌去微信查詢用戶信息，查詢成功則用戶在學成在線項目認證通過<br>\n🍉目前我們測試通過 OAuth2 的密碼模式，用戶認證會提交帳號和密碼，由 DaoAuthenticationProvider 調用 UserDetailsService 的 loadUserByUsername () 方法獲取 UserDetails 用戶信息<br>\n🍉在前面我們自訂了 UserDetailsService 介面實作類，透過 loadUserByUsername () 方法根據帳號查詢使用者資訊<br>\n🍉而不同的認證提交方式的數據不一樣，例如<br>\n手機加驗證碼方式：會提交手機號碼和驗證碼<br>\n帳號密碼方式：會提交帳號、密碼、驗證碼<br>\n🍉我們可以在 loadUserByUsername () 方法上做文章，將使用者原來提交的帳號數據改為提交一個 JSON 數據，JSON 數據可以擴展不同的認證方式所提交的各種參數<br>\n🍉首先建立一個 DTO 類別用於接收各種認證參數</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AuthParamsDto</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username; <span class=\"comment\">//用户名</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password; <span class=\"comment\">//域  用于扩展</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String cellphone;<span class=\"comment\">//手机号</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String checkcode;<span class=\"comment\">//验证码</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String checkcodekey;<span class=\"comment\">//验证码key</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String authType; <span class=\"comment\">// 认证的类型   password:用户名密码模式类型    sms:短信模式类型</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, Object&gt; payload = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();<span class=\"comment\">//附加数据，作为扩展，不同认证类型可拥有不同的附加数据。如认证类型为短信时包含smsKey : sms:3d21042d054548b08477142bbca95cfa; 所有情况下都包含clientId</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时 loadUserByUsername () 方法可以修改如下：</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserDetailsImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">UserDetailsService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    XcUserMapper xcUserMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> s 用户输入的登录账号</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> UserDetails</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> UsernameNotFoundException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> UserDetails <span class=\"title function_\">loadUserByUsername</span><span class=\"params\">(String s)</span> <span class=\"keyword\">throws</span> UsernameNotFoundException &#123;</span><br><span class=\"line\">+       <span class=\"type\">AuthParamsDto</span> <span class=\"variable\">authParamsDto</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">+       <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">+           authParamsDto = JSON.parseObject(s, AuthParamsDto.class);</span><br><span class=\"line\">+       &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">+           log.error(<span class=\"string\">&quot;认证请求数据格式不对：&#123;&#125;&quot;</span>, s);</span><br><span class=\"line\">+           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;认证请求数据格式不对&quot;</span>);</span><br><span class=\"line\">+       &#125;</span><br><span class=\"line\">-       <span class=\"comment\">// 没别的意思，只是变量名看着舒服</span></span><br><span class=\"line\">-       <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> s;</span><br><span class=\"line\">+       <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> authParamsDto.getUsername();</span><br><span class=\"line\">        <span class=\"comment\">// 根据username去XcUser表中查询对应的用户信息</span></span><br><span class=\"line\">        <span class=\"type\">XcUser</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> xcUserMapper.selectOne(<span class=\"keyword\">new</span> <span class=\"title class_\">LambdaQueryWrapper</span>&lt;XcUser&gt;().eq(XcUser::getUsername, name));</span><br><span class=\"line\">        <span class=\"comment\">// 返回空表示用户不存在，SpringSecurity会帮我们处理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (user == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 取出数据库存储的密码</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">password</span> <span class=\"operator\">=</span> user.getPassword();</span><br><span class=\"line\">        user.setPassword(<span class=\"literal\">null</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">userString</span> <span class=\"operator\">=</span> JSON.toJSONString(user);</span><br><span class=\"line\">        <span class=\"comment\">// 创建UserDetails对象，并返回，注意这里的authorities必须指定</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> User.withUsername(userString).password(password).authorities(<span class=\"string\">&quot;test&quot;</span>).build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>原來的 DaoAuthenticationProvider 會進行密碼校驗，現在重新定義 DaoAuthenticationProviderCustom 類，重寫類別的 additionalAuthenticationChecks 方法。</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span> </span><br><span class=\"line\"><span class=\"meta\">@Component</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DaoAuthenticationProviderCustom</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">DaoAuthenticationProvider</span> &#123; </span><br><span class=\"line\"> <span class=\"meta\">@Autowired</span> </span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setUserDetailsService</span><span class=\"params\">(UserDetailsService userDetailsService)</span> &#123; </span><br><span class=\"line\">  <span class=\"built_in\">super</span>.setUserDetailsService(userDetailsService); </span><br><span class=\"line\"> &#125; </span><br><span class=\"line\"> <span class=\"comment\">//屏蔽密码对比 </span></span><br><span class=\"line\"> <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">additionalAuthenticationChecks</span><span class=\"params\">(UserDetails userDetails, UsernamePasswordAuthenticationToken authentication)</span> <span class=\"keyword\">throws</span> AuthenticationException &#123; </span><br><span class=\"line\"></span><br><span class=\"line\"> &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改 WebSecurityConfig 类指定 daoAuthenticationProviderCustom</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span> </span><br><span class=\"line\">DaoAuthenticationProviderCustom daoAuthenticationProviderCustom; </span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@Override</span> </span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configure</span><span class=\"params\">(AuthenticationManagerBuilder auth)</span> <span class=\"keyword\">throws</span> Exception &#123; </span><br><span class=\"line\">    auth.authenticationProvider(daoAuthenticationProviderCustom); </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>原來的 DaoAuthenticationProvider 會進行密碼校驗，現在重新定義 DaoAuthenticationProviderCustom 類，重寫類別的 additionalAuthenticationChecks 方法。</p>\n<figure class=\"highlight plaintext\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">################扩展认证请求参数后###################### </span><br><span class=\"line\">###密码模式 </span><br><span class=\"line\">POST &#123;&#123;auth_host&#125;&#125;/auth/oauth/token?client_id=XcWebApp&amp;client_secret=XcWebApp&amp;grant_type=password&amp;username=&#123;&quot;username&quot;:&quot;stu1&quot;,&quot;authType&quot;:&quot;password&quot;,&quot;password&quot;:&quot;111111&quot;&#125; </span><br></pre></td></tr></table></figure>\n<p>經過測試發現 loadUserByUsername () 方法可以正常接收到認證請求中的 json 資料。<br>\n有了這些認證參數我們可以定義一個認證 Service 介面去進行各種方式的認證。<br>\n定義使用者訊息，為了擴展性讓它繼承 XcUser</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">XcUserExt</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">XcUser</span> &#123; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>定义认证 Service 接口</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">AuthService</span> &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@description</span> 认证方法 </span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> authParamsDto 认证参数 </span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> com.xuecheng.ucenter.model.po.XcUser 用户信息 </span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@author</span> Mr.M </span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@date</span> 2022/9/29 12:11 </span></span><br><span class=\"line\"><span class=\"comment\">   */</span> </span><br><span class=\"line\">   XcUserExt <span class=\"title function_\">execute</span><span class=\"params\">(AuthParamsDto authParamsDto)</span>; </span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>loadUserByUsername () 修改如下：</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span> </span><br><span class=\"line\"><span class=\"meta\">@Service</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">UserDetailsService</span> &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span> </span><br><span class=\"line\">    XcUserMapper xcUserMapper; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span> </span><br><span class=\"line\">    ApplicationContext applicationContext; </span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@description</span> 查询用户信息组成用户身份信息 </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> s  AuthParamsDto类型的json数据 </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> org.springframework.security.core.userdetails.UserDetails </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> Mr.M </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@date</span> 2022/9/28 18:30 </span></span><br><span class=\"line\"><span class=\"comment\">    */</span> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> UserDetails <span class=\"title function_\">loadUserByUsername</span><span class=\"params\">(String s)</span> <span class=\"keyword\">throws</span> UsernameNotFoundException &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"type\">AuthParamsDto</span> <span class=\"variable\">authParamsDto</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>; </span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123; </span><br><span class=\"line\">            <span class=\"comment\">//将认证参数转为AuthParamsDto类型 </span></span><br><span class=\"line\">            authParamsDto = JSON.parseObject(s, AuthParamsDto.class); </span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123; </span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;认证请求不符合项目要求:&#123;&#125;&quot;</span>,s); </span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;认证请求数据格式不对&quot;</span>); </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"comment\">//开始认证 </span></span><br><span class=\"line\">        authService.execute(authParamsDto); </span><br><span class=\"line\">        ..... </span><br></pre></td></tr></table></figure>\n<h2 id=\"實現帳號密碼認證\"><a class=\"markdownIt-Anchor\" href=\"#實現帳號密碼認證\">#</a> 實現帳號密碼認證</h2>\n<p>上節定義了 AuthService 認證接口，用策略模式實作此接口實作帳號密碼認證和微信掃碼方式，</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service(&quot;password_authservice&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PasswordAuthServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AuthService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> XcUserExt <span class=\"title function_\">execute</span><span class=\"params\">(AuthParamsDto authParamsDto)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service(&quot;wx_authservice&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WxAuthServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AuthService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> XcUserExt <span class=\"title function_\">execute</span><span class=\"params\">(AuthParamsDto authParamsDto)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改 UserServiceImpl 類，依照認證方式使用不同的認證 bean</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> UserDetails <span class=\"title function_\">loadUserByUsername</span><span class=\"params\">(String s)</span> <span class=\"keyword\">throws</span> UsernameNotFoundException &#123;</span><br><span class=\"line\">        <span class=\"type\">AuthParamsDto</span> <span class=\"variable\">authParamsDto</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            authParamsDto = JSON.parseObject(s, AuthParamsDto.class);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;认证请求数据格式不对：&#123;&#125;&quot;</span>, s);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;认证请求数据格式不对&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">+       <span class=\"comment\">// 获取认证类型，beanName就是 认证类型 + 后缀，例如 password + _authservice = password_authservice</span></span><br><span class=\"line\">+       <span class=\"type\">String</span> <span class=\"variable\">authType</span> <span class=\"operator\">=</span> authParamsDto.getAuthType();</span><br><span class=\"line\">+       <span class=\"comment\">// 根据认证类型，从Spring容器中取出对应的bean</span></span><br><span class=\"line\">+       <span class=\"type\">AuthService</span> <span class=\"variable\">authService</span> <span class=\"operator\">=</span> applicationContext.getBean(authType + <span class=\"string\">&quot;_authservice&quot;</span>, AuthService.class);</span><br><span class=\"line\">+       <span class=\"type\">XcUserExt</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> authService.execute(authParamsDto);</span><br><span class=\"line\">-       <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> authParamsDto.getUsername();</span><br><span class=\"line\">-       <span class=\"comment\">// 根据username去XcUser表中查询对应的用户信息</span></span><br><span class=\"line\">-       <span class=\"type\">XcUser</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> xcUserMapper.selectOne(<span class=\"keyword\">new</span> <span class=\"title class_\">LambdaQueryWrapper</span>&lt;XcUser&gt;().eq(XcUser::getUsername, name));</span><br><span class=\"line\">        <span class=\"comment\">// 返回空表示用户不存在，SpringSecurity会帮我们处理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (user == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 取出数据库存储的密码</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">password</span> <span class=\"operator\">=</span> user.getPassword();</span><br><span class=\"line\">        user.setPassword(<span class=\"literal\">null</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">userString</span> <span class=\"operator\">=</span> JSON.toJSONString(user);</span><br><span class=\"line\">        <span class=\"comment\">// 创建UserDetails对象，并返回，注意这里的authorities必须指定</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> User.withUsername(userString).password(password).authorities(<span class=\"string\">&quot;test&quot;</span>).build();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>上面我们只是简单定义了账号密码认证的实现类，并没有编写具体逻辑，那这个小节我们就来具体实现账号密码认证</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service(&quot;password_authservice&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PasswordAuthServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AuthService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    XcUserMapper xcUserMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    PasswordEncoder passwordEncoder;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> XcUserExt <span class=\"title function_\">execute</span><span class=\"params\">(AuthParamsDto authParamsDto)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 获取账号</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">username</span> <span class=\"operator\">=</span> authParamsDto.getUsername();</span><br><span class=\"line\">        <span class=\"comment\">// 2. 根据账号去数据库中查询是否存在</span></span><br><span class=\"line\">        <span class=\"type\">XcUser</span> <span class=\"variable\">xcUser</span> <span class=\"operator\">=</span> xcUserMapper.selectOne(<span class=\"keyword\">new</span> <span class=\"title class_\">LambdaQueryWrapper</span>&lt;XcUser&gt;().eq(XcUser::getUsername, username));</span><br><span class=\"line\">        <span class=\"comment\">// 3. 不存在抛异常</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (xcUser == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;账号不存在&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 4. 校验密码</span></span><br><span class=\"line\">        <span class=\"comment\">// 4.1 获取用户输入的密码</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">passwordForm</span> <span class=\"operator\">=</span> authParamsDto.getPassword();</span><br><span class=\"line\">        <span class=\"comment\">// 4.2 获取数据库中存储的密码</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">passwordDb</span> <span class=\"operator\">=</span> xcUser.getPassword();</span><br><span class=\"line\">        <span class=\"comment\">// 4.3 比较密码</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">matches</span> <span class=\"operator\">=</span> passwordEncoder.matches(passwordForm, passwordDb);</span><br><span class=\"line\">        <span class=\"comment\">// 4.4 不匹配，抛异常</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!matches) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;账号或密码错误&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 4.5 匹配，封装返回</span></span><br><span class=\"line\">        <span class=\"type\">XcUserExt</span> <span class=\"variable\">xcUserExt</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">XcUserExt</span>();</span><br><span class=\"line\">        BeanUtils.copyProperties(xcUser, xcUserExt);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> xcUserExt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改 loadUserByUsername () 方法，我们可以将最后的封装 UserDetails 的相关代码抽取为一个方法</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> UserDetails <span class=\"title function_\">loadUserByUsername</span><span class=\"params\">(String s)</span> <span class=\"keyword\">throws</span> UsernameNotFoundException &#123;</span><br><span class=\"line\">        <span class=\"type\">AuthParamsDto</span> <span class=\"variable\">authParamsDto</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            authParamsDto = JSON.parseObject(s, AuthParamsDto.class);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;认证请求数据格式不对：&#123;&#125;&quot;</span>, s);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;认证请求数据格式不对&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 获取认证类型，beanName就是 认证类型 + 后缀，例如 password + _authservice = password_authservice</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">authType</span> <span class=\"operator\">=</span> authParamsDto.getAuthType();</span><br><span class=\"line\">        <span class=\"comment\">// 根据认证类型，从Spring容器中取出对应的bean</span></span><br><span class=\"line\">        <span class=\"type\">AuthService</span> <span class=\"variable\">authService</span> <span class=\"operator\">=</span> applicationContext.getBean(authType + <span class=\"string\">&quot;_authservice&quot;</span>, AuthService.class);</span><br><span class=\"line\">        <span class=\"type\">XcUserExt</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> authService.execute(authParamsDto);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getUserPrincipal(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">       <span class=\"keyword\">public</span> UserDetails <span class=\"title function_\">getUserPrincipal</span><span class=\"params\">(XcUserExt user)</span> &#123;</span><br><span class=\"line\">       String[] authorities = &#123;<span class=\"string\">&quot;test&quot;</span>&#125;;</span><br><span class=\"line\">       <span class=\"type\">String</span> <span class=\"variable\">password</span> <span class=\"operator\">=</span> user.getPassword();</span><br><span class=\"line\">       user.setPassword(<span class=\"literal\">null</span>);</span><br><span class=\"line\">       <span class=\"type\">String</span> <span class=\"variable\">userJsonStr</span> <span class=\"operator\">=</span> JSON.toJSONString(user);</span><br><span class=\"line\">       <span class=\"type\">UserDetails</span> <span class=\"variable\">userDetails</span> <span class=\"operator\">=</span> User.withUsername(userJsonStr).password(password).authorities(authorities).build();</span><br><span class=\"line\">       <span class=\"keyword\">return</span> userDetails;</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n<p>實現帳號密碼認證，申請令牌，注意 JSON 資料中要帶上 authType</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">###### 密码模式</span><br><span class=\"line\">POST localhost:<span class=\"number\">53070</span>/auth/oauth/token?client_id=XcWebApp&amp;client_secret=XcWebApp&amp;grant_type=password&amp;username=&#123;<span class=\"string\">&quot;username&quot;</span>:<span class=\"string\">&quot;Kyle&quot;</span>,<span class=\"string\">&quot;password&quot;</span>:<span class=\"string\">&quot;111111&quot;</span>,<span class=\"string\">&quot;authType&quot;</span>:<span class=\"string\">&quot;password&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n<p><span class=\"green\">下篇:</span><a href=\"/John/2023/11/03/java/SpringSecurity/WeChat_login\">驗證碼和微信登錄</a></p>\n<img data-src=\"https://s1.aigei.com/src/img/jpg/76/766f945a88ff4bafa8aa409d5bedb642.jpg?imageMogr2/auto-orient/thumbnail/!282x282r/gravity/Center/crop/282x282/quality/85/&e=1735488000&token=P7S2Xpzfz11vAkASLTkfHN7Fw-oOZBecqeJaxypL:PlOHtwQdZo0HyFUYu3_jASLjruk=\" class=\"abc\" width=\"250\" height=\"200\">",
            "tags": [
                "SpringSecurity"
            ]
        },
        {
            "id": "https://superrjohn.github.io/John/2023/10/27/java/springMVC/UserBook-Web",
            "url": "https://superrjohn.github.io/John/2023/10/27/java/springMVC/UserBook-Web",
            "title": "手寫springMVC!",
            "date_published": "2023-10-27T09:24:46.659Z",
            "content_html": "<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>初學階段全端的一個項目，是一個簡單的用戶端圖書管理系統，登錄用 jwt 令牌實現。<br>\n前端是用 Vue2、Pinia 做狀態管理、bootstrap 5 (不推薦)、Axios。<br>\n後端用 SpringMVC、SpringBoot、Mybatis、MySQL。<br>\n於由就是一個很久之前的項目，而且項目結構很簡單只是練練手，現在只是補寫一個記錄，所以我就不每個步驟記錄，只記錄重點～<br>\n 項目地址:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3N1cGVycmpvaG4vVXNlckJvb2stV2Vi\">https://github.com/superrjohn/UserBook-Web</span></p>\n<h2 id=\"邏輯圖\"><a class=\"markdownIt-Anchor\" href=\"#邏輯圖\">#</a> 邏輯圖</h2>\n<p>做項目、模塊、業務功能一定要先寫邏輯圖，一來理清邏輯步驟，二來跟著步驟做開發。(雖然這圖寫得不太優)</p>\n<img data-src=\"/John/img/java/springMVC/logic_diagram.png\" class=\"abc\" width=\"400\" height=\"700\">\n<h2 id=\"前端\"><a class=\"markdownIt-Anchor\" href=\"#前端\">#</a> 前端</h2>\n<p>前端方面，我想記錄的是<span class=\"exturl\" data-url=\"aHR0cHM6Ly9waW5pYS52dWVqcy5vcmcvemgvaW50cm9kdWN0aW9uLmh0bWw=\"> Pinia</span> 狀態管理庫，會以 Vue2 做簡單說明。<br>\n1️⃣創一個 Pinia 實例并掛載到 Vue, 如果是 Vue 2 還需要安装一个插件 PiniaVuePlugin, 如果想擁有持久化，需要安裝 pinia-plugin-persistedstate 插件。</p>\n<img data-src=\"/John/img/java/springMVC/create_pinia.png\" class=\"abc\" width=\"600\" height=\"500\">\n<p>2️⃣Store 可以理解成要狀態管理的對象，它有三個重要的部份組成，分別是 state、getter 和 action, 本項目只用到 state、action,state 是屬性，而 action 是改變屬性的方法，我封裝了根據用戶 ID 發起查詢借書記錄的 API, 而 persist 為 true 開啟持久化。</p>\n<figure class=\"highlight java\"><figcaption><span>useBookStatus.js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineStore &#125; from <span class=\"string\">&#x27;pinia&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; userAPI &#125; from <span class=\"string\">&#x27;@/apis/user&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//個人借書記錄</span></span><br><span class=\"line\">export <span class=\"type\">const</span> <span class=\"variable\">useBookStatus</span> <span class=\"operator\">=</span> defineStore(<span class=\"string\">&#x27;bookStatus&#x27;</span>, &#123;</span><br><span class=\"line\">    state: () =&gt; (&#123;</span><br><span class=\"line\">        bookStatus: []</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    actions: &#123;</span><br><span class=\"line\">        async <span class=\"title function_\">getBookStatus</span><span class=\"params\">(id)</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">const</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> await <span class=\"title function_\">userAPI</span><span class=\"params\">(id)</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.bookStatus = res.data.data</span><br><span class=\"line\">            <span class=\"comment\">//console.log(this.bookStatus)</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        clearBookStatus() &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.bookStatus = []</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    persist: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>3️⃣個人頁的 JS 大概長這樣，用 mapActions () 輔助函數將 action 屬性映射到组件中，然後當頁面加載後根據 id 執行 getBookStatus 方法，查詢個人的借書記錄</p>\n<img data-src=\"/John/img/java/springMVC/status_action.png\" class=\"abc\" width=\"600\" height=\"500\">\n<h2 id=\"後端\"><a class=\"markdownIt-Anchor\" href=\"#後端\">#</a> 後端</h2>\n<p>項目結構簡單，主要是父工程，PO 類，工具類只有生成和解析 jwt 令牌，主要業務邏輯寫在 boot-web-management</p>\n<img data-src=\"/John/img/java/springMVC/boot-web-management.png\" class=\"abc\" width=\"300\" height=\"250\">\n<p>1️⃣首先是登錄功能，查詢用戶表，如果用戶存在剛獲得用戶對象後生成 jwt 令牌返回前端，沒有則返回登錄失敗信息給前端</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LoginController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/login&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Result <span class=\"title function_\">login</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> User user)</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;用戶登錄:&#123;&#125;&quot;</span>,user);</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">u</span> <span class=\"operator\">=</span> userService.login(user);</span><br><span class=\"line\">        <span class=\"comment\">//用戶登錄成功</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(u != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            Map&lt;String, Object&gt; claims = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">            claims.put(<span class=\"string\">&quot;id&quot;</span>, u.getId());</span><br><span class=\"line\">            claims.put(<span class=\"string\">&quot;username&quot;</span>, u.getUsername());</span><br><span class=\"line\">            claims.put(<span class=\"string\">&quot;name&quot;</span>, u.getName());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">jwt</span> <span class=\"operator\">=</span> JwtUtils.generateJwt(claims);<span class=\"comment\">//生成token令牌</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> Result.success(jwt);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//登錄失敗</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> Result.error(<span class=\"string\">&quot;密碼帳號有錯&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2️⃣之後都是對用戶的借書狀態和圖書狀態的增刪改查，使用了 interceptor 查詢令牌，沒有則攔截，還有全局異常配置等，沒什麼特別，值得說的是我用了 Spring AOP, 自定義註解來對重要的操作進行額外的日誌記錄。<br>\n首先要創一個自定義註解，說明在哪方法上運行</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//自定義註解,記錄修改用戶修改日誌</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span> <span class=\"comment\">//運行時生效</span></span><br><span class=\"line\"><span class=\"meta\">@Target(ElementType.METHOD)</span><span class=\"comment\">//註明方法上生效</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Log &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>這裡我使用了 @Around 做切入方法，因為我需要記錄原始方法的運行時間，annotation 則以自定義註解為切點。</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span><span class=\"comment\">//交給IOC管理</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span><span class=\"comment\">//切面類</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LogAspect</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HttpServletRequest request;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> OperateLogMapper operateLogMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Around(&quot;@annotation(com.itheima.anno.Log)&quot;)</span><span class=\"comment\">//以註解方式配備切入點方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">recordLog</span><span class=\"params\">(ProceedingJoinPoint joinPoint)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        <span class=\"comment\">//操作人ID,當前登錄員工的ID,獲最請求頭的JWT令牌,解析令牌</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">jwt</span> <span class=\"operator\">=</span> request.getHeader(<span class=\"string\">&quot;token&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Claims</span> <span class=\"variable\">claims</span> <span class=\"operator\">=</span> JwtUtils.parseJWT(jwt);</span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">operateUser</span> <span class=\"operator\">=</span> (Integer) claims.get(<span class=\"string\">&quot;id&quot;</span>);<span class=\"comment\">//Claims類為Object,所以要強轉</span></span><br><span class=\"line\">        <span class=\"comment\">//操作時間</span></span><br><span class=\"line\">        <span class=\"type\">LocalDateTime</span> <span class=\"variable\">operateTime</span> <span class=\"operator\">=</span> LocalDateTime.now();</span><br><span class=\"line\">        <span class=\"comment\">//操作類名</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">className</span> <span class=\"operator\">=</span> joinPoint.getTarget().getClass().getName();</span><br><span class=\"line\">        <span class=\"comment\">//操作方法名</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">methodName</span> <span class=\"operator\">=</span> joinPoint.getSignature().getName();</span><br><span class=\"line\">        <span class=\"comment\">//操作方法參數</span></span><br><span class=\"line\">        Object[] args = joinPoint.getArgs();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">methodParams</span> <span class=\"operator\">=</span> Arrays.toString(args);</span><br><span class=\"line\">        <span class=\"comment\">//開始調用原始方法時間</span></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">begin</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"comment\">//調用原始目標方法運行</span></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> joinPoint.proceed();</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"comment\">//方法返回值</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">returnValue</span> <span class=\"operator\">=</span> JSONObject.toJSONString(result);</span><br><span class=\"line\">        <span class=\"comment\">//操作時間</span></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">costTime</span> <span class=\"operator\">=</span> end - begin;</span><br><span class=\"line\">        <span class=\"comment\">//記錄操作日志</span></span><br><span class=\"line\">        <span class=\"type\">OperateLog</span> <span class=\"variable\">operateLog</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OperateLog</span>(<span class=\"literal\">null</span>,operateUser,operateTime,className,methodName,methodParams,returnValue,costTime);</span><br><span class=\"line\">        operateLogMapper.insert(operateLog);</span><br><span class=\"line\"></span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;AOP記錄日志:&#123;&#125;&quot;</span>, operateLog);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>然後在需要的 API 加上就完成了</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Log</span></span><br><span class=\"line\">   <span class=\"comment\">//修改書本出借狀態和新增用戶借書記錄</span></span><br><span class=\"line\">   <span class=\"meta\">@PutMapping</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> Result <span class=\"title function_\">updateStatus</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> UserBorrow userBorrow)</span>&#123;</span><br><span class=\"line\">       log.info(<span class=\"string\">&quot;借出書本資料:&#123;&#125;&quot;</span>,userBorrow);</span><br><span class=\"line\">       bookService.updateStatus(userBorrow);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> Result.success();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>3️⃣我對 AOP 的理解是，它是以動態代理的方式去增強功能，表達式則是要加強的方法 (切點), 切入方法則是什麼時候做加強，是代碼執行前還是後，要理解源碼還是蠻複雜的，幸好能理解並使用不難～</p>\n<img data-src=\"https://usagif.com/wp-content/uploads/gifs/thanks-for-watching-9.gif\" class=\"abc\" width=\"600\" height=\"350\">",
            "tags": [
                "SpringMVC",
                "Pinia",
                "Vue2",
                "SpringBoot"
            ]
        },
        {
            "id": "https://superrjohn.github.io/John/2023/10/26/java/rabbitmq/rabbitmq",
            "url": "https://superrjohn.github.io/John/2023/10/26/java/rabbitmq/rabbitmq",
            "title": "Hello RabbitMq!",
            "date_published": "2023-10-26T14:18:33.325Z",
            "content_html": "<p>ToDo: 待做</p>\n",
            "tags": [
                "RabbitMQ"
            ]
        },
        {
            "id": "https://superrjohn.github.io/John/2023/10/26/java/radis/radis",
            "url": "https://superrjohn.github.io/John/2023/10/26/java/radis/radis",
            "title": "Redis 緩存優化",
            "date_published": "2023-10-26T14:15:36.096Z",
            "content_html": "<p>在此特别感謝黑馬程序員提供的課程: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWo4NDExTjdCbS8=\">學成在線</span></p>\n<p>前言<br>\n於由實習項目快做完才做記錄，而且項目模塊較多，故挑部份來記錄<br>\n<span class=\"rainbow\">完整项目地址</span>：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3N1cGVycmpvaG4vamF2YV93ZWI=\">https://github.com/superrjohn/java_web</span></p>\n<h1 id=\"緩存優化\"><a class=\"markdownIt-Anchor\" href=\"#緩存優化\">#</a> 緩存優化</h1>\n<h2 id=\"redis緩存\"><a class=\"markdownIt-Anchor\" href=\"#redis緩存\">#</a> redis 緩存</h2>\n<p>測試案例是根據 id 查詢課程信息，這裡不存在複雜的 SQL，也不存在資料庫連線不釋放的問題，暫時不考慮資料庫方面的最佳化。<br>\n課程發布資訊的特點的是查詢較多，修改很少，這裡考慮將課程發布資訊進行緩存，白名單數據的內容也可以考慮進行緩存。<br>\n課程資訊緩存的流程如下：</p>\n<img data-src=\"/John/img/java/redis/1.png\" class=\"abc\">\n<p>1️⃣在 nacos 配置 redis-dev.yaml（group=xuecheng-plus-common）</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:  </span><br><span class=\"line\">  redis: </span><br><span class=\"line\">    host: <span class=\"number\">192.168</span><span class=\"number\">.101</span><span class=\"number\">.65</span> </span><br><span class=\"line\">    port: <span class=\"number\">6379</span> </span><br><span class=\"line\">    password: redis </span><br><span class=\"line\">    database: <span class=\"number\">0</span> </span><br><span class=\"line\">    lettuce: </span><br><span class=\"line\">      pool: </span><br><span class=\"line\">        max-active: <span class=\"number\">20</span> </span><br><span class=\"line\">        max-idle: <span class=\"number\">10</span> </span><br><span class=\"line\">        min-idle: <span class=\"number\">0</span> </span><br><span class=\"line\">    timeout: <span class=\"number\">10000</span> </span><br></pre></td></tr></table></figure>\n<p>2️⃣在 content-api 微服務加載 redis-dev.yaml</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shared-configs: </span><br><span class=\"line\">    - data-id: redis-$&#123;spring.profiles.active&#125;.yaml </span><br><span class=\"line\">      group: xuecheng-plus-common </span><br><span class=\"line\">      refresh: <span class=\"literal\">true</span> </span><br></pre></td></tr></table></figure>\n<p>3️⃣在 content-service 微服務中添加依賴</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt; </span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; </span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt; </span><br><span class=\"line\">&lt;/dependency&gt; </span><br><span class=\"line\">&lt;dependency&gt; </span><br><span class=\"line\">    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt; </span><br><span class=\"line\">    &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt; </span><br><span class=\"line\">    &lt;version&gt;<span class=\"number\">2.6</span><span class=\"number\">.2</span>&lt;/version&gt; </span><br><span class=\"line\">&lt;/dependency&gt; </span><br></pre></td></tr></table></figure>\n<p>4️⃣定義查詢緩存介面：</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span> 查询缓存中的课程信息 </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> courseId  </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> com.xuecheng.content.model.po.CoursePublish </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Mr.M </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2022/10/22 16:15 </span></span><br><span class=\"line\"><span class=\"comment\">*/</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> CoursePublish <span class=\"title function_\">getCoursePublishCache</span><span class=\"params\">(Long courseId)</span>; </span><br></pre></td></tr></table></figure>\n<p>5️⃣介面實作如下，key 的命名以 course 為前綴加上 courseId</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> CoursePublish <span class=\"title function_\">getCoursePublishCache</span><span class=\"params\">(Long courseId)</span>&#123; </span><br><span class=\"line\">    <span class=\"comment\">//查询缓存 </span></span><br><span class=\"line\">   <span class=\"type\">Object</span>  <span class=\"variable\">jsonObj</span> <span class=\"operator\">=</span> redisTemplate.opsForValue().get(<span class=\"string\">&quot;course:&quot;</span> + courseId); </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(jsonObj!=<span class=\"literal\">null</span>)&#123; </span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">jsonString</span> <span class=\"operator\">=</span> jsonObj.toString(); </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;=================从缓存查=================&quot;</span>); </span><br><span class=\"line\">        <span class=\"type\">CoursePublish</span> <span class=\"variable\">coursePublish</span> <span class=\"operator\">=</span> JSON.parseObject(jsonString, CoursePublish.class); </span><br><span class=\"line\">        <span class=\"keyword\">return</span> coursePublish; </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;从数据库查询...&quot;</span>); </span><br><span class=\"line\">        <span class=\"comment\">//从数据库查询 </span></span><br><span class=\"line\">        <span class=\"type\">CoursePublish</span> <span class=\"variable\">coursePublish</span> <span class=\"operator\">=</span> getCoursePublish(courseId); </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(coursePublish!=<span class=\"literal\">null</span>)&#123; </span><br><span class=\"line\">            redisTemplate.opsForValue().set(<span class=\"string\">&quot;course:&quot;</span> + courseId, JSON.toJSONString(coursePublish)); </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> coursePublish; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>6️⃣修改 controller 接口調用代碼</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ApiOperation(&quot;获取课程发布信息&quot;)</span> </span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span> </span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/course/whole/&#123;courseId&#125;&quot;)</span> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> CoursePreviewDto <span class=\"title function_\">getCoursePublish</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;courseId&quot;)</span> Long courseId)</span> &#123; </span><br><span class=\"line\">        <span class=\"comment\">//查询课程发布信息 </span></span><br><span class=\"line\">        <span class=\"type\">CoursePublish</span> <span class=\"variable\">coursePublish</span> <span class=\"operator\">=</span> coursePublishService.getCoursePublishCache(courseId); </span><br><span class=\"line\"><span class=\"comment\">//        CoursePublish coursePublish = coursePublishService.getCoursePublish(courseId); </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(coursePublish==<span class=\"literal\">null</span>)&#123; </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CoursePreviewDto</span>(); </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">//课程基本信息 </span></span><br><span class=\"line\">        <span class=\"type\">CourseBaseInfoDto</span> <span class=\"variable\">courseBase</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CourseBaseInfoDto</span>(); </span><br><span class=\"line\">        BeanUtils.copyProperties(coursePublish, courseBase); </span><br><span class=\"line\">        <span class=\"comment\">//课程计划 </span></span><br><span class=\"line\">        List&lt;TeachplanDto&gt; teachplans = JSON.parseArray(coursePublish.getTeachplan(), TeachplanDto.class); </span><br><span class=\"line\">        <span class=\"type\">CoursePreviewDto</span> <span class=\"variable\">coursePreviewInfo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CoursePreviewDto</span>(); </span><br><span class=\"line\">        coursePreviewInfo.setCourseBase(courseBase); </span><br><span class=\"line\">        coursePreviewInfo.setTeachplans(teachplans); </span><br><span class=\"line\">        <span class=\"keyword\">return</span> coursePreviewInfo; </span><br><span class=\"line\">    &#125; </span><br></pre></td></tr></table></figure>\n<p>重新測試請求內容管理服務課程查詢介面，吞吐量達到 2700 左右，增加了近一倍。</p>\n<img data-src=\"/John/img/java/redis/2.png\" class=\"abc\">\n<h1 id=\"緩存穿透問題\"><a class=\"markdownIt-Anchor\" href=\"#緩存穿透問題\">#</a> 緩存穿透問題</h1>\n<h2 id=\"什麼是緩存穿透\"><a class=\"markdownIt-Anchor\" href=\"#什麼是緩存穿透\">#</a> 什麼是緩存穿透</h2>\n<p>我們分析下程式碼:</p>\n<img data-src=\"/John/img/java/redis/3.png\" class=\"abc\">\n<p>如果有惡意攻擊的可能，如果有大量並發去查詢一個不存在的課程資訊會出現什麼問題呢？<br>\n例如去請求 /content/course/whole/181，查詢 181 號課程，該課程並不在課程發布表中。<br>\n進行壓力測試發現會去請求資料庫。<br>\n大量並發去存取一個資料庫不存在的數據，由於緩存中沒有該數據導致大量並發查詢資料庫，這個現像要緩存穿透。</p>\n<img data-src=\"/John/img/java/redis/4.png\" class=\"abc\">\n<p>緩存穿透可以造成資料庫瞬間壓力過大，連線數等資源用完，最後資料庫拒絕連線不可用。</p>\n<h2 id=\"解決緩存穿透\"><a class=\"markdownIt-Anchor\" href=\"#解決緩存穿透\">#</a> 解決緩存穿透</h2>\n<p>如何解決緩存穿透？<br>\n1️⃣對請求增加校驗機制</p>\n<p>例如：課程 Id 是長整型，如果發來的不是長整型則直接回傳，但要有規矩才可以</p>\n<p>2️⃣使用布隆過濾器</p>\n<p>布隆過濾器的特點是，高效地插入和查詢，佔用空間少；查詢結果有不確定性，如果查詢結果是存在則元素不一定存在，如果不存在則一定不存在；另外它只能添加元素 不能刪除元素，因為刪除元素會增加誤判率。<br>\n例如：將商品 id 寫入布隆過濾器，如果分 3 次 hash 此時在布隆過濾器有 3 個點，當從布隆過濾器查詢該商品 id，透過 hash 找到了該商品 id 在過濾器 中的點，此時回傳 1，如果找不到一定會回傳 0。<br>\n所以，為了避免緩存穿透我們需要緩存預熱將要查詢的課程或商品資訊的 id 提前存入布隆過濾器，添加資料時將資訊的 id 也存入過濾器，當去查詢一個資料時先在 布隆過濾器中找一下如果沒有到到就表示不存在，此時直接返回。<br>\n實作方法有：1.Google 工具包 Guava 實作 2.redisson</p>\n<p>3️⃣緩存空值或特殊值</p>\n<p>請求通過了第一步的校驗，查詢資料庫得到的資料不存在，此時我們仍然去緩存數據，緩存一個空值或一個特殊值的資料。<br>\n但是要注意：如果緩存了空值或特殊值要設定一個短暫的過期時間。</p>\n<p>本項本採用返回空值的解決方法</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> CoursePublish <span class=\"title function_\">getCoursePublishCache</span><span class=\"params\">(Long courseId)</span> &#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//查询缓存 </span></span><br><span class=\"line\">   <span class=\"type\">Object</span>  <span class=\"variable\">jsonObj</span> <span class=\"operator\">=</span> redisTemplate.opsForValue().get(<span class=\"string\">&quot;course:&quot;</span> + courseId); </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(jsonObj!=<span class=\"literal\">null</span>)&#123; </span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">jsonString</span> <span class=\"operator\">=</span> jsonObj.toString(); </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(jsonString.equals(<span class=\"string\">&quot;null&quot;</span>)) </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>; </span><br><span class=\"line\">        <span class=\"type\">CoursePublish</span> <span class=\"variable\">coursePublish</span> <span class=\"operator\">=</span> JSON.parseObject(jsonString, CoursePublish.class); </span><br><span class=\"line\">        <span class=\"keyword\">return</span> coursePublish; </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\">        <span class=\"comment\">//从数据库查询 </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;从数据库查询数据...&quot;</span>); </span><br><span class=\"line\">        <span class=\"type\">CoursePublish</span> <span class=\"variable\">coursePublish</span> <span class=\"operator\">=</span> getCoursePublish(courseId); </span><br><span class=\"line\">        <span class=\"comment\">//设置过期时间300秒 </span></span><br><span class=\"line\">        redisTemplate.opsForValue().set(<span class=\"string\">&quot;course:&quot;</span> + courseId, JSON.toJSONString(coursePublish),<span class=\"number\">30</span>, TimeUnit.SECONDS); </span><br><span class=\"line\">        <span class=\"keyword\">return</span> coursePublish; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h1 id=\"緩存雪崩\"><a class=\"markdownIt-Anchor\" href=\"#緩存雪崩\">#</a> 緩存雪崩</h1>\n<h2 id=\"什麼是緩存雪崩\"><a class=\"markdownIt-Anchor\" href=\"#什麼是緩存雪崩\">#</a> 什麼是緩存雪崩</h2>\n<p>緩存雪崩是緩存中大量 key 失效後當高並發到來時導致大量請求到資料庫，瞬間耗盡資料庫資源，導致資料庫無法使用。</p>\n<p>造成緩存雪崩問題的原因是大量 key 擁有了相同的過期時間，例如對課程資訊設定緩存過期時間為 10 分鐘，在大量請求同時查詢大量的課程資訊時，此時就會有大量的課程存在相同 的過期時間，一旦失效將同時失效，造成雪崩問題。</p>\n<h2 id=\"解決緩存雪崩\"><a class=\"markdownIt-Anchor\" href=\"#解決緩存雪崩\">#</a> 解決緩存雪崩</h2>\n<p>1️⃣使用同步鎖定控制查詢資料庫的線程<br>\n使用同步鎖定控制查詢資料庫的線程，只允許有一個線程去查詢資料庫，查詢得到資料後存入緩存。</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span>(obj)&#123; </span><br><span class=\"line\">  <span class=\"comment\">//查询数据库 </span></span><br><span class=\"line\">  <span class=\"comment\">//存入缓存 </span></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>2️⃣對同一類型資訊的 key 設定不同的過期時間<br>\n通常對一類資訊的 key 設定的過期時間是相同的，這裡可以在原有固定時間的基礎上加上一個隨機時間使它們的過期時間都不相同。<br>\n範例程式碼如下：</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">//设置过期时间300秒 </span></span><br><span class=\"line\">redisTemplate.opsForValue().set(<span class=\"string\">&quot;course:&quot;</span> + courseId, JSON.toJSONString(coursePublish),<span class=\"number\">300</span>+<span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>().nextInt(<span class=\"number\">100</span>), TimeUnit.SECONDS); </span><br></pre></td></tr></table></figure>\n<p>3️⃣緩存預熱<br>\n不用等到請求到來再去查詢資料庫存入緩存，可以提前將資料存入緩存。 使用緩存預熱機制通常有專門的後台程式將資料庫的資料同步到緩存。</p>\n<h1 id=\"緩存擊穿\"><a class=\"markdownIt-Anchor\" href=\"#緩存擊穿\">#</a> 緩存擊穿</h1>\n<h2 id=\"什麼是緩存擊穿\"><a class=\"markdownIt-Anchor\" href=\"#什麼是緩存擊穿\">#</a> 什麼是緩存擊穿</h2>\n<p>緩存擊穿是指大量並發存取同一個熱點數據，當熱點資料失效後同時去請求資料庫，瞬間耗盡資料庫資源，導致資料庫無法使用。<br>\n例如某手機新品發布，當緩存失效時有大量並發到來導致同時去存取資料庫。</p>\n<h2 id=\"解决緩存擊穿\"><a class=\"markdownIt-Anchor\" href=\"#解决緩存擊穿\">#</a> 解决緩存擊穿</h2>\n<p>如何解決緩存擊穿？</p>\n<p>1. 使用同步鎖定控制查詢資料庫的線程</p>\n<p>使用同步鎖定控制查詢資料庫的程式碼，只允許有一個執行緒去查詢資料庫，查詢得到資料庫存入緩存。</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span>(obj)&#123; </span><br><span class=\"line\">  <span class=\"comment\">//查询数据库 </span></span><br><span class=\"line\">  <span class=\"comment\">//存入缓存 </span></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>2. 熱點數據不過期</p>\n<p>可以由後台程式提前將熱點資料加入緩存，緩存過期時間不過期，由後台程式做好緩存同步。</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span>  CoursePublish <span class=\"title function_\">getCoursePublishCache</span><span class=\"params\">(Long courseId)</span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(<span class=\"built_in\">this</span>)&#123; </span><br><span class=\"line\">        <span class=\"comment\">//查询缓存 </span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">jsonString</span> <span class=\"operator\">=</span> (String) redisTemplate.opsForValue().get(<span class=\"string\">&quot;course:&quot;</span> + courseId); </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(StringUtils.isNotEmpty(jsonString))&#123; </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(jsonString.equals(<span class=\"string\">&quot;null&quot;</span>)) </span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">null</span>; </span><br><span class=\"line\">            <span class=\"type\">CoursePublish</span> <span class=\"variable\">coursePublish</span> <span class=\"operator\">=</span> JSON.parseObject(jsonString, CoursePublish.class); </span><br><span class=\"line\">            <span class=\"keyword\">return</span> coursePublish; </span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123; </span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;=========从数据库查询==========&quot;</span>); </span><br><span class=\"line\">            <span class=\"comment\">//从数据库查询 </span></span><br><span class=\"line\">            <span class=\"type\">CoursePublish</span> <span class=\"variable\">coursePublish</span> <span class=\"operator\">=</span> getCoursePublish(courseId); </span><br><span class=\"line\">           <span class=\"comment\">//设置过期时间300秒 </span></span><br><span class=\"line\">        redisTemplate.opsForValue().set(<span class=\"string\">&quot;course:&quot;</span> + courseId, JSON.toJSONString(coursePublish),<span class=\"number\">300</span>, TimeUnit.SECONDS); </span><br><span class=\"line\">            <span class=\"keyword\">return</span> coursePublish; </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>測試，吞吐量有 1300 左右</p>\n<img data-src=\"/John/img/java/redis/5.png\" class=\"abc\">\n<p>將上邊的程式碼進行最佳化，查詢緩存的程式碼不用 synchronized 加鎖控制，只對查詢資料庫加鎖，如下：</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span>  CoursePublish <span class=\"title function_\">getCoursePublishCache</span><span class=\"params\">(Long courseId)</span>&#123; </span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">//查询缓存 </span></span><br><span class=\"line\">         <span class=\"type\">Object</span>  <span class=\"variable\">jsonObj</span> <span class=\"operator\">=</span> redisTemplate.opsForValue().get(<span class=\"string\">&quot;course:&quot;</span> + courseId); </span><br><span class=\"line\">         <span class=\"keyword\">if</span>(jsonObj!=<span class=\"literal\">null</span>)&#123; </span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">jsonString</span> <span class=\"operator\">=</span> jsonObj.toString(); </span><br><span class=\"line\">            <span class=\"type\">CoursePublish</span> <span class=\"variable\">coursePublish</span> <span class=\"operator\">=</span> JSON.parseObject(jsonString, CoursePublish.class); </span><br><span class=\"line\">            <span class=\"keyword\">return</span> coursePublish; </span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123; </span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span>(<span class=\"built_in\">this</span>)&#123; </span><br><span class=\"line\">                <span class=\"type\">Object</span>  <span class=\"variable\">jsonObj</span> <span class=\"operator\">=</span> redisTemplate.opsForValue().get(<span class=\"string\">&quot;course:&quot;</span> + courseId); </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(jsonObj!=<span class=\"literal\">null</span>)&#123; </span><br><span class=\"line\">                   <span class=\"type\">String</span> <span class=\"variable\">jsonString</span> <span class=\"operator\">=</span> jsonObj.toString(); </span><br><span class=\"line\">                    <span class=\"type\">CoursePublish</span> <span class=\"variable\">coursePublish</span> <span class=\"operator\">=</span> JSON.parseObject(jsonString, CoursePublish.class); </span><br><span class=\"line\">                    <span class=\"keyword\">return</span> coursePublish; </span><br><span class=\"line\">                &#125; </span><br><span class=\"line\">                 System.out.println(<span class=\"string\">&quot;=========从数据库查询==========&quot;</span>); </span><br><span class=\"line\">                <span class=\"comment\">//从数据库查询 </span></span><br><span class=\"line\">                <span class=\"type\">CoursePublish</span> <span class=\"variable\">coursePublish</span> <span class=\"operator\">=</span> getCoursePublish(courseId); </span><br><span class=\"line\">              <span class=\"comment\">//设置过期时间300秒 </span></span><br><span class=\"line\">                redisTemplate.opsForValue().set(<span class=\"string\">&quot;course:&quot;</span> + courseId, JSON.toJSONString(coursePublish),<span class=\"number\">300</span>, TimeUnit.SECONDS); </span><br><span class=\"line\">                <span class=\"keyword\">return</span> coursePublish; </span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>測試，查詢資料庫只發生一次，整個測試過程的吞吐量約 3800。</p>\n<img data-src=\"/John/img/java/redis/6.png\" class=\"abc\">\n<h1 id=\"分布式鎖\"><a class=\"markdownIt-Anchor\" href=\"#分布式鎖\">#</a> 分布式鎖</h1>\n<h2 id=\"本地鎖的問題\"><a class=\"markdownIt-Anchor\" href=\"#本地鎖的問題\">#</a> 本地鎖的問題</h2>\n<p>上邊的程式使用了同步鎖定解決了緩存擊穿、緩存雪崩的問題，並保證同一個 key 過期後只會查詢一次資料庫。</p>\n<p>如果將同步鎖定的程式分散部署在多個虛擬機器上則無法保證同一個 key 只會查詢一次資料庫，如下圖：</p>\n<img data-src=\"/John/img/java/redis/7.png\" class=\"abc\">\n<p>一個同步鎖定程式只能保證同一個虛擬機中多個執行緒只有一個執行緒去資料庫，如果高並發透過網關負載平衡轉送給各個虛擬機，此時就會存在多個執行緒去查詢資料庫情況，因為虛擬機 中的鎖只能保證該虛擬機器自己的執行緒去同步執行，無法跨虛擬機器保證同步執行。</p>\n<p>我們將虛擬機器內部的鎖叫本地鎖，本地鎖只能確保所在虛擬機器的執行緒同步執行。</p>\n<h2 id=\"什么是分布鎖\"><a class=\"markdownIt-Anchor\" href=\"#什么是分布鎖\">#</a> 什么是分布鎖</h2>\n<p>本機鎖只能控制所在虛擬機器中的執行緒同步執行，現在要實現分散式環境下所有虛擬機器中的執行緒去同步執行就需要讓多個虛擬機器去共用一個鎖，虛擬機器可以分散部署，鎖 也可以分散部署，如下圖：</p>\n<img data-src=\"/John/img/java/redis/8.png\" class=\"abc\">\n<p>虛擬機器都去搶佔同一個鎖，鎖是一個單獨的程式提供加鎖、解鎖服務，誰搶到鎖誰去查詢資料庫。</p>\n<p>該鎖已不屬於某個虛擬機，而是分散式部署，由多個虛擬機所共享，這種鎖叫做分散式鎖。</p>\n<h2 id=\"分布式鎖的實現方案\"><a class=\"markdownIt-Anchor\" href=\"#分布式鎖的實現方案\">#</a> 分布式鎖的實現方案</h2>\n<p>實作分散式鎖的方案很多，常用的如下：</p>\n<p>1️⃣基於資料庫實現分佈鎖</p>\n<p>利用資料庫主鍵唯一性的特點，或利用資料庫唯一索引的特點，多個執行緒同時去插入相同的記錄，誰插入成功誰就搶到鎖。</p>\n<p>2️⃣基於 redis 實現鎖</p>\n<p>redis 提供了分散式鎖定的實作方案，例如：SETNX、set nx、redisson 等。</p>\n<p>拿 SETNX 舉例說明，SETNX 指令的工作過程是去 set 一個不存在的 key，多個執行緒去設定同一個 key 只會有一個執行緒設定成功，設定成功的執行緒拿到鎖定。</p>\n<p>3️⃣使用 zookeeper 實現</p>\n<p>zookeeper 是一個分散式協調服務，主要解決分散式程式之間的同步的問題。 zookeeper 的結構類似的檔案目錄，多執行緒向 zookeeper 建立一個子目錄 (節點) 只會有一個創建成功，利用此特點可以實現分散式鎖，誰創建該結點成功誰就獲得鎖。</p>\n<h1 id=\"redisson實現分布式鎖\"><a class=\"markdownIt-Anchor\" href=\"#redisson實現分布式鎖\">#</a> Redisson 實現分布式鎖</h1>\n<h2 id=\"什么是redisson\"><a class=\"markdownIt-Anchor\" href=\"#什么是redisson\">#</a> 什么是 Redisson</h2>\n<p>查閱 文檔<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5yZWRpcy5jbi9jb21tYW5kcy9zZXQuaHRtbA==\"> http://www.redis.cn/commands/set.html</span></p>\n<p>我們選用 Java 的實作方案 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3JlZGlzc29uL3JlZGlzc29u\">https://github.com/redisson/redisson</span></p>\n<p>Redisson 的文件網址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3JlZGlzc29uL3JlZGlzc29uL3dpa2kvVGFibGUtb2YtQ29udGVudA==\">https://github.com/redisson/redisson/wiki/Table-of-Content</span></p>\n<p>Redisson 底層採用的是 Netty 框架。 支援 Redis 2.8 以上版本，支援 Java1.6 + 以上版本。 Redisson 是一個在 Redis 的基礎上實現的 Java 駐記憶體資料網格（In-Memory Data Grid）。 它不僅提供了一系列的分散式的 Java 常用對象，還提供了許多分散式服務。</p>\n<blockquote><p>使用 Redisson 可以非常方便將 Java 本地記憶體中的常用資料結構的物件移到分散式緩存 redis 中。<br>\n也可以將常用的並發程式設計工具如：AtomicLong、CountDownLatch、Semaphore 等支援分散式。<br>\n使用 RScheduledExecutorService 實現分散式調度服務。<br>\n支援資料分片，將資料分片儲存到不同的 redis 實例中。<br>\n支援分散式鎖，基於 Java 的 Lock 介面實現分散式鎖，方便開發。<br>\n下邊使用 Redisson 將 Queue 隊列的資料存入 Redis，實作一個排隊及出隊的介面。</p>\n</blockquote>\n<img data-src=\"/John/img/java/redis/9.png\" class=\"abc\">\n<p>添加 redisson 的依赖</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt; </span><br><span class=\"line\">    &lt;groupId&gt;org.redisson&lt;/groupId&gt; </span><br><span class=\"line\">    &lt;artifactId&gt;redisson-spring-boot-starter&lt;/artifactId&gt; </span><br><span class=\"line\">    &lt;version&gt;<span class=\"number\">3.11</span><span class=\"number\">.2</span>&lt;/version&gt; </span><br><span class=\"line\">&lt;/dependency&gt; </span><br></pre></td></tr></table></figure>\n<p>从课程资料目录拷贝 singleServerConfig.yaml 到 config 工程下</p>\n<p>在 redis 配置文件中添加：</p>\n<figure class=\"highlight yaml\"><figcaption><span>YAML</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span> </span><br><span class=\"line\">  <span class=\"attr\">redis:</span> </span><br><span class=\"line\">    <span class=\"attr\">redisson:</span> </span><br><span class=\"line\">      <span class=\"comment\">#配置文件目录 </span></span><br><span class=\"line\">      <span class=\"attr\">config:</span> <span class=\"string\">classpath:singleServerConfig.yaml</span> </span><br><span class=\"line\">      <span class=\"comment\">#config: classpath:clusterServersConfig.yaml </span></span><br></pre></td></tr></table></figure>\n<p>redis 叢集配置 clusterServersConfig.yaml.</p>\n<p>Redisson 相比 set nx 實作分散式鎖要簡單的多，工作原理如下：</p>\n<img data-src=\"/John/img/java/redis/10.png\" class=\"abc\">\n<p>1️⃣加鎖機制:</p>\n<p>執行緒去取得鎖，取得成功：執行 lua 腳本，儲存資料到 redis 資料庫。</p>\n<p>執行緒去取得鎖，取得失敗：一直透過 while 循環嘗試取得鎖，取得成功後，執行 lua 腳本，儲存資料到 redis</p>\n<p>2️⃣WatchDog 自動延期看門狗機制:</p>\n<p>第一種情況：在一個分散式環境下，假如一個線程獲得鎖後，突然伺服器宕機了，那麼這個時候在一定時間後這個鎖會自動釋放，你也可以設定鎖的有效時間 (當不設置 預設 30 秒時），這樣的目的主要是防止死鎖的發生</p>\n<p>第二種情況：線程 A 業務還沒執行完，時間就過了，線程 A 還想持有鎖的話，就會啟動一個 watch dog 後台線程，不斷的延長鎖 key 的生存時間。</p>\n<p>3️⃣lua 腳本 - 保證原子性操作:</p>\n<p>主要是如果你的業務邏輯複雜的話，透過封裝在 lua 腳本中發送給 redis，而且 redis 是單線程的，這樣就保證這段複雜業務邏輯執行的原子性</p>\n<p>具體使用 RLock 操作分佈鎖，RLock 繼承 JDK 的 Lock 接口，所以他有 Lock 接口的所有特性，比如 lock、unlock、trylock 等特性，同時它還有很多新特性：強制鎖釋放，帶有效期的鎖，。</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">RLock</span> &#123; </span><br><span class=\"line\">     </span><br><span class=\"line\">   <span class=\"comment\">//----------------------Lock接口方法----------------------- </span></span><br><span class=\"line\">    <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">     * 加锁 锁的有效期默认30秒 </span></span><br><span class=\"line\"><span class=\"comment\">     */</span> </span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">lock</span><span class=\"params\">()</span>; </span><br><span class=\"line\">     </span><br><span class=\"line\">     <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">     * 加锁 可以手动设置锁的有效时间 </span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> leaseTime 锁有效时间 </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> unit      时间单位 小时、分、秒、毫秒等 </span></span><br><span class=\"line\"><span class=\"comment\">     */</span> </span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">lock</span><span class=\"params\">(<span class=\"type\">long</span> leaseTime, TimeUnit unit)</span>; </span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">     * tryLock()方法是有返回值的，用来尝试获取锁， </span></span><br><span class=\"line\"><span class=\"comment\">     * 如果获取成功，则返回true，如果获取失败（即锁已被其他线程获取），则返回false . </span></span><br><span class=\"line\"><span class=\"comment\">     */</span> </span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">tryLock</span><span class=\"params\">()</span>; </span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">     * tryLock(long time, TimeUnit unit)方法和tryLock()方法是类似的， </span></span><br><span class=\"line\"><span class=\"comment\">     * 只不过区别在于这个方法在拿不到锁时会等待一定的时间， </span></span><br><span class=\"line\"><span class=\"comment\">     * 在时间期限之内如果还拿不到锁，就返回false。如果如果一开始拿到锁或者在等待期间内拿到了锁，则返回true。 </span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> time 等待时间 </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> unit 时间单位 小时、分、秒、毫秒等 </span></span><br><span class=\"line\"><span class=\"comment\">     */</span> </span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">tryLock</span><span class=\"params\">(<span class=\"type\">long</span> time, TimeUnit unit)</span> <span class=\"keyword\">throws</span> InterruptedException; </span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">     * 比上面多一个参数，多添加一个锁的有效时间 </span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> waitTime  等待时间 </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> leaseTime 锁有效时间 </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> unit      时间单位 小时、分、秒、毫秒等 </span></span><br><span class=\"line\"><span class=\"comment\">     * waitTime 大于 leaseTime </span></span><br><span class=\"line\"><span class=\"comment\">     */</span> </span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">tryLock</span><span class=\"params\">(<span class=\"type\">long</span> waitTime, <span class=\"type\">long</span> leaseTime, TimeUnit unit)</span> <span class=\"keyword\">throws</span> InterruptedException; </span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">     * 解锁 </span></span><br><span class=\"line\"><span class=\"comment\">     */</span> </span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">unlock</span><span class=\"params\">()</span>; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>lock()：</p>\n<p>1️⃣此方法為加鎖，但是鎖的有效期限採用預設 30 秒</p>\n<p>2️⃣如果主執行緒未釋放，且目前鎖定未呼叫 unlock 方法，則進入到 watchDog 機制</p>\n<p>3️⃣如果主執行緒未釋放，且目前鎖定呼叫 unlock 方法，則直接釋放鎖定</p>\n<h2 id=\"分布式鎖避免缓存擊穿\"><a class=\"markdownIt-Anchor\" href=\"#分布式鎖避免缓存擊穿\">#</a> 分布式鎖避免缓存擊穿</h2>\n<p>使用分布式鎖修改查詢課程資訊的介面。</p>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Redisson分布式锁 </span></span><br><span class=\"line\"><span class=\"keyword\">public</span>  CoursePublish <span class=\"title function_\">getCoursePublishCache</span><span class=\"params\">(Long courseId)</span>&#123; </span><br><span class=\"line\">        <span class=\"comment\">//查询缓存 </span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">jsonString</span> <span class=\"operator\">=</span> (String) redisTemplate.opsForValue().get(<span class=\"string\">&quot;course:&quot;</span> + courseId); </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(StringUtils.isNotEmpty(jsonString))&#123; </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(jsonString.equals(<span class=\"string\">&quot;null&quot;</span>))&#123; </span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">null</span>; </span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">            <span class=\"type\">CoursePublish</span> <span class=\"variable\">coursePublish</span> <span class=\"operator\">=</span> JSON.parseObject(jsonString, CoursePublish.class); </span><br><span class=\"line\">            <span class=\"keyword\">return</span> coursePublish; </span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123; </span><br><span class=\"line\">            <span class=\"comment\">//每门课程设置一个锁 </span></span><br><span class=\"line\">            <span class=\"type\">RLock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> redissonClient.getLock(<span class=\"string\">&quot;coursequerylock:&quot;</span>+courseId); </span><br><span class=\"line\">            <span class=\"comment\">//获取锁 </span></span><br><span class=\"line\">            lock.lock(); </span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123; </span><br><span class=\"line\">                jsonString = (String) redisTemplate.opsForValue().get(<span class=\"string\">&quot;course:&quot;</span> + courseId); </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(StringUtils.isNotEmpty(jsonString))&#123; </span><br><span class=\"line\">                    <span class=\"type\">CoursePublish</span> <span class=\"variable\">coursePublish</span> <span class=\"operator\">=</span> JSON.parseObject(jsonString, CoursePublish.class); </span><br><span class=\"line\">                    <span class=\"keyword\">return</span> coursePublish; </span><br><span class=\"line\">                &#125; </span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;=========从数据库查询==========&quot;</span>); </span><br><span class=\"line\">                <span class=\"comment\">//从数据库查询 </span></span><br><span class=\"line\">                <span class=\"type\">CoursePublish</span> <span class=\"variable\">coursePublish</span> <span class=\"operator\">=</span> getCoursePublish(courseId); </span><br><span class=\"line\">                redisTemplate.opsForValue().set(<span class=\"string\">&quot;course:&quot;</span> + courseId, JSON.toJSONString(coursePublish),<span class=\"number\">1</span>,TimeUnit.DAYS); </span><br><span class=\"line\">                <span class=\"keyword\">return</span> coursePublish; </span><br><span class=\"line\">            &#125;<span class=\"keyword\">finally</span> &#123; </span><br><span class=\"line\">                <span class=\"comment\">//释放锁 </span></span><br><span class=\"line\">                lock.unlock(); </span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>分布式鎖避免缓存擊穿流程:<br>\n1️⃣注入 RedissonClient<br>\n2️⃣生成以課程 ID 命名的鎖<br>\n3️⃣獲得鎖<br>\n4️⃣如果主線程未執行完，但已超過期時效，會進入 WatchDog 機制，再一次計算過期時間<br>\n5️⃣主線程執行完<br>\n6️⃣釋放鎖</p>\n<img data-src=\"https://usagif.com/wp-content/uploads/gifs/thanks-for-watching-9.gif\" class=\"abc\" width=\"600\" height=\"350\">",
            "tags": [
                "Radis"
            ]
        }
    ]
}